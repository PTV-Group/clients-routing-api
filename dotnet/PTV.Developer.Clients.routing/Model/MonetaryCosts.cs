/*
 * Routing
 *
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver's working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.31
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routing.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routing.Model
{
    /// <summary>
    /// Provides an overview of the costs of the route.   Requires the result _MONETARY_COSTS_ to be requested.
    /// </summary>
    [DataContract(Name = "MonetaryCosts")]
    public partial class MonetaryCosts : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="MonetaryCosts" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected MonetaryCosts() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="MonetaryCosts" /> class.
        /// </summary>
        /// <param name="currency">The currency code according to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217). (required).</param>
        /// <param name="totalCost">The total monetary cost of the route. (required).</param>
        /// <param name="distanceCost">The distance cost based on the **monetaryCostOptions[costPerKilometer]** and the driving distance. (required).</param>
        /// <param name="workingTimeCost">The working time cost based on **monetaryCostOptions[costPerWorkingHour]** and the driving time. Break, service and rest times are not considered. (required).</param>
        /// <param name="energyCost">The energy cost based on the vehicle&#39;s consumption and the corresponding cost parameters. (required).</param>
        /// <param name="tollCost">The toll cost based on the route and the vehicle.   Toll prices do not include VAT.  (required).</param>
        public MonetaryCosts(string currency = default(string), double? totalCost = default(double?), double? distanceCost = default(double?), double? workingTimeCost = default(double?), double? energyCost = default(double?), double? tollCost = default(double?))
        {
            // to ensure "currency" is required (not null)
            if (currency == null)
            {
                throw new ArgumentNullException("currency is a required property for MonetaryCosts and cannot be null");
            }
            this.Currency = currency;
            // to ensure "totalCost" is required (not null)
            if (totalCost == null)
            {
                throw new ArgumentNullException("totalCost is a required property for MonetaryCosts and cannot be null");
            }
            this.TotalCost = totalCost;
            // to ensure "distanceCost" is required (not null)
            if (distanceCost == null)
            {
                throw new ArgumentNullException("distanceCost is a required property for MonetaryCosts and cannot be null");
            }
            this.DistanceCost = distanceCost;
            // to ensure "workingTimeCost" is required (not null)
            if (workingTimeCost == null)
            {
                throw new ArgumentNullException("workingTimeCost is a required property for MonetaryCosts and cannot be null");
            }
            this.WorkingTimeCost = workingTimeCost;
            // to ensure "energyCost" is required (not null)
            if (energyCost == null)
            {
                throw new ArgumentNullException("energyCost is a required property for MonetaryCosts and cannot be null");
            }
            this.EnergyCost = energyCost;
            // to ensure "tollCost" is required (not null)
            if (tollCost == null)
            {
                throw new ArgumentNullException("tollCost is a required property for MonetaryCosts and cannot be null");
            }
            this.TollCost = tollCost;
        }

        /// <summary>
        /// The currency code according to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).
        /// </summary>
        /// <value>The currency code according to [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217).</value>
        [DataMember(Name = "currency", IsRequired = true, EmitDefaultValue = true)]
        public string Currency { get; set; }

        /// <summary>
        /// The total monetary cost of the route.
        /// </summary>
        /// <value>The total monetary cost of the route.</value>
        [DataMember(Name = "totalCost", IsRequired = true, EmitDefaultValue = true)]
        public double? TotalCost { get; set; }

        /// <summary>
        /// The distance cost based on the **monetaryCostOptions[costPerKilometer]** and the driving distance.
        /// </summary>
        /// <value>The distance cost based on the **monetaryCostOptions[costPerKilometer]** and the driving distance.</value>
        [DataMember(Name = "distanceCost", IsRequired = true, EmitDefaultValue = true)]
        public double? DistanceCost { get; set; }

        /// <summary>
        /// The working time cost based on **monetaryCostOptions[costPerWorkingHour]** and the driving time. Break, service and rest times are not considered.
        /// </summary>
        /// <value>The working time cost based on **monetaryCostOptions[costPerWorkingHour]** and the driving time. Break, service and rest times are not considered.</value>
        [DataMember(Name = "workingTimeCost", IsRequired = true, EmitDefaultValue = true)]
        public double? WorkingTimeCost { get; set; }

        /// <summary>
        /// The energy cost based on the vehicle&#39;s consumption and the corresponding cost parameters.
        /// </summary>
        /// <value>The energy cost based on the vehicle&#39;s consumption and the corresponding cost parameters.</value>
        [DataMember(Name = "energyCost", IsRequired = true, EmitDefaultValue = true)]
        public double? EnergyCost { get; set; }

        /// <summary>
        /// The toll cost based on the route and the vehicle.   Toll prices do not include VAT. 
        /// </summary>
        /// <value>The toll cost based on the route and the vehicle.   Toll prices do not include VAT. </value>
        [DataMember(Name = "tollCost", IsRequired = true, EmitDefaultValue = true)]
        public double? TollCost { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MonetaryCosts {\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TotalCost: ").Append(TotalCost).Append("\n");
            sb.Append("  DistanceCost: ").Append(DistanceCost).Append("\n");
            sb.Append("  WorkingTimeCost: ").Append(WorkingTimeCost).Append("\n");
            sb.Append("  EnergyCost: ").Append(EnergyCost).Append("\n");
            sb.Append("  TollCost: ").Append(TollCost).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            if (this.Currency != null) {
                // Currency (string) pattern
                Regex regexCurrency = new Regex(@"[A-Z]{3}", RegexOptions.CultureInvariant);
                if (!regexCurrency.Match(this.Currency).Success)
                {
                    yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Currency, must match a pattern of " + regexCurrency, new [] { "Currency" });
                }
            }

            // TotalCost (double?) minimum
            if (this.TotalCost < (double?)0)
            {
                yield return new ValidationResult("Invalid value for TotalCost, must be a value greater than or equal to 0.", new [] { "TotalCost" });
            }

            // DistanceCost (double?) minimum
            if (this.DistanceCost < (double?)0)
            {
                yield return new ValidationResult("Invalid value for DistanceCost, must be a value greater than or equal to 0.", new [] { "DistanceCost" });
            }

            // WorkingTimeCost (double?) minimum
            if (this.WorkingTimeCost < (double?)0)
            {
                yield return new ValidationResult("Invalid value for WorkingTimeCost, must be a value greater than or equal to 0.", new [] { "WorkingTimeCost" });
            }

            // EnergyCost (double?) minimum
            if (this.EnergyCost < (double?)0)
            {
                yield return new ValidationResult("Invalid value for EnergyCost, must be a value greater than or equal to 0.", new [] { "EnergyCost" });
            }

            // TollCost (double?) minimum
            if (this.TollCost < (double?)0)
            {
                yield return new ValidationResult("Invalid value for TollCost, must be a value greater than or equal to 0.", new [] { "TollCost" });
            }

            yield break;
        }
    }

}
