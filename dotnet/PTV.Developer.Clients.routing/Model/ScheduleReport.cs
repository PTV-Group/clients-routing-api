/*
 * Routing
 *
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver's working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.16
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routing.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routing.Model
{
    /// <summary>
    /// Provides an overview of the times of the schedule of this route including break and rest times. Requires _SCHELDULE_REPORT_ to be requested.
    /// </summary>
    [DataContract(Name = "ScheduleReport")]
    public partial class ScheduleReport : IEquatable<ScheduleReport>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleReport" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ScheduleReport() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ScheduleReport" /> class.
        /// </summary>
        /// <param name="startTime">The start time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). Only present with **options[trafficMode]** _REALISTIC_ or when **options[startTime]** is specified..</param>
        /// <param name="endTime">The end time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). Only present with **options[trafficMode]** _REALISTIC_ or when **options[startTime]** is specified..</param>
        /// <param name="drivingTime">The total driving time of the route [s]. (required).</param>
        /// <param name="serviceTime">The total service time of the route [s]. (required).</param>
        /// <param name="waitingTime">The total waiting time of the route [s]. (required).</param>
        /// <param name="breakTime">The total break time of the route [s]. (required).</param>
        /// <param name="restTime">The total rest time of the route [s]. (required).</param>
        public ScheduleReport(DateTimeOffset startTime = default(DateTimeOffset), DateTimeOffset endTime = default(DateTimeOffset), int drivingTime = default(int), int serviceTime = default(int), int waitingTime = default(int), int breakTime = default(int), int restTime = default(int))
        {
            this.DrivingTime = drivingTime;
            this.ServiceTime = serviceTime;
            this.WaitingTime = waitingTime;
            this.BreakTime = breakTime;
            this.RestTime = restTime;
            this.StartTime = startTime;
            this.EndTime = endTime;
        }

        /// <summary>
        /// The start time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). Only present with **options[trafficMode]** _REALISTIC_ or when **options[startTime]** is specified.
        /// </summary>
        /// <value>The start time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). Only present with **options[trafficMode]** _REALISTIC_ or when **options[startTime]** is specified.</value>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public DateTimeOffset StartTime { get; set; }

        /// <summary>
        /// The end time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). Only present with **options[trafficMode]** _REALISTIC_ or when **options[startTime]** is specified.
        /// </summary>
        /// <value>The end time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). Only present with **options[trafficMode]** _REALISTIC_ or when **options[startTime]** is specified.</value>
        [DataMember(Name = "endTime", EmitDefaultValue = false)]
        public DateTimeOffset EndTime { get; set; }

        /// <summary>
        /// The total driving time of the route [s].
        /// </summary>
        /// <value>The total driving time of the route [s].</value>
        [DataMember(Name = "drivingTime", IsRequired = true, EmitDefaultValue = true)]
        public int DrivingTime { get; set; }

        /// <summary>
        /// The total service time of the route [s].
        /// </summary>
        /// <value>The total service time of the route [s].</value>
        [DataMember(Name = "serviceTime", IsRequired = true, EmitDefaultValue = true)]
        public int ServiceTime { get; set; }

        /// <summary>
        /// The total waiting time of the route [s].
        /// </summary>
        /// <value>The total waiting time of the route [s].</value>
        [DataMember(Name = "waitingTime", IsRequired = true, EmitDefaultValue = true)]
        public int WaitingTime { get; set; }

        /// <summary>
        /// The total break time of the route [s].
        /// </summary>
        /// <value>The total break time of the route [s].</value>
        [DataMember(Name = "breakTime", IsRequired = true, EmitDefaultValue = true)]
        public int BreakTime { get; set; }

        /// <summary>
        /// The total rest time of the route [s].
        /// </summary>
        /// <value>The total rest time of the route [s].</value>
        [DataMember(Name = "restTime", IsRequired = true, EmitDefaultValue = true)]
        public int RestTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ScheduleReport {\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  EndTime: ").Append(EndTime).Append("\n");
            sb.Append("  DrivingTime: ").Append(DrivingTime).Append("\n");
            sb.Append("  ServiceTime: ").Append(ServiceTime).Append("\n");
            sb.Append("  WaitingTime: ").Append(WaitingTime).Append("\n");
            sb.Append("  BreakTime: ").Append(BreakTime).Append("\n");
            sb.Append("  RestTime: ").Append(RestTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ScheduleReport);
        }

        /// <summary>
        /// Returns true if ScheduleReport instances are equal
        /// </summary>
        /// <param name="input">Instance of ScheduleReport to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScheduleReport input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.EndTime == input.EndTime ||
                    (this.EndTime != null &&
                    this.EndTime.Equals(input.EndTime))
                ) && 
                (
                    this.DrivingTime == input.DrivingTime ||
                    this.DrivingTime.Equals(input.DrivingTime)
                ) && 
                (
                    this.ServiceTime == input.ServiceTime ||
                    this.ServiceTime.Equals(input.ServiceTime)
                ) && 
                (
                    this.WaitingTime == input.WaitingTime ||
                    this.WaitingTime.Equals(input.WaitingTime)
                ) && 
                (
                    this.BreakTime == input.BreakTime ||
                    this.BreakTime.Equals(input.BreakTime)
                ) && 
                (
                    this.RestTime == input.RestTime ||
                    this.RestTime.Equals(input.RestTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                if (this.EndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EndTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DrivingTime.GetHashCode();
                hashCode = (hashCode * 59) + this.ServiceTime.GetHashCode();
                hashCode = (hashCode * 59) + this.WaitingTime.GetHashCode();
                hashCode = (hashCode * 59) + this.BreakTime.GetHashCode();
                hashCode = (hashCode * 59) + this.RestTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // DrivingTime (int) minimum
            if (this.DrivingTime < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for DrivingTime, must be a value greater than or equal to 0.", new [] { "DrivingTime" });
            }

            // ServiceTime (int) minimum
            if (this.ServiceTime < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ServiceTime, must be a value greater than or equal to 0.", new [] { "ServiceTime" });
            }

            // WaitingTime (int) minimum
            if (this.WaitingTime < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WaitingTime, must be a value greater than or equal to 0.", new [] { "WaitingTime" });
            }

            // BreakTime (int) minimum
            if (this.BreakTime < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for BreakTime, must be a value greater than or equal to 0.", new [] { "BreakTime" });
            }

            // RestTime (int) minimum
            if (this.RestTime < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for RestTime, must be a value greater than or equal to 0.", new [] { "RestTime" });
            }

            yield break;
        }
    }

}
