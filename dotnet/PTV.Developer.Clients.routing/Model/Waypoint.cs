/*
 * Routing
 *
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver's working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routing.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routing.Model
{
    /// <summary>
    /// Waypoint
    /// </summary>
    [DataContract(Name = "Waypoint")]
    public partial class Waypoint : IEquatable<Waypoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Waypoint" /> class.
        /// </summary>
        /// <param name="name">An identifier to reference this waypoint in the response..</param>
        /// <param name="onRoad">onRoad.</param>
        /// <param name="offRoad">offRoad.</param>
        /// <param name="manipulate">manipulate.</param>
        /// <param name="combinedTransport">combinedTransport.</param>
        public Waypoint(string name = default(string), OnRoadWaypoint onRoad = default(OnRoadWaypoint), OffRoadWaypoint offRoad = default(OffRoadWaypoint), ManipulateRouteWaypoint manipulate = default(ManipulateRouteWaypoint), CombinedTransport combinedTransport = default(CombinedTransport))
        {
            this.Name = name;
            this.OnRoad = onRoad;
            this.OffRoad = offRoad;
            this.Manipulate = manipulate;
            this.CombinedTransport = combinedTransport;
        }

        /// <summary>
        /// An identifier to reference this waypoint in the response.
        /// </summary>
        /// <value>An identifier to reference this waypoint in the response.</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OnRoad
        /// </summary>
        [DataMember(Name = "onRoad", EmitDefaultValue = false)]
        public OnRoadWaypoint OnRoad { get; set; }

        /// <summary>
        /// Gets or Sets OffRoad
        /// </summary>
        [DataMember(Name = "offRoad", EmitDefaultValue = false)]
        public OffRoadWaypoint OffRoad { get; set; }

        /// <summary>
        /// Gets or Sets Manipulate
        /// </summary>
        [DataMember(Name = "manipulate", EmitDefaultValue = false)]
        public ManipulateRouteWaypoint Manipulate { get; set; }

        /// <summary>
        /// Gets or Sets CombinedTransport
        /// </summary>
        [DataMember(Name = "combinedTransport", EmitDefaultValue = false)]
        public CombinedTransport CombinedTransport { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Waypoint {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OnRoad: ").Append(OnRoad).Append("\n");
            sb.Append("  OffRoad: ").Append(OffRoad).Append("\n");
            sb.Append("  Manipulate: ").Append(Manipulate).Append("\n");
            sb.Append("  CombinedTransport: ").Append(CombinedTransport).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Waypoint);
        }

        /// <summary>
        /// Returns true if Waypoint instances are equal
        /// </summary>
        /// <param name="input">Instance of Waypoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Waypoint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.OnRoad == input.OnRoad ||
                    (this.OnRoad != null &&
                    this.OnRoad.Equals(input.OnRoad))
                ) && 
                (
                    this.OffRoad == input.OffRoad ||
                    (this.OffRoad != null &&
                    this.OffRoad.Equals(input.OffRoad))
                ) && 
                (
                    this.Manipulate == input.Manipulate ||
                    (this.Manipulate != null &&
                    this.Manipulate.Equals(input.Manipulate))
                ) && 
                (
                    this.CombinedTransport == input.CombinedTransport ||
                    (this.CombinedTransport != null &&
                    this.CombinedTransport.Equals(input.CombinedTransport))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.OnRoad != null)
                {
                    hashCode = (hashCode * 59) + this.OnRoad.GetHashCode();
                }
                if (this.OffRoad != null)
                {
                    hashCode = (hashCode * 59) + this.OffRoad.GetHashCode();
                }
                if (this.Manipulate != null)
                {
                    hashCode = (hashCode * 59) + this.Manipulate.GetHashCode();
                }
                if (this.CombinedTransport != null)
                {
                    hashCode = (hashCode * 59) + this.CombinedTransport.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
