/*
 * Routing
 *
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver's working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.15
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routing.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routing.Model
{
    /// <summary>
    /// Emissions according to the French CO2E decree from 2017.
    /// </summary>
    [DataContract(Name = "Emissions_French_CO2e_Decree_2017_639")]
    public partial class EmissionsFrenchCO2eDecree2017639 : IEquatable<EmissionsFrenchCO2eDecree2017639>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EmissionsFrenchCO2eDecree2017639" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EmissionsFrenchCO2eDecree2017639() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EmissionsFrenchCO2eDecree2017639" /> class.
        /// </summary>
        /// <param name="co2eWellToWheel">The amount of emitted CO2e from well to wheel [kg]. (required).</param>
        /// <param name="co2eTankToWheel">The amount of emitted CO2e from tank to wheel [kg]. (required).</param>
        public EmissionsFrenchCO2eDecree2017639(double co2eWellToWheel = default(double), double co2eTankToWheel = default(double))
        {
            this.Co2eWellToWheel = co2eWellToWheel;
            this.Co2eTankToWheel = co2eTankToWheel;
        }

        /// <summary>
        /// The amount of emitted CO2e from well to wheel [kg].
        /// </summary>
        /// <value>The amount of emitted CO2e from well to wheel [kg].</value>
        [DataMember(Name = "co2eWellToWheel", IsRequired = true, EmitDefaultValue = false)]
        public double Co2eWellToWheel { get; set; }

        /// <summary>
        /// The amount of emitted CO2e from tank to wheel [kg].
        /// </summary>
        /// <value>The amount of emitted CO2e from tank to wheel [kg].</value>
        [DataMember(Name = "co2eTankToWheel", IsRequired = true, EmitDefaultValue = false)]
        public double Co2eTankToWheel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EmissionsFrenchCO2eDecree2017639 {\n");
            sb.Append("  Co2eWellToWheel: ").Append(Co2eWellToWheel).Append("\n");
            sb.Append("  Co2eTankToWheel: ").Append(Co2eTankToWheel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EmissionsFrenchCO2eDecree2017639);
        }

        /// <summary>
        /// Returns true if EmissionsFrenchCO2eDecree2017639 instances are equal
        /// </summary>
        /// <param name="input">Instance of EmissionsFrenchCO2eDecree2017639 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EmissionsFrenchCO2eDecree2017639 input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Co2eWellToWheel == input.Co2eWellToWheel ||
                    this.Co2eWellToWheel.Equals(input.Co2eWellToWheel)
                ) && 
                (
                    this.Co2eTankToWheel == input.Co2eTankToWheel ||
                    this.Co2eTankToWheel.Equals(input.Co2eTankToWheel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Co2eWellToWheel.GetHashCode();
                hashCode = (hashCode * 59) + this.Co2eTankToWheel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Co2eWellToWheel (double) minimum
            if (this.Co2eWellToWheel < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Co2eWellToWheel, must be a value greater than or equal to 0.", new [] { "Co2eWellToWheel" });
            }

            // Co2eTankToWheel (double) minimum
            if (this.Co2eTankToWheel < (double)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Co2eTankToWheel, must be a value greater than or equal to 0.", new [] { "Co2eTankToWheel" });
            }

            yield break;
        }
    }

}
