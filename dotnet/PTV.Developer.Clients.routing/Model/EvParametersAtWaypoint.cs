/*
 * Routing
 *
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver's working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.25
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routing.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routing.Model
{
    /// <summary>
    /// The ev parameters that are specific to a waypoint.  This parameter is in a preview state, the API is stable, feature changes could be introduced in future. 
    /// </summary>
    [DataContract(Name = "EvParametersAtWaypoint")]
    public partial class EvParametersAtWaypoint : IEquatable<EvParametersAtWaypoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EvParametersAtWaypoint" /> class.
        /// </summary>
        /// <param name="weather">weather.</param>
        /// <param name="chargingStation">chargingStation.</param>
        public EvParametersAtWaypoint(Weather weather = default(Weather), ChargingStation chargingStation = default(ChargingStation))
        {
            this.Weather = weather;
            this.ChargingStation = chargingStation;
        }

        /// <summary>
        /// Gets or Sets Weather
        /// </summary>
        [DataMember(Name = "weather", EmitDefaultValue = false)]
        public Weather Weather { get; set; }

        /// <summary>
        /// Gets or Sets ChargingStation
        /// </summary>
        [DataMember(Name = "chargingStation", EmitDefaultValue = false)]
        public ChargingStation ChargingStation { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EvParametersAtWaypoint {\n");
            sb.Append("  Weather: ").Append(Weather).Append("\n");
            sb.Append("  ChargingStation: ").Append(ChargingStation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EvParametersAtWaypoint);
        }

        /// <summary>
        /// Returns true if EvParametersAtWaypoint instances are equal
        /// </summary>
        /// <param name="input">Instance of EvParametersAtWaypoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EvParametersAtWaypoint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Weather == input.Weather ||
                    (this.Weather != null &&
                    this.Weather.Equals(input.Weather))
                ) && 
                (
                    this.ChargingStation == input.ChargingStation ||
                    (this.ChargingStation != null &&
                    this.ChargingStation.Equals(input.ChargingStation))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Weather != null)
                {
                    hashCode = (hashCode * 59) + this.Weather.GetHashCode();
                }
                if (this.ChargingStation != null)
                {
                    hashCode = (hashCode * 59) + this.ChargingStation.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
