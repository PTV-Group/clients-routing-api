/*
 * Routing
 *
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver's working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.14
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routing.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routing.Model
{
    /// <summary>
    /// RouteResponse
    /// </summary>
    [DataContract(Name = "RouteResponse")]
    public partial class RouteResponse : IEquatable<RouteResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RouteResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RouteResponse" /> class.
        /// </summary>
        /// <param name="distance">The distance of the route [m]. (required).</param>
        /// <param name="travelTime">The travel time for the route [s]. (required).</param>
        /// <param name="trafficDelay">The total delay due to live traffic on the route [s].  This value contains the sum of all traffic events on the route and will be non-zero only if **options[trafficMode]&#x3D;REALISTIC**. See [here](./Concepts/Traffic%20Modes.htm) for more information..</param>
        /// <param name="violated">When there is no valid route for the given vehicle between two waypoints, but the resulting route can be calculated by ignoring a vehicle parameter, the route is marked as violated. When requesting _VIOLATION_EVENTS_ there is a corresponding violation event containing the position, time and the vehicle property in question. (required).</param>
        /// <param name="routeId">The ID of the calculated route..</param>
        /// <param name="legs">The legs of the route..</param>
        /// <param name="toll">toll.</param>
        /// <param name="polyline">The polyline of the route in the format specified by **options[polylineFormat]**..</param>
        /// <param name="events">Detailed information on maneuvers, border crossings and other events along the route in chronological order..</param>
        /// <param name="emissions">emissions.</param>
        /// <param name="alternativeRoutes">Detailed information on alternative routes. Requires _ALTERNATIVE_ROUTES_ to be requested. The array may be empty when no alternative routes are found..</param>
        /// <param name="scheduleReport">scheduleReport.</param>
        /// <param name="guidedNavigation">A base64 encoded representation of the route that can be used for the [PTV Navigator](https://www.myptv.com/en/logistics-software/ptv-navigator). The base64 binary has to be decoded and saved as a text file with the extension .bcr. Requires _GUIDED_NAVIGATION_ to be requested..</param>
        /// <param name="monetaryCosts">monetaryCosts.</param>
        /// <param name="warnings">A list of warnings concerning the validity of the result..</param>
        public RouteResponse(int distance = default(int), int travelTime = default(int), int trafficDelay = default(int), bool violated = default(bool), Guid routeId = default(Guid), List<Leg> legs = default(List<Leg>), Toll toll = default(Toll), string polyline = default(string), List<Event> events = default(List<Event>), Emissions emissions = default(Emissions), List<AlternativeRoute> alternativeRoutes = default(List<AlternativeRoute>), ScheduleReport scheduleReport = default(ScheduleReport), string guidedNavigation = default(string), MonetaryCosts monetaryCosts = default(MonetaryCosts), List<Warning> warnings = default(List<Warning>))
        {
            this.Distance = distance;
            this.TravelTime = travelTime;
            this.Violated = violated;
            this.TrafficDelay = trafficDelay;
            this.RouteId = routeId;
            this.Legs = legs;
            this.Toll = toll;
            this.Polyline = polyline;
            this.Events = events;
            this.Emissions = emissions;
            this.AlternativeRoutes = alternativeRoutes;
            this.ScheduleReport = scheduleReport;
            this.GuidedNavigation = guidedNavigation;
            this.MonetaryCosts = monetaryCosts;
            this.Warnings = warnings;
        }

        /// <summary>
        /// The distance of the route [m].
        /// </summary>
        /// <value>The distance of the route [m].</value>
        [DataMember(Name = "distance", IsRequired = true, EmitDefaultValue = false)]
        public int Distance { get; set; }

        /// <summary>
        /// The travel time for the route [s].
        /// </summary>
        /// <value>The travel time for the route [s].</value>
        [DataMember(Name = "travelTime", IsRequired = true, EmitDefaultValue = false)]
        public int TravelTime { get; set; }

        /// <summary>
        /// The total delay due to live traffic on the route [s].  This value contains the sum of all traffic events on the route and will be non-zero only if **options[trafficMode]&#x3D;REALISTIC**. See [here](./Concepts/Traffic%20Modes.htm) for more information.
        /// </summary>
        /// <value>The total delay due to live traffic on the route [s].  This value contains the sum of all traffic events on the route and will be non-zero only if **options[trafficMode]&#x3D;REALISTIC**. See [here](./Concepts/Traffic%20Modes.htm) for more information.</value>
        [DataMember(Name = "trafficDelay", EmitDefaultValue = false)]
        public int TrafficDelay { get; set; }

        /// <summary>
        /// When there is no valid route for the given vehicle between two waypoints, but the resulting route can be calculated by ignoring a vehicle parameter, the route is marked as violated. When requesting _VIOLATION_EVENTS_ there is a corresponding violation event containing the position, time and the vehicle property in question.
        /// </summary>
        /// <value>When there is no valid route for the given vehicle between two waypoints, but the resulting route can be calculated by ignoring a vehicle parameter, the route is marked as violated. When requesting _VIOLATION_EVENTS_ there is a corresponding violation event containing the position, time and the vehicle property in question.</value>
        [DataMember(Name = "violated", IsRequired = true, EmitDefaultValue = true)]
        public bool Violated { get; set; }

        /// <summary>
        /// The ID of the calculated route.
        /// </summary>
        /// <value>The ID of the calculated route.</value>
        [DataMember(Name = "routeId", EmitDefaultValue = false)]
        public Guid RouteId { get; set; }

        /// <summary>
        /// The legs of the route.
        /// </summary>
        /// <value>The legs of the route.</value>
        [DataMember(Name = "legs", EmitDefaultValue = false)]
        public List<Leg> Legs { get; set; }

        /// <summary>
        /// Gets or Sets Toll
        /// </summary>
        [DataMember(Name = "toll", EmitDefaultValue = false)]
        public Toll Toll { get; set; }

        /// <summary>
        /// The polyline of the route in the format specified by **options[polylineFormat]**.
        /// </summary>
        /// <value>The polyline of the route in the format specified by **options[polylineFormat]**.</value>
        [DataMember(Name = "polyline", EmitDefaultValue = false)]
        public string Polyline { get; set; }

        /// <summary>
        /// Detailed information on maneuvers, border crossings and other events along the route in chronological order.
        /// </summary>
        /// <value>Detailed information on maneuvers, border crossings and other events along the route in chronological order.</value>
        [DataMember(Name = "events", EmitDefaultValue = false)]
        public List<Event> Events { get; set; }

        /// <summary>
        /// Gets or Sets Emissions
        /// </summary>
        [DataMember(Name = "emissions", EmitDefaultValue = false)]
        public Emissions Emissions { get; set; }

        /// <summary>
        /// Detailed information on alternative routes. Requires _ALTERNATIVE_ROUTES_ to be requested. The array may be empty when no alternative routes are found.
        /// </summary>
        /// <value>Detailed information on alternative routes. Requires _ALTERNATIVE_ROUTES_ to be requested. The array may be empty when no alternative routes are found.</value>
        [DataMember(Name = "alternativeRoutes", EmitDefaultValue = false)]
        public List<AlternativeRoute> AlternativeRoutes { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleReport
        /// </summary>
        [DataMember(Name = "scheduleReport", EmitDefaultValue = false)]
        public ScheduleReport ScheduleReport { get; set; }

        /// <summary>
        /// A base64 encoded representation of the route that can be used for the [PTV Navigator](https://www.myptv.com/en/logistics-software/ptv-navigator). The base64 binary has to be decoded and saved as a text file with the extension .bcr. Requires _GUIDED_NAVIGATION_ to be requested.
        /// </summary>
        /// <value>A base64 encoded representation of the route that can be used for the [PTV Navigator](https://www.myptv.com/en/logistics-software/ptv-navigator). The base64 binary has to be decoded and saved as a text file with the extension .bcr. Requires _GUIDED_NAVIGATION_ to be requested.</value>
        [DataMember(Name = "guidedNavigation", EmitDefaultValue = false)]
        public string GuidedNavigation { get; set; }

        /// <summary>
        /// Gets or Sets MonetaryCosts
        /// </summary>
        [DataMember(Name = "monetaryCosts", EmitDefaultValue = false)]
        public MonetaryCosts MonetaryCosts { get; set; }

        /// <summary>
        /// A list of warnings concerning the validity of the result.
        /// </summary>
        /// <value>A list of warnings concerning the validity of the result.</value>
        [DataMember(Name = "warnings", EmitDefaultValue = false)]
        public List<Warning> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RouteResponse {\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  TravelTime: ").Append(TravelTime).Append("\n");
            sb.Append("  TrafficDelay: ").Append(TrafficDelay).Append("\n");
            sb.Append("  Violated: ").Append(Violated).Append("\n");
            sb.Append("  RouteId: ").Append(RouteId).Append("\n");
            sb.Append("  Legs: ").Append(Legs).Append("\n");
            sb.Append("  Toll: ").Append(Toll).Append("\n");
            sb.Append("  Polyline: ").Append(Polyline).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  Emissions: ").Append(Emissions).Append("\n");
            sb.Append("  AlternativeRoutes: ").Append(AlternativeRoutes).Append("\n");
            sb.Append("  ScheduleReport: ").Append(ScheduleReport).Append("\n");
            sb.Append("  GuidedNavigation: ").Append(GuidedNavigation).Append("\n");
            sb.Append("  MonetaryCosts: ").Append(MonetaryCosts).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RouteResponse);
        }

        /// <summary>
        /// Returns true if RouteResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of RouteResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RouteResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Distance == input.Distance ||
                    this.Distance.Equals(input.Distance)
                ) && 
                (
                    this.TravelTime == input.TravelTime ||
                    this.TravelTime.Equals(input.TravelTime)
                ) && 
                (
                    this.TrafficDelay == input.TrafficDelay ||
                    this.TrafficDelay.Equals(input.TrafficDelay)
                ) && 
                (
                    this.Violated == input.Violated ||
                    this.Violated.Equals(input.Violated)
                ) && 
                (
                    this.RouteId == input.RouteId ||
                    (this.RouteId != null &&
                    this.RouteId.Equals(input.RouteId))
                ) && 
                (
                    this.Legs == input.Legs ||
                    this.Legs != null &&
                    input.Legs != null &&
                    this.Legs.SequenceEqual(input.Legs)
                ) && 
                (
                    this.Toll == input.Toll ||
                    (this.Toll != null &&
                    this.Toll.Equals(input.Toll))
                ) && 
                (
                    this.Polyline == input.Polyline ||
                    (this.Polyline != null &&
                    this.Polyline.Equals(input.Polyline))
                ) && 
                (
                    this.Events == input.Events ||
                    this.Events != null &&
                    input.Events != null &&
                    this.Events.SequenceEqual(input.Events)
                ) && 
                (
                    this.Emissions == input.Emissions ||
                    (this.Emissions != null &&
                    this.Emissions.Equals(input.Emissions))
                ) && 
                (
                    this.AlternativeRoutes == input.AlternativeRoutes ||
                    this.AlternativeRoutes != null &&
                    input.AlternativeRoutes != null &&
                    this.AlternativeRoutes.SequenceEqual(input.AlternativeRoutes)
                ) && 
                (
                    this.ScheduleReport == input.ScheduleReport ||
                    (this.ScheduleReport != null &&
                    this.ScheduleReport.Equals(input.ScheduleReport))
                ) && 
                (
                    this.GuidedNavigation == input.GuidedNavigation ||
                    (this.GuidedNavigation != null &&
                    this.GuidedNavigation.Equals(input.GuidedNavigation))
                ) && 
                (
                    this.MonetaryCosts == input.MonetaryCosts ||
                    (this.MonetaryCosts != null &&
                    this.MonetaryCosts.Equals(input.MonetaryCosts))
                ) && 
                (
                    this.Warnings == input.Warnings ||
                    this.Warnings != null &&
                    input.Warnings != null &&
                    this.Warnings.SequenceEqual(input.Warnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Distance.GetHashCode();
                hashCode = (hashCode * 59) + this.TravelTime.GetHashCode();
                hashCode = (hashCode * 59) + this.TrafficDelay.GetHashCode();
                hashCode = (hashCode * 59) + this.Violated.GetHashCode();
                if (this.RouteId != null)
                {
                    hashCode = (hashCode * 59) + this.RouteId.GetHashCode();
                }
                if (this.Legs != null)
                {
                    hashCode = (hashCode * 59) + this.Legs.GetHashCode();
                }
                if (this.Toll != null)
                {
                    hashCode = (hashCode * 59) + this.Toll.GetHashCode();
                }
                if (this.Polyline != null)
                {
                    hashCode = (hashCode * 59) + this.Polyline.GetHashCode();
                }
                if (this.Events != null)
                {
                    hashCode = (hashCode * 59) + this.Events.GetHashCode();
                }
                if (this.Emissions != null)
                {
                    hashCode = (hashCode * 59) + this.Emissions.GetHashCode();
                }
                if (this.AlternativeRoutes != null)
                {
                    hashCode = (hashCode * 59) + this.AlternativeRoutes.GetHashCode();
                }
                if (this.ScheduleReport != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduleReport.GetHashCode();
                }
                if (this.GuidedNavigation != null)
                {
                    hashCode = (hashCode * 59) + this.GuidedNavigation.GetHashCode();
                }
                if (this.MonetaryCosts != null)
                {
                    hashCode = (hashCode * 59) + this.MonetaryCosts.GetHashCode();
                }
                if (this.Warnings != null)
                {
                    hashCode = (hashCode * 59) + this.Warnings.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Distance (int) minimum
            if (this.Distance < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Distance, must be a value greater than or equal to 0.", new [] { "Distance" });
            }

            // TravelTime (int) minimum
            if (this.TravelTime < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TravelTime, must be a value greater than or equal to 0.", new [] { "TravelTime" });
            }

            // TrafficDelay (int) minimum
            if (this.TrafficDelay < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrafficDelay, must be a value greater than or equal to 0.", new [] { "TrafficDelay" });
            }

            yield break;
        }
    }

}
