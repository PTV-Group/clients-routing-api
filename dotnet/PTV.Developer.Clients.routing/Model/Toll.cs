/*
 * Routing
 *
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver's working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.31
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routing.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routing.Model
{
    /// <summary>
    /// Detailed information on the toll costs, providers and tariff information.   Toll prices do not include VAT. 
    /// </summary>
    [DataContract(Name = "Toll")]
    public partial class Toll : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Toll" /> class.
        /// </summary>
        /// <param name="costs">costs.</param>
        /// <param name="sections">The list of toll sections defined by the toll operators..</param>
        /// <param name="systems">The list of toll systems defined by the toll operators..</param>
        /// <param name="currencies">currencies.</param>
        public Toll(TollCosts costs = default(TollCosts), List<TollSection> sections = default(List<TollSection>), List<TollSystem> systems = default(List<TollSystem>), Currencies currencies = default(Currencies))
        {
            this.Costs = costs;
            this.Sections = sections;
            this.Systems = systems;
            this.Currencies = currencies;
        }

        /// <summary>
        /// Gets or Sets Costs
        /// </summary>
        [DataMember(Name = "costs", EmitDefaultValue = false)]
        public TollCosts Costs { get; set; }

        /// <summary>
        /// The list of toll sections defined by the toll operators.
        /// </summary>
        /// <value>The list of toll sections defined by the toll operators.</value>
        [DataMember(Name = "sections", EmitDefaultValue = false)]
        public List<TollSection> Sections { get; set; }

        /// <summary>
        /// The list of toll systems defined by the toll operators.
        /// </summary>
        /// <value>The list of toll systems defined by the toll operators.</value>
        [DataMember(Name = "systems", EmitDefaultValue = false)]
        public List<TollSystem> Systems { get; set; }

        /// <summary>
        /// Gets or Sets Currencies
        /// </summary>
        [DataMember(Name = "currencies", EmitDefaultValue = false)]
        public Currencies Currencies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Toll {\n");
            sb.Append("  Costs: ").Append(Costs).Append("\n");
            sb.Append("  Sections: ").Append(Sections).Append("\n");
            sb.Append("  Systems: ").Append(Systems).Append("\n");
            sb.Append("  Currencies: ").Append(Currencies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
