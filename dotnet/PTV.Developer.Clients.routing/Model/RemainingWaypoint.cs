/*
 * Routing
 *
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver's working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.22
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routing.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routing.Model
{
    /// <summary>
    /// The ETA and the remaining distance and travel time to that waypoint.
    /// </summary>
    [DataContract(Name = "RemainingWaypoint")]
    public partial class RemainingWaypoint : IEquatable<RemainingWaypoint>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemainingWaypoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RemainingWaypoint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RemainingWaypoint" /> class.
        /// </summary>
        /// <param name="name">The name of the waypoint. (required).</param>
        /// <param name="estimatedTimeOfArrival">The estimated time of arrival at the waypoint formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). (required).</param>
        /// <param name="distance">The distance from the current position to the waypoint [m]. (required).</param>
        /// <param name="travelTime">The travel time from the current position to the waypoint [s]. (required).</param>
        /// <param name="trafficDelay">The delay due to live traffic from the current position to the waypoint [s]. (required).</param>
        /// <param name="waitingTime">The waiting time from the current position to the waypoint [s]. (required).</param>
        /// <param name="scheduleViolations">Contains the list of violated schedule restrictions at this waypoint and up to this waypoint. (required).</param>
        public RemainingWaypoint(string name = default(string), DateTimeOffset estimatedTimeOfArrival = default(DateTimeOffset), int distance = default(int), int travelTime = default(int), int trafficDelay = default(int), int waitingTime = default(int), List<ScheduleViolationType> scheduleViolations = default(List<ScheduleViolationType>))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RemainingWaypoint and cannot be null");
            }
            this.Name = name;
            this.EstimatedTimeOfArrival = estimatedTimeOfArrival;
            this.Distance = distance;
            this.TravelTime = travelTime;
            this.TrafficDelay = trafficDelay;
            this.WaitingTime = waitingTime;
            // to ensure "scheduleViolations" is required (not null)
            if (scheduleViolations == null)
            {
                throw new ArgumentNullException("scheduleViolations is a required property for RemainingWaypoint and cannot be null");
            }
            this.ScheduleViolations = scheduleViolations;
        }

        /// <summary>
        /// The name of the waypoint.
        /// </summary>
        /// <value>The name of the waypoint.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The estimated time of arrival at the waypoint formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
        /// </summary>
        /// <value>The estimated time of arrival at the waypoint formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).</value>
        [DataMember(Name = "estimatedTimeOfArrival", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset EstimatedTimeOfArrival { get; set; }

        /// <summary>
        /// The distance from the current position to the waypoint [m].
        /// </summary>
        /// <value>The distance from the current position to the waypoint [m].</value>
        [DataMember(Name = "distance", IsRequired = true, EmitDefaultValue = true)]
        public int Distance { get; set; }

        /// <summary>
        /// The travel time from the current position to the waypoint [s].
        /// </summary>
        /// <value>The travel time from the current position to the waypoint [s].</value>
        [DataMember(Name = "travelTime", IsRequired = true, EmitDefaultValue = true)]
        public int TravelTime { get; set; }

        /// <summary>
        /// The delay due to live traffic from the current position to the waypoint [s].
        /// </summary>
        /// <value>The delay due to live traffic from the current position to the waypoint [s].</value>
        [DataMember(Name = "trafficDelay", IsRequired = true, EmitDefaultValue = true)]
        public int TrafficDelay { get; set; }

        /// <summary>
        /// The waiting time from the current position to the waypoint [s].
        /// </summary>
        /// <value>The waiting time from the current position to the waypoint [s].</value>
        [DataMember(Name = "waitingTime", IsRequired = true, EmitDefaultValue = true)]
        public int WaitingTime { get; set; }

        /// <summary>
        /// Contains the list of violated schedule restrictions at this waypoint and up to this waypoint.
        /// </summary>
        /// <value>Contains the list of violated schedule restrictions at this waypoint and up to this waypoint.</value>
        [DataMember(Name = "scheduleViolations", IsRequired = true, EmitDefaultValue = true)]
        public List<ScheduleViolationType> ScheduleViolations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RemainingWaypoint {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EstimatedTimeOfArrival: ").Append(EstimatedTimeOfArrival).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  TravelTime: ").Append(TravelTime).Append("\n");
            sb.Append("  TrafficDelay: ").Append(TrafficDelay).Append("\n");
            sb.Append("  WaitingTime: ").Append(WaitingTime).Append("\n");
            sb.Append("  ScheduleViolations: ").Append(ScheduleViolations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RemainingWaypoint);
        }

        /// <summary>
        /// Returns true if RemainingWaypoint instances are equal
        /// </summary>
        /// <param name="input">Instance of RemainingWaypoint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemainingWaypoint input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.EstimatedTimeOfArrival == input.EstimatedTimeOfArrival ||
                    (this.EstimatedTimeOfArrival != null &&
                    this.EstimatedTimeOfArrival.Equals(input.EstimatedTimeOfArrival))
                ) && 
                (
                    this.Distance == input.Distance ||
                    this.Distance.Equals(input.Distance)
                ) && 
                (
                    this.TravelTime == input.TravelTime ||
                    this.TravelTime.Equals(input.TravelTime)
                ) && 
                (
                    this.TrafficDelay == input.TrafficDelay ||
                    this.TrafficDelay.Equals(input.TrafficDelay)
                ) && 
                (
                    this.WaitingTime == input.WaitingTime ||
                    this.WaitingTime.Equals(input.WaitingTime)
                ) && 
                (
                    this.ScheduleViolations == input.ScheduleViolations ||
                    this.ScheduleViolations != null &&
                    input.ScheduleViolations != null &&
                    this.ScheduleViolations.SequenceEqual(input.ScheduleViolations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.EstimatedTimeOfArrival != null)
                {
                    hashCode = (hashCode * 59) + this.EstimatedTimeOfArrival.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Distance.GetHashCode();
                hashCode = (hashCode * 59) + this.TravelTime.GetHashCode();
                hashCode = (hashCode * 59) + this.TrafficDelay.GetHashCode();
                hashCode = (hashCode * 59) + this.WaitingTime.GetHashCode();
                if (this.ScheduleViolations != null)
                {
                    hashCode = (hashCode * 59) + this.ScheduleViolations.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            // Distance (int) minimum
            if (this.Distance < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Distance, must be a value greater than or equal to 0.", new [] { "Distance" });
            }

            // TravelTime (int) minimum
            if (this.TravelTime < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TravelTime, must be a value greater than or equal to 0.", new [] { "TravelTime" });
            }

            // TrafficDelay (int) minimum
            if (this.TrafficDelay < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for TrafficDelay, must be a value greater than or equal to 0.", new [] { "TrafficDelay" });
            }

            // WaitingTime (int) minimum
            if (this.WaitingTime < (int)0)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for WaitingTime, must be a value greater than or equal to 0.", new [] { "WaitingTime" });
            }

            yield break;
        }
    }

}
