/*
 * Routing
 *
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.32
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routing.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routing.Model
{
    /// <summary>
    /// RemainingWaypoint
    /// </summary>
    [DataContract(Name = "RemainingWaypoint")]
    public partial class RemainingWaypoint : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RemainingWaypoint" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected RemainingWaypoint() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="RemainingWaypoint" /> class.
        /// </summary>
        /// <param name="name">The name of this waypoint. (required).</param>
        /// <param name="estimatedTimeOfArrival">The estimated time of arrival at this waypoint formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). Does not include service, break, rest and waiting at this waypoint. (required).</param>
        /// <param name="distance">The distance from the current position to this waypoint [m]. (required).</param>
        /// <param name="travelTime">The travel time from the current position to this waypoint [s]. Does not include service, break, rest and waiting at this waypoint. (required).</param>
        /// <param name="trafficDelay">The delay due to live traffic from the current position to this waypoint [s]. (required).</param>
        /// <param name="waitingTime">The waiting time at this waypoint [s]. (required).</param>
        /// <param name="scheduleViolations">Contains the list of violated schedule restrictions at this waypoint. (required).</param>
        /// <param name="violated">If there is no valid route for the given vehicle between the vehicle position and this waypoint, but the resulting route can be calculated using roads actually prohibited, the route is marked as violated. (required).</param>
        public RemainingWaypoint(string name = default(string), DateTimeOffset? estimatedTimeOfArrival = default(DateTimeOffset?), int? distance = default(int?), int? travelTime = default(int?), int? trafficDelay = default(int?), int? waitingTime = default(int?), List<ScheduleViolationType> scheduleViolations = default(List<ScheduleViolationType>), bool? violated = default(bool?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for RemainingWaypoint and cannot be null");
            }
            this.Name = name;
            // to ensure "estimatedTimeOfArrival" is required (not null)
            if (estimatedTimeOfArrival == null)
            {
                throw new ArgumentNullException("estimatedTimeOfArrival is a required property for RemainingWaypoint and cannot be null");
            }
            this.EstimatedTimeOfArrival = estimatedTimeOfArrival;
            // to ensure "distance" is required (not null)
            if (distance == null)
            {
                throw new ArgumentNullException("distance is a required property for RemainingWaypoint and cannot be null");
            }
            this.Distance = distance;
            // to ensure "travelTime" is required (not null)
            if (travelTime == null)
            {
                throw new ArgumentNullException("travelTime is a required property for RemainingWaypoint and cannot be null");
            }
            this.TravelTime = travelTime;
            // to ensure "trafficDelay" is required (not null)
            if (trafficDelay == null)
            {
                throw new ArgumentNullException("trafficDelay is a required property for RemainingWaypoint and cannot be null");
            }
            this.TrafficDelay = trafficDelay;
            // to ensure "waitingTime" is required (not null)
            if (waitingTime == null)
            {
                throw new ArgumentNullException("waitingTime is a required property for RemainingWaypoint and cannot be null");
            }
            this.WaitingTime = waitingTime;
            // to ensure "scheduleViolations" is required (not null)
            if (scheduleViolations == null)
            {
                throw new ArgumentNullException("scheduleViolations is a required property for RemainingWaypoint and cannot be null");
            }
            this.ScheduleViolations = scheduleViolations;
            // to ensure "violated" is required (not null)
            if (violated == null)
            {
                throw new ArgumentNullException("violated is a required property for RemainingWaypoint and cannot be null");
            }
            this.Violated = violated;
        }

        /// <summary>
        /// The name of this waypoint.
        /// </summary>
        /// <value>The name of this waypoint.</value>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// The estimated time of arrival at this waypoint formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). Does not include service, break, rest and waiting at this waypoint.
        /// </summary>
        /// <value>The estimated time of arrival at this waypoint formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). Does not include service, break, rest and waiting at this waypoint.</value>
        [DataMember(Name = "estimatedTimeOfArrival", IsRequired = true, EmitDefaultValue = true)]
        public DateTimeOffset? EstimatedTimeOfArrival { get; set; }

        /// <summary>
        /// The distance from the current position to this waypoint [m].
        /// </summary>
        /// <value>The distance from the current position to this waypoint [m].</value>
        [DataMember(Name = "distance", IsRequired = true, EmitDefaultValue = true)]
        public int? Distance { get; set; }

        /// <summary>
        /// The travel time from the current position to this waypoint [s]. Does not include service, break, rest and waiting at this waypoint.
        /// </summary>
        /// <value>The travel time from the current position to this waypoint [s]. Does not include service, break, rest and waiting at this waypoint.</value>
        [DataMember(Name = "travelTime", IsRequired = true, EmitDefaultValue = true)]
        public int? TravelTime { get; set; }

        /// <summary>
        /// The delay due to live traffic from the current position to this waypoint [s].
        /// </summary>
        /// <value>The delay due to live traffic from the current position to this waypoint [s].</value>
        [DataMember(Name = "trafficDelay", IsRequired = true, EmitDefaultValue = true)]
        public int? TrafficDelay { get; set; }

        /// <summary>
        /// The waiting time at this waypoint [s].
        /// </summary>
        /// <value>The waiting time at this waypoint [s].</value>
        [DataMember(Name = "waitingTime", IsRequired = true, EmitDefaultValue = true)]
        public int? WaitingTime { get; set; }

        /// <summary>
        /// Contains the list of violated schedule restrictions at this waypoint.
        /// </summary>
        /// <value>Contains the list of violated schedule restrictions at this waypoint.</value>
        [DataMember(Name = "scheduleViolations", IsRequired = true, EmitDefaultValue = true)]
        public List<ScheduleViolationType> ScheduleViolations { get; set; }

        /// <summary>
        /// If there is no valid route for the given vehicle between the vehicle position and this waypoint, but the resulting route can be calculated using roads actually prohibited, the route is marked as violated.
        /// </summary>
        /// <value>If there is no valid route for the given vehicle between the vehicle position and this waypoint, but the resulting route can be calculated using roads actually prohibited, the route is marked as violated.</value>
        /// <example>false</example>
        [DataMember(Name = "violated", IsRequired = true, EmitDefaultValue = true)]
        public bool? Violated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RemainingWaypoint {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  EstimatedTimeOfArrival: ").Append(EstimatedTimeOfArrival).Append("\n");
            sb.Append("  Distance: ").Append(Distance).Append("\n");
            sb.Append("  TravelTime: ").Append(TravelTime).Append("\n");
            sb.Append("  TrafficDelay: ").Append(TrafficDelay).Append("\n");
            sb.Append("  WaitingTime: ").Append(WaitingTime).Append("\n");
            sb.Append("  ScheduleViolations: ").Append(ScheduleViolations).Append("\n");
            sb.Append("  Violated: ").Append(Violated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Distance (int?) minimum
            if (this.Distance < (int?)0)
            {
                yield return new ValidationResult("Invalid value for Distance, must be a value greater than or equal to 0.", new [] { "Distance" });
            }

            // TravelTime (int?) minimum
            if (this.TravelTime < (int?)0)
            {
                yield return new ValidationResult("Invalid value for TravelTime, must be a value greater than or equal to 0.", new [] { "TravelTime" });
            }

            // TrafficDelay (int?) minimum
            if (this.TrafficDelay < (int?)0)
            {
                yield return new ValidationResult("Invalid value for TrafficDelay, must be a value greater than or equal to 0.", new [] { "TrafficDelay" });
            }

            // WaitingTime (int?) minimum
            if (this.WaitingTime < (int?)0)
            {
                yield return new ValidationResult("Invalid value for WaitingTime, must be a value greater than or equal to 0.", new [] { "WaitingTime" });
            }

            yield break;
        }
    }

}
