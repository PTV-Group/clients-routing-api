/*
 * Routing
 *
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver's working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.22
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routing.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routing.Model
{
    /// <summary>
    /// Warning
    /// </summary>
    [DataContract(Name = "Warning")]
    public partial class Warning : IEquatable<Warning>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Warning" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected Warning() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="Warning" /> class.
        /// </summary>
        /// <param name="description">A human readable message that describes the warning. (required).</param>
        /// <param name="warningCode">A constant string that can be used to identify this warning class programmatically. A warningCode can have **details** to provide information in additional properties which are described with the code they apply to. They are of type string unless otherwise specified. Note that additional warningCodes as well as the **details** of existing warningCodes may be added at any time. Furthermore, the **description** may change at any time.    * &#x60;GENERAL_PARAMETER_IGNORED&#x60; - A parameter was ignored.   * &#x60;parameter&#x60; - The ignored parameter.   * &#x60;value&#x60; - The value of the ignored parameter.   * &#x60;relatedParameter&#x60; - The parameter which caused the parameter in question to be ignored.   * &#x60;relatedValue&#x60; - The value which caused the parameter in question to be ignored. Not present if the conflict is independent of the value. * &#x60;ROUTING_PARAMETER_INCONSISTENCY&#x60; - A parameter was inconsistent with other vehicle parameters. Some results like emissions or toll may not be correct.   * &#x60;parameter&#x60; - The inconsistent parameter.   * &#x60;value&#x60; - The value of the inconsistent parameter.   * &#x60;relatedParameter&#x60; - The parameter which caused the parameter in question to be inconsistent.   * &#x60;relatedValue&#x60; - The value which caused the parameter in question to be inconsistent. * &#x60;ROUTING_MISSING_VEHICLE_PARAMETER&#x60; - The requested vehicle contains a parameter which requires another parameter to be specified. Some results like emissions or toll may not be correct.   * &#x60;missingParameter&#x60; - The missing parameter.   * &#x60;relatedParameter&#x60; - The parameter which requires the missing parameter to be specified.   * &#x60;relatedValue&#x60; - The value which requires the missing parameter to be specified. * &#x60;ROUTING_DRIVERS_WORKING_HOURS_WITH_BOAT_OR_RAIL&#x60; - The route contains a boat (ferry) or rail (train or rail shuttle) connection which can lead to incorrect results when **workingHoursPreset** is specified. Breaks may not be scheduled in an optimal way. * &#x60;ROUTING_MANEUVERS_IN_DIFFERENT_LANGUAGE&#x60; - The requested language is not available for maneuvers, a different language is used instead.   * &#x60;requestedLanguage&#x60; - The language requested by the user.   * &#x60;usedLanguage&#x60; - The language of maneuvers in the response. * &#x60;ROUTING_UNSUPPORTED_EMISSION_PARAMETER&#x60; - The requested emission standard does not support the specified vehicle.   * &#x60;relatedParameter&#x60; - The parameter causing the emission calculation failure.   * &#x60;relatedValue&#x60; - The value of the related parameter. * &#x60;ROUTING_REGION_NOT_SUPPORTED_BY_EMISSION_STANDARD&#x60; - The requested emission standard does not support the region the profile was designed for.   * &#x60;region&#x60; - The requested region not supported by the requested emission standard.   * &#x60;supportedRegions&#x60; - The regions which are supported by the requested emission standard.   * &#x60;emissionStandard&#x60; - The requested emission standard. * &#x60;ROUTING_COUNTRY_IGNORED&#x60; - The country code given in **options[allowedCountries]** or **options[prohibitedCountries]** was ignored as it is not covered by the map.   * &#x60;ignoredCountryCode&#x60; - The ignored country code. * &#x60;ROUTING_SUBDIVISION_FALLBACK&#x60; - The country code given in **options[allowedCountries]** contains a country subdivision code that is not supported by the map, and that instead the enclosing country code was used. In such cases, routes are constrained to the country, rather than only the subdivision.   * &#x60;requestedSubdivisionCode&#x60; - The country subdivision code that was requested, but cannot be used.   * &#x60;fallbackCountryCode&#x60; - The enclosing country that is used as a fallback instead. * &#x60;ROUTING_LIVE_TRAFFIC_DATA_UNAVAILABLE&#x60; - Live traffic data are temporarily unavailable. * &#x60;ROUTING_ETC_SUBSCRIPTION_REQUIRED&#x60; - The route passes through toll areas but the configured vehicle does not contain the required electronic toll collection subscriptions.   * &#x60;requiredEtcSubscriptions&#x60; - The required electronic toll collection subscriptions. * &#x60;ROUTING_WAYPOINT_MATCH_DISTANCE&#x60; - The distance from the waypoint to the nearest accessible road is greater than 1000 meters. Closed areas, countries or roads can be the reason for this.   * &#x60;distance&#x60;- The air-line distance between waypoint and match point on the road.   * &#x60;parameter&#x60; - The waypoint parameter. * &#x60;ROUTING_COMBINED_TRANSPORT_WAYPOINT_IGNORED&#x60; - The combined-transport waypoint was ignored as no connection could be found.   * &#x60;parameter&#x60; - The waypoint parameter.   * &#x60;availableConnections&#x60; - The list of connections available for the start coordinates (array of strings). This will only be returned if connections for the start coordinates are found, but none match the destination coordinates. * &#x60;ROUTING_COMBINED_TRANSPORT_WAYPOINT_AMBIGUOUS&#x60; - The combined-transport waypoint was ambiguous.   * &#x60;parameter&#x60; - The waypoint parameter.   * &#x60;usedConnection&#x60; - The connection used for this route.   * &#x60;availableConnections&#x60; - The list of connections available for the combined-transport waypoint (array of strings). * &#x60;ROUTING_WAYPOINTS_DONT_MATCH_PROFILE_REGION&#x60; - The waypoints or the routeId do not match the region of the profile specified in the request.   * &#x60;waypointsRegion&#x60; - The region of the waypoints or routeId.   * &#x60;profileRegion&#x60; - The region of the profile. * &#x60;ROUTING_INACTIVE_ROADATTRIBUTE_SCENARIOS&#x60; - The scenarios given in options[customRoadAttributeScenarios] contain at least one which is not active.   * &#x60;scenarios&#x60; - The inactive scenarioIds (comma-separated list). * &#x60;ROUTING_ROADATTRIBUTES_MAYBE_IGNORED&#x60; - At least one of the scenarios given in options[customRoadAttributeScenarios] could not be fully considered in the route calculation after a map update, i.e. some road attributes may have been ignored.  (required).</param>
        /// <param name="details">Additional properties specific to this class of warnings..</param>
        public Warning(string description = default(string), string warningCode = default(string), Dictionary<string, Object> details = default(Dictionary<string, Object>))
        {
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for Warning and cannot be null");
            }
            this.Description = description;
            // to ensure "warningCode" is required (not null)
            if (warningCode == null)
            {
                throw new ArgumentNullException("warningCode is a required property for Warning and cannot be null");
            }
            this.WarningCode = warningCode;
            this.Details = details;
        }

        /// <summary>
        /// A human readable message that describes the warning.
        /// </summary>
        /// <value>A human readable message that describes the warning.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// A constant string that can be used to identify this warning class programmatically. A warningCode can have **details** to provide information in additional properties which are described with the code they apply to. They are of type string unless otherwise specified. Note that additional warningCodes as well as the **details** of existing warningCodes may be added at any time. Furthermore, the **description** may change at any time.    * &#x60;GENERAL_PARAMETER_IGNORED&#x60; - A parameter was ignored.   * &#x60;parameter&#x60; - The ignored parameter.   * &#x60;value&#x60; - The value of the ignored parameter.   * &#x60;relatedParameter&#x60; - The parameter which caused the parameter in question to be ignored.   * &#x60;relatedValue&#x60; - The value which caused the parameter in question to be ignored. Not present if the conflict is independent of the value. * &#x60;ROUTING_PARAMETER_INCONSISTENCY&#x60; - A parameter was inconsistent with other vehicle parameters. Some results like emissions or toll may not be correct.   * &#x60;parameter&#x60; - The inconsistent parameter.   * &#x60;value&#x60; - The value of the inconsistent parameter.   * &#x60;relatedParameter&#x60; - The parameter which caused the parameter in question to be inconsistent.   * &#x60;relatedValue&#x60; - The value which caused the parameter in question to be inconsistent. * &#x60;ROUTING_MISSING_VEHICLE_PARAMETER&#x60; - The requested vehicle contains a parameter which requires another parameter to be specified. Some results like emissions or toll may not be correct.   * &#x60;missingParameter&#x60; - The missing parameter.   * &#x60;relatedParameter&#x60; - The parameter which requires the missing parameter to be specified.   * &#x60;relatedValue&#x60; - The value which requires the missing parameter to be specified. * &#x60;ROUTING_DRIVERS_WORKING_HOURS_WITH_BOAT_OR_RAIL&#x60; - The route contains a boat (ferry) or rail (train or rail shuttle) connection which can lead to incorrect results when **workingHoursPreset** is specified. Breaks may not be scheduled in an optimal way. * &#x60;ROUTING_MANEUVERS_IN_DIFFERENT_LANGUAGE&#x60; - The requested language is not available for maneuvers, a different language is used instead.   * &#x60;requestedLanguage&#x60; - The language requested by the user.   * &#x60;usedLanguage&#x60; - The language of maneuvers in the response. * &#x60;ROUTING_UNSUPPORTED_EMISSION_PARAMETER&#x60; - The requested emission standard does not support the specified vehicle.   * &#x60;relatedParameter&#x60; - The parameter causing the emission calculation failure.   * &#x60;relatedValue&#x60; - The value of the related parameter. * &#x60;ROUTING_REGION_NOT_SUPPORTED_BY_EMISSION_STANDARD&#x60; - The requested emission standard does not support the region the profile was designed for.   * &#x60;region&#x60; - The requested region not supported by the requested emission standard.   * &#x60;supportedRegions&#x60; - The regions which are supported by the requested emission standard.   * &#x60;emissionStandard&#x60; - The requested emission standard. * &#x60;ROUTING_COUNTRY_IGNORED&#x60; - The country code given in **options[allowedCountries]** or **options[prohibitedCountries]** was ignored as it is not covered by the map.   * &#x60;ignoredCountryCode&#x60; - The ignored country code. * &#x60;ROUTING_SUBDIVISION_FALLBACK&#x60; - The country code given in **options[allowedCountries]** contains a country subdivision code that is not supported by the map, and that instead the enclosing country code was used. In such cases, routes are constrained to the country, rather than only the subdivision.   * &#x60;requestedSubdivisionCode&#x60; - The country subdivision code that was requested, but cannot be used.   * &#x60;fallbackCountryCode&#x60; - The enclosing country that is used as a fallback instead. * &#x60;ROUTING_LIVE_TRAFFIC_DATA_UNAVAILABLE&#x60; - Live traffic data are temporarily unavailable. * &#x60;ROUTING_ETC_SUBSCRIPTION_REQUIRED&#x60; - The route passes through toll areas but the configured vehicle does not contain the required electronic toll collection subscriptions.   * &#x60;requiredEtcSubscriptions&#x60; - The required electronic toll collection subscriptions. * &#x60;ROUTING_WAYPOINT_MATCH_DISTANCE&#x60; - The distance from the waypoint to the nearest accessible road is greater than 1000 meters. Closed areas, countries or roads can be the reason for this.   * &#x60;distance&#x60;- The air-line distance between waypoint and match point on the road.   * &#x60;parameter&#x60; - The waypoint parameter. * &#x60;ROUTING_COMBINED_TRANSPORT_WAYPOINT_IGNORED&#x60; - The combined-transport waypoint was ignored as no connection could be found.   * &#x60;parameter&#x60; - The waypoint parameter.   * &#x60;availableConnections&#x60; - The list of connections available for the start coordinates (array of strings). This will only be returned if connections for the start coordinates are found, but none match the destination coordinates. * &#x60;ROUTING_COMBINED_TRANSPORT_WAYPOINT_AMBIGUOUS&#x60; - The combined-transport waypoint was ambiguous.   * &#x60;parameter&#x60; - The waypoint parameter.   * &#x60;usedConnection&#x60; - The connection used for this route.   * &#x60;availableConnections&#x60; - The list of connections available for the combined-transport waypoint (array of strings). * &#x60;ROUTING_WAYPOINTS_DONT_MATCH_PROFILE_REGION&#x60; - The waypoints or the routeId do not match the region of the profile specified in the request.   * &#x60;waypointsRegion&#x60; - The region of the waypoints or routeId.   * &#x60;profileRegion&#x60; - The region of the profile. * &#x60;ROUTING_INACTIVE_ROADATTRIBUTE_SCENARIOS&#x60; - The scenarios given in options[customRoadAttributeScenarios] contain at least one which is not active.   * &#x60;scenarios&#x60; - The inactive scenarioIds (comma-separated list). * &#x60;ROUTING_ROADATTRIBUTES_MAYBE_IGNORED&#x60; - At least one of the scenarios given in options[customRoadAttributeScenarios] could not be fully considered in the route calculation after a map update, i.e. some road attributes may have been ignored. 
        /// </summary>
        /// <value>A constant string that can be used to identify this warning class programmatically. A warningCode can have **details** to provide information in additional properties which are described with the code they apply to. They are of type string unless otherwise specified. Note that additional warningCodes as well as the **details** of existing warningCodes may be added at any time. Furthermore, the **description** may change at any time.    * &#x60;GENERAL_PARAMETER_IGNORED&#x60; - A parameter was ignored.   * &#x60;parameter&#x60; - The ignored parameter.   * &#x60;value&#x60; - The value of the ignored parameter.   * &#x60;relatedParameter&#x60; - The parameter which caused the parameter in question to be ignored.   * &#x60;relatedValue&#x60; - The value which caused the parameter in question to be ignored. Not present if the conflict is independent of the value. * &#x60;ROUTING_PARAMETER_INCONSISTENCY&#x60; - A parameter was inconsistent with other vehicle parameters. Some results like emissions or toll may not be correct.   * &#x60;parameter&#x60; - The inconsistent parameter.   * &#x60;value&#x60; - The value of the inconsistent parameter.   * &#x60;relatedParameter&#x60; - The parameter which caused the parameter in question to be inconsistent.   * &#x60;relatedValue&#x60; - The value which caused the parameter in question to be inconsistent. * &#x60;ROUTING_MISSING_VEHICLE_PARAMETER&#x60; - The requested vehicle contains a parameter which requires another parameter to be specified. Some results like emissions or toll may not be correct.   * &#x60;missingParameter&#x60; - The missing parameter.   * &#x60;relatedParameter&#x60; - The parameter which requires the missing parameter to be specified.   * &#x60;relatedValue&#x60; - The value which requires the missing parameter to be specified. * &#x60;ROUTING_DRIVERS_WORKING_HOURS_WITH_BOAT_OR_RAIL&#x60; - The route contains a boat (ferry) or rail (train or rail shuttle) connection which can lead to incorrect results when **workingHoursPreset** is specified. Breaks may not be scheduled in an optimal way. * &#x60;ROUTING_MANEUVERS_IN_DIFFERENT_LANGUAGE&#x60; - The requested language is not available for maneuvers, a different language is used instead.   * &#x60;requestedLanguage&#x60; - The language requested by the user.   * &#x60;usedLanguage&#x60; - The language of maneuvers in the response. * &#x60;ROUTING_UNSUPPORTED_EMISSION_PARAMETER&#x60; - The requested emission standard does not support the specified vehicle.   * &#x60;relatedParameter&#x60; - The parameter causing the emission calculation failure.   * &#x60;relatedValue&#x60; - The value of the related parameter. * &#x60;ROUTING_REGION_NOT_SUPPORTED_BY_EMISSION_STANDARD&#x60; - The requested emission standard does not support the region the profile was designed for.   * &#x60;region&#x60; - The requested region not supported by the requested emission standard.   * &#x60;supportedRegions&#x60; - The regions which are supported by the requested emission standard.   * &#x60;emissionStandard&#x60; - The requested emission standard. * &#x60;ROUTING_COUNTRY_IGNORED&#x60; - The country code given in **options[allowedCountries]** or **options[prohibitedCountries]** was ignored as it is not covered by the map.   * &#x60;ignoredCountryCode&#x60; - The ignored country code. * &#x60;ROUTING_SUBDIVISION_FALLBACK&#x60; - The country code given in **options[allowedCountries]** contains a country subdivision code that is not supported by the map, and that instead the enclosing country code was used. In such cases, routes are constrained to the country, rather than only the subdivision.   * &#x60;requestedSubdivisionCode&#x60; - The country subdivision code that was requested, but cannot be used.   * &#x60;fallbackCountryCode&#x60; - The enclosing country that is used as a fallback instead. * &#x60;ROUTING_LIVE_TRAFFIC_DATA_UNAVAILABLE&#x60; - Live traffic data are temporarily unavailable. * &#x60;ROUTING_ETC_SUBSCRIPTION_REQUIRED&#x60; - The route passes through toll areas but the configured vehicle does not contain the required electronic toll collection subscriptions.   * &#x60;requiredEtcSubscriptions&#x60; - The required electronic toll collection subscriptions. * &#x60;ROUTING_WAYPOINT_MATCH_DISTANCE&#x60; - The distance from the waypoint to the nearest accessible road is greater than 1000 meters. Closed areas, countries or roads can be the reason for this.   * &#x60;distance&#x60;- The air-line distance between waypoint and match point on the road.   * &#x60;parameter&#x60; - The waypoint parameter. * &#x60;ROUTING_COMBINED_TRANSPORT_WAYPOINT_IGNORED&#x60; - The combined-transport waypoint was ignored as no connection could be found.   * &#x60;parameter&#x60; - The waypoint parameter.   * &#x60;availableConnections&#x60; - The list of connections available for the start coordinates (array of strings). This will only be returned if connections for the start coordinates are found, but none match the destination coordinates. * &#x60;ROUTING_COMBINED_TRANSPORT_WAYPOINT_AMBIGUOUS&#x60; - The combined-transport waypoint was ambiguous.   * &#x60;parameter&#x60; - The waypoint parameter.   * &#x60;usedConnection&#x60; - The connection used for this route.   * &#x60;availableConnections&#x60; - The list of connections available for the combined-transport waypoint (array of strings). * &#x60;ROUTING_WAYPOINTS_DONT_MATCH_PROFILE_REGION&#x60; - The waypoints or the routeId do not match the region of the profile specified in the request.   * &#x60;waypointsRegion&#x60; - The region of the waypoints or routeId.   * &#x60;profileRegion&#x60; - The region of the profile. * &#x60;ROUTING_INACTIVE_ROADATTRIBUTE_SCENARIOS&#x60; - The scenarios given in options[customRoadAttributeScenarios] contain at least one which is not active.   * &#x60;scenarios&#x60; - The inactive scenarioIds (comma-separated list). * &#x60;ROUTING_ROADATTRIBUTES_MAYBE_IGNORED&#x60; - At least one of the scenarios given in options[customRoadAttributeScenarios] could not be fully considered in the route calculation after a map update, i.e. some road attributes may have been ignored. </value>
        [DataMember(Name = "warningCode", IsRequired = true, EmitDefaultValue = true)]
        public string WarningCode { get; set; }

        /// <summary>
        /// Additional properties specific to this class of warnings.
        /// </summary>
        /// <value>Additional properties specific to this class of warnings.</value>
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public Dictionary<string, Object> Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Warning {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  WarningCode: ").Append(WarningCode).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Warning);
        }

        /// <summary>
        /// Returns true if Warning instances are equal
        /// </summary>
        /// <param name="input">Instance of Warning to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Warning input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                ) && 
                (
                    this.WarningCode == input.WarningCode ||
                    (this.WarningCode != null &&
                    this.WarningCode.Equals(input.WarningCode))
                ) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    input.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Description != null)
                {
                    hashCode = (hashCode * 59) + this.Description.GetHashCode();
                }
                if (this.WarningCode != null)
                {
                    hashCode = (hashCode * 59) + this.WarningCode.GetHashCode();
                }
                if (this.Details != null)
                {
                    hashCode = (hashCode * 59) + this.Details.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        public IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
