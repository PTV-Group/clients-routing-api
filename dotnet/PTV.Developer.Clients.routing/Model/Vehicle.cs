/*
 * Routing
 *
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver's working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.29
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routing.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routing.Model
{
    /// <summary>
    /// Vehicle
    /// </summary>
    [DataContract(Name = "Vehicle")]
    public partial class Vehicle : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets EngineType
        /// </summary>
        [DataMember(Name = "engineType", EmitDefaultValue = true)]
        public EngineType? EngineType { get; set; }

        /// <summary>
        /// Gets or Sets FuelType
        /// </summary>
        [DataMember(Name = "fuelType", EmitDefaultValue = true)]
        public FuelType? FuelType { get; set; }

        /// <summary>
        /// Gets or Sets ElectricityType
        /// </summary>
        [DataMember(Name = "electricityType", EmitDefaultValue = true)]
        public ElectricityType? ElectricityType { get; set; }

        /// <summary>
        /// Gets or Sets EmissionStandard
        /// </summary>
        [DataMember(Name = "emissionStandard", EmitDefaultValue = true)]
        public EmissionStandard? EmissionStandard { get; set; }

        /// <summary>
        /// Gets or Sets ParticleReductionClass
        /// </summary>
        [DataMember(Name = "particleReductionClass", EmitDefaultValue = true)]
        public ParticleReductionClass? ParticleReductionClass { get; set; }

        /// <summary>
        /// Gets or Sets TunnelRestrictionCode
        /// </summary>
        [DataMember(Name = "tunnelRestrictionCode", EmitDefaultValue = true)]
        public TunnelRestrictionCode? TunnelRestrictionCode { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Vehicle" /> class.
        /// </summary>
        /// <param name="engineType">engineType.</param>
        /// <param name="fuelType">fuelType.</param>
        /// <param name="electricityType">electricityType.</param>
        /// <param name="averageFuelConsumption">The average fuel consumption of the vehicle. Depending on the **fuelType** [l/100km] for liquid fuel types or [kg/100km] for gaseous fuel types.  Supported for **engineType** _COMBUSTION_  or _HYBRID_. Relevant for &#x60;emissions&#x60;. .</param>
        /// <param name="averageElectricityConsumption">The average electricity consumption of the vehicle [kWh/100km].  Supported for **engineType** _ELECTRIC_ or _HYBRID_. Relevant for &#x60;emissions&#x60;. .</param>
        /// <param name="bioFuelRatio">The ratio of biofuel to conventional fuel [%], i.e. 10 for E10 with 10% biofuel.  Supported for **engineType** _COMBUSTION_ or _HYBRID_ and only for the fuel types _GASOLINE_, _DIESEL_, _CNG_GASOLINE_ and _LNG_GASOLINE_. Relevant for &#x60;emissions&#x60;. .</param>
        /// <param name="hybridRatio">Electric energy usage ratio from the total amount of energy consumed by the vehicle.  Supported for **engineType** _HYBRID_. Relevant for &#x60;emissions&#x60;. .</param>
        /// <param name="dualFuelRatio">Ratio of CNG or LPG usage from the total amount of fuel consumption.  Supported for **engineType** _COMBUSTION_ with **fuelType**  _CNG_GASOLINE_ or _LPG_GASOLINE_. Relevant for &#x60;emissions&#x60;. .</param>
        /// <param name="cylinderCapacity">The cylinder capacity of the vehicle [cm&amp;#x00B3;]. This value is present for compatibility reasons and does not influence any of the results.  Supported for **engineType** _COMBUSTION_ or _HYBRID_. .</param>
        /// <param name="emissionStandard">emissionStandard.</param>
        /// <param name="co2EmissionClass">The CO&amp;#8322; emission class valid in the European Union. See also the  [Directive 1999/62/EC](https://eur-lex.europa.eu/eli/dir/1999/62/2022-03-24) of the European Parliament and  of the Council on the charging of heavy goods vehicles for the use of certain infrastructures, Article 7ga.  Must be 1 for combustion and hybrid vehicles with any **emissionStandard**, 2-4 for combustion and hybrid vehicles with **emissionStandard** of at least _EURO_6_, and 5 for electric vehicles.   Relevant for &#x60;toll&#x60;. .</param>
        /// <param name="lowEmissionZoneTypes">Comma-separated list of the low-emission zone types of the vehicle. This parameter is deprecated and superseded by **lowEmissionZoneApprovals**. When still being used, only low-emission zones in Germany are affected, zones in other countries which need an environmental badge or vehicle registration can be entered without restriction. It is not possible to specify both parameters.  Available values are provided by type &#x60;LowEmissionZoneTypes&#x60;:  \&quot;DE_GREEN\&quot;, \&quot;DE_YELLOW\&quot;, \&quot;DE_RED\&quot;, \&quot;DE_NONE\&quot;  Relevant for &#x60;routing&#x60;. .</param>
        /// <param name="lowEmissionZoneApprovals">Comma-separated list of approvals to enter low-emission zones. Usually, such approvals are environmental badges to be placed on the windscreen, but that can also be any other kind of approval or vehicle registration allowing it to enter a low-emission zone.  Low-emission zones which do not need any kind of approval but depend only on the **emissionStandard** are not affected by this parameter. Instead they can be entered if the **emissionStandard**  is sufficient. Electric vehicles can always enter these zones.  The default of the selected predefined profile allows entering all low-emission zones the vehicle can get an approval for. So, if you do not want to care about that and your  vehicle operates in a region where it has all necessary approvals, leave this parameter empty.  In order to consider low-emission zones depending on the actually available approvals, i.e. on  the environmental badges on the windscreen and other vehicle registrations, specify all of them here. The vehicle can then enter only those zones for which a proper approval is present. Low-emission zones in countries for which no value is specified cannot be entered.  Available values are:  \&quot;NONE\&quot;, \&quot;AT_EURO_1\&quot;, \&quot;AT_EURO_2\&quot;, \&quot;AT_EURO_3\&quot;, \&quot;AT_EURO_4\&quot;, \&quot;AT_EURO_5\&quot;, \&quot;AT_EURO_6\&quot;, \&quot;DE_GREEN\&quot;, \&quot;DE_YELLOW\&quot;, \&quot;DE_RED\&quot;, \&quot;DK_AUTHORIZED\&quot;, \&quot;ES_CAT_B\&quot;, \&quot;ES_CAT_C\&quot;, \&quot;ES_CAT_ECO\&quot;, \&quot;ES_CAT_ZERO\&quot;, \&quot;FR_CRITAIR_0\&quot;, \&quot;FR_CRITAIR_1\&quot;, \&quot;FR_CRITAIR_2\&quot;, \&quot;FR_CRITAIR_3\&quot;, \&quot;FR_CRITAIR_4\&quot;, \&quot;FR_CRITAIR_5\&quot;  This list can be extended at any time, clients should handle unknown values properly. Only one value per country can be specified. Relevant for &#x60;routing&#x60;. See [here](./concepts/low-emission-zones) for more information. .</param>
        /// <param name="particleReductionClass">particleReductionClass.</param>
        /// <param name="emptyWeight">The empty weight of the vehicle [kg].  Relevant for &#x60;routing&#x60;, &#x60;emissions&#x60;, &#x60;range calculation&#x60;. .</param>
        /// <param name="loadWeight">The weight of the vehicle&#39;s load [kg].  Relevant for &#x60;routing&#x60;, &#x60;emissions&#x60;, &#x60;range calculation&#x60;. .</param>
        /// <param name="totalPermittedWeight">The total permitted weight of the vehicle and its load [kg]. This is the weight the vehicle is usually registered with. If this value is not specified but **totalTechnicallyPermittedWeight** is specified then that value is used  for both **totalPermittedWeight** and **totalTechnicallyPermittedWeight**.  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;, &#x60;emissions&#x60;. .</param>
        /// <param name="totalTechnicallyPermittedWeight">The total technically permitted weight of the vehicle and its load [kg].  Sometimes vehicles are registered with a smaller **totalPermittedWeight** than technically possible. For  such cases the possibly larger total technically permitted weight is specified here, it is relevant for  toll calculation in some European countries. If this value is not specified but **totalPermittedWeight** is specified then that value is used  for both **totalPermittedWeight** and **totalTechnicallyPermittedWeight**.  Relevant for &#x60;toll&#x60;. .</param>
        /// <param name="axleWeight">The maximum distributed weight that may be supported by an axle of the vehicle [kg].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. .</param>
        /// <param name="numberOfAxles">The total number of axles of the vehicle including the trailers.  Relevant for &#x60;toll&#x60;. .</param>
        /// <param name="numberOfTires">The total number of tires of the vehicle including the trailers.  Relevant for &#x60;toll&#x60;. .</param>
        /// <param name="height">The height of the vehicle [cm].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. .</param>
        /// <param name="heightAboveFrontAxle">The height above the front axle [cm].  Relevant for &#x60;toll&#x60;. .</param>
        /// <param name="length">The length of the vehicle [cm].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. .</param>
        /// <param name="width">The width of the vehicle [cm].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. .</param>
        /// <param name="hazardousMaterials">Comma-separated list of hazardous materials the vehicle has loaded. If _NONE_ is specified along with other hazardous materials it is ignored. Depending on the load the route will avoid roads prohibited for and/or prefer roads prescribed for specific hazardous materials.  Available values are provided by type &#x60;HazardousMaterials&#x60;: \&quot;HAZARDOUS_TO_WATER\&quot; \&quot;EXPLOSIVE\&quot; \&quot;FLAMMABLE\&quot; \&quot;RADIOACTIVE\&quot; \&quot;INHALATION_HAZARD\&quot; \&quot;MEDICAL_WASTE\&quot; \&quot;OTHER\&quot; \&quot;NONE\&quot;  Relevant for &#x60;routing&#x60;. .</param>
        /// <param name="tunnelRestrictionCode">tunnelRestrictionCode.</param>
        /// <param name="truckRoutes">Comma-separated list of truck routes the vehicle has to follow. This parameter will be ignored for non-truck profiles such as EUR_CAR, EUR_VAN, USA_1_PICKUP or AUS_LCV_LIGHT_COMMERCIAL.  * &#x60;DE_LKWUEBERLSTVAUSNV&#x60;  Preferred routes for long trucks in Germany, also known as Lang-LKW.  * &#x60;NL_LZV&#x60;  Preferred routes for long trucks in the Netherlands, also known as LZV (Langere en Zwaardere Vrachtautocombinatie).  * &#x60;NZ_HPMV&#x60;  The network for High Productivity Motor Vehicles (HPMV) carrying the maximum loads available under a permit (New Zeland Transport Agency).  * &#x60;SE_BK_1&#x60;  Public roads and bridges that support up to 64 t total permitted weight (Swedish Transport Administration).  * &#x60;SE_BK_2&#x60;  Public roads and bridges that support up to 51.4 t total permitted weight.  Actual limit depends on wheelbase and axle weight (Swedish Transport Administration).  * &#x60;SE_BK_3&#x60;  Public roads and bridges that support up to 37.5 t total permitted weight.  Actual limit depends on wheelbase and axle weight (Swedish Transport Administration).  * &#x60;SE_BK_4&#x60;  Public roads and bridges that support up to 74 t total permitted weight (draft summer 2018, Swedish Transport Administration).  * &#x60;US_STAA&#x60;  Routes that belong to the highway network as defined by the Surface Transportation Assistance Act in the US.  * &#x60;US_TD&#x60;  Part of a state-designated highway network for trucks in the US.  * &#x60;AU_B_DOUBLE&#x60;  B-Double routes as defined in Australia.  * &#x60;AU_B_DOUBLE_HML&#x60;  Routes for B-Double vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).  * &#x60;AU_B_TRIPLE&#x60;  B-Triple routes as defined in Australia.  * &#x60;AU_B_TRIPLE_HML&#x60;  Routes for B-Triple vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).  * &#x60;AU_AB_TRIPLE&#x60;  Routes for AB-Triple vehicle combinations operating (Australian Transport Administration).  * &#x60;AU_AB_TRIPLE_HML&#x60;  Routes for AB-Triple vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).  * &#x60;NONE&#x60;  Overrides the profile settings to specify not to follow any truck routes.   If _NONE_ is specified along with other truck routes it is ignored.  Available values are provided by type &#x60;TruckRoutes&#x60;.  Relevant for &#x60;routing&#x60;. Cannot be used with **options[routingMode]&#x3D;MONETARY**. .</param>
        /// <param name="commercial">Specifies if the vehicle usage is commercial.  Relevant for &#x60;toll&#x60;. .</param>
        /// <param name="etcSubscriptions">A comma separated list of ETC Subscriptions. See [here](./concepts/electronic-toll-collection) for more information on available subscriptions.  Available values are provided by type &#x60;EtcSubscriptionTypes&#x60;: \&quot;AT_GOBOX\&quot; \&quot;BE_TELETOL\&quot; \&quot;BE_VIAPASS\&quot; \&quot;CH_LSVA\&quot; \&quot;DE_QUICKBOX\&quot; \&quot;DE_TOLLCOLLECT\&quot; \&quot;DE_WARNOWTUNNEL_RFID\&quot; \&quot;DK_BROPAS_BUSINESS\&quot; \&quot;IT_TELEPASS\&quot; \&quot;NL_TELECARD\&quot; \&quot;NL_TTAG\&quot; \&quot;NO_AUTOPASS\&quot; \&quot;PT_VIA_VERDE\&quot; \&quot;US_APASS\&quot; \&quot;US_BREEZEBY\&quot; \&quot;US_DOWNBEACH_EXPRESSPASS\&quot; \&quot;US_EPASS\&quot; \&quot;US_EXPRESSACCOUNT\&quot; \&quot;US_EXPRESSCARD\&quot; \&quot;US_EXPRESSPASS\&quot; \&quot;US_EXPRESSTOLL\&quot; \&quot;US_EZPASS\&quot; \&quot;US_EZTAG\&quot; \&quot;US_FASTRAK\&quot; \&quot;US_GEAUXPASS\&quot; \&quot;US_GOODTOGO\&quot; \&quot;US_GOPASS\&quot; \&quot;US_IPASS\&quot; \&quot;US_KTAG\&quot; \&quot;US_LEEWAY\&quot; \&quot;US_MACKINACBRIDGE_MACPASS\&quot; \&quot;US_MARYLAND_EZPASS\&quot; \&quot;US_MASSACHUSETTS_EZPASS\&quot; \&quot;US_NC_QUICKPASS\&quot; \&quot;US_NEWHAMPSHIRE_EZPASS\&quot; \&quot;US_NEWJERSEY_EZPASS\&quot; \&quot;US_NEWYORK_EZPASS\&quot; \&quot;US_NEXPRESS\&quot; \&quot;US_OHIO_EZPASS\&quot; \&quot;US_PALPASS\&quot; \&quot;US_PIKEPASS\&quot; \&quot;US_RIVERLINK\&quot; \&quot;US_RIVERLINK_NOTRANSPONDER\&quot; \&quot;US_SEAWAYTRANSITCARD\&quot; \&quot;US_SUNPASS\&quot; \&quot;US_TOLLTAG\&quot; \&quot;US_TXTAG\&quot; \&quot;US_VIRGINIA_EZPASS\&quot; \&quot;US_WESTVIRGINIA_EZPASS\&quot; \&quot;US_PEACHPASS\&quot; \&quot;US_NEXUS\&quot; \&quot;US_DELAWARE_EZPASS\&quot; \&quot;US_GROSSEILETOLLBRIDGE_PASSTAG\&quot; \&quot;US_EZPASS_PAYBYPLATE\&quot;  Relevant for &#x60;toll&#x60;. .</param>
        public Vehicle(EngineType? engineType = default(EngineType?), FuelType? fuelType = default(FuelType?), ElectricityType? electricityType = default(ElectricityType?), double? averageFuelConsumption = default(double?), double? averageElectricityConsumption = default(double?), int? bioFuelRatio = default(int?), int? hybridRatio = default(int?), int? dualFuelRatio = default(int?), int? cylinderCapacity = default(int?), EmissionStandard? emissionStandard = default(EmissionStandard?), int? co2EmissionClass = default(int?), string lowEmissionZoneTypes = default(string), string lowEmissionZoneApprovals = default(string), ParticleReductionClass? particleReductionClass = default(ParticleReductionClass?), int? emptyWeight = default(int?), int? loadWeight = default(int?), int? totalPermittedWeight = default(int?), int? totalTechnicallyPermittedWeight = default(int?), int? axleWeight = default(int?), int? numberOfAxles = default(int?), int? numberOfTires = default(int?), int? height = default(int?), int? heightAboveFrontAxle = default(int?), int? length = default(int?), int? width = default(int?), string hazardousMaterials = default(string), TunnelRestrictionCode? tunnelRestrictionCode = default(TunnelRestrictionCode?), string truckRoutes = default(string), bool? commercial = default(bool?), string etcSubscriptions = default(string))
        {
            this.EngineType = engineType;
            this.FuelType = fuelType;
            this.ElectricityType = electricityType;
            this.AverageFuelConsumption = averageFuelConsumption;
            this.AverageElectricityConsumption = averageElectricityConsumption;
            this.BioFuelRatio = bioFuelRatio;
            this.HybridRatio = hybridRatio;
            this.DualFuelRatio = dualFuelRatio;
            this.CylinderCapacity = cylinderCapacity;
            this.EmissionStandard = emissionStandard;
            this.Co2EmissionClass = co2EmissionClass;
            this.LowEmissionZoneTypes = lowEmissionZoneTypes;
            this.LowEmissionZoneApprovals = lowEmissionZoneApprovals;
            this.ParticleReductionClass = particleReductionClass;
            this.EmptyWeight = emptyWeight;
            this.LoadWeight = loadWeight;
            this.TotalPermittedWeight = totalPermittedWeight;
            this.TotalTechnicallyPermittedWeight = totalTechnicallyPermittedWeight;
            this.AxleWeight = axleWeight;
            this.NumberOfAxles = numberOfAxles;
            this.NumberOfTires = numberOfTires;
            this.Height = height;
            this.HeightAboveFrontAxle = heightAboveFrontAxle;
            this.Length = length;
            this.Width = width;
            this.HazardousMaterials = hazardousMaterials;
            this.TunnelRestrictionCode = tunnelRestrictionCode;
            this.TruckRoutes = truckRoutes;
            this.Commercial = commercial;
            this.EtcSubscriptions = etcSubscriptions;
        }

        /// <summary>
        /// The average fuel consumption of the vehicle. Depending on the **fuelType** [l/100km] for liquid fuel types or [kg/100km] for gaseous fuel types.  Supported for **engineType** _COMBUSTION_  or _HYBRID_. Relevant for &#x60;emissions&#x60;. 
        /// </summary>
        /// <value>The average fuel consumption of the vehicle. Depending on the **fuelType** [l/100km] for liquid fuel types or [kg/100km] for gaseous fuel types.  Supported for **engineType** _COMBUSTION_  or _HYBRID_. Relevant for &#x60;emissions&#x60;. </value>
        /// <example>35</example>
        [DataMember(Name = "averageFuelConsumption", EmitDefaultValue = true)]
        public double? AverageFuelConsumption { get; set; }

        /// <summary>
        /// The average electricity consumption of the vehicle [kWh/100km].  Supported for **engineType** _ELECTRIC_ or _HYBRID_. Relevant for &#x60;emissions&#x60;. 
        /// </summary>
        /// <value>The average electricity consumption of the vehicle [kWh/100km].  Supported for **engineType** _ELECTRIC_ or _HYBRID_. Relevant for &#x60;emissions&#x60;. </value>
        /// <example>115</example>
        [DataMember(Name = "averageElectricityConsumption", EmitDefaultValue = true)]
        public double? AverageElectricityConsumption { get; set; }

        /// <summary>
        /// The ratio of biofuel to conventional fuel [%], i.e. 10 for E10 with 10% biofuel.  Supported for **engineType** _COMBUSTION_ or _HYBRID_ and only for the fuel types _GASOLINE_, _DIESEL_, _CNG_GASOLINE_ and _LNG_GASOLINE_. Relevant for &#x60;emissions&#x60;. 
        /// </summary>
        /// <value>The ratio of biofuel to conventional fuel [%], i.e. 10 for E10 with 10% biofuel.  Supported for **engineType** _COMBUSTION_ or _HYBRID_ and only for the fuel types _GASOLINE_, _DIESEL_, _CNG_GASOLINE_ and _LNG_GASOLINE_. Relevant for &#x60;emissions&#x60;. </value>
        /// <example>0</example>
        [DataMember(Name = "bioFuelRatio", EmitDefaultValue = true)]
        public int? BioFuelRatio { get; set; }

        /// <summary>
        /// Electric energy usage ratio from the total amount of energy consumed by the vehicle.  Supported for **engineType** _HYBRID_. Relevant for &#x60;emissions&#x60;. 
        /// </summary>
        /// <value>Electric energy usage ratio from the total amount of energy consumed by the vehicle.  Supported for **engineType** _HYBRID_. Relevant for &#x60;emissions&#x60;. </value>
        /// <example>50</example>
        [DataMember(Name = "hybridRatio", EmitDefaultValue = true)]
        public int? HybridRatio { get; set; }

        /// <summary>
        /// Ratio of CNG or LPG usage from the total amount of fuel consumption.  Supported for **engineType** _COMBUSTION_ with **fuelType**  _CNG_GASOLINE_ or _LPG_GASOLINE_. Relevant for &#x60;emissions&#x60;. 
        /// </summary>
        /// <value>Ratio of CNG or LPG usage from the total amount of fuel consumption.  Supported for **engineType** _COMBUSTION_ with **fuelType**  _CNG_GASOLINE_ or _LPG_GASOLINE_. Relevant for &#x60;emissions&#x60;. </value>
        /// <example>50</example>
        [DataMember(Name = "dualFuelRatio", EmitDefaultValue = true)]
        public int? DualFuelRatio { get; set; }

        /// <summary>
        /// The cylinder capacity of the vehicle [cm&amp;#x00B3;]. This value is present for compatibility reasons and does not influence any of the results.  Supported for **engineType** _COMBUSTION_ or _HYBRID_. 
        /// </summary>
        /// <value>The cylinder capacity of the vehicle [cm&amp;#x00B3;]. This value is present for compatibility reasons and does not influence any of the results.  Supported for **engineType** _COMBUSTION_ or _HYBRID_. </value>
        /// <example>12000</example>
        [DataMember(Name = "cylinderCapacity", EmitDefaultValue = true)]
        public int? CylinderCapacity { get; set; }

        /// <summary>
        /// The CO&amp;#8322; emission class valid in the European Union. See also the  [Directive 1999/62/EC](https://eur-lex.europa.eu/eli/dir/1999/62/2022-03-24) of the European Parliament and  of the Council on the charging of heavy goods vehicles for the use of certain infrastructures, Article 7ga.  Must be 1 for combustion and hybrid vehicles with any **emissionStandard**, 2-4 for combustion and hybrid vehicles with **emissionStandard** of at least _EURO_6_, and 5 for electric vehicles.   Relevant for &#x60;toll&#x60;. 
        /// </summary>
        /// <value>The CO&amp;#8322; emission class valid in the European Union. See also the  [Directive 1999/62/EC](https://eur-lex.europa.eu/eli/dir/1999/62/2022-03-24) of the European Parliament and  of the Council on the charging of heavy goods vehicles for the use of certain infrastructures, Article 7ga.  Must be 1 for combustion and hybrid vehicles with any **emissionStandard**, 2-4 for combustion and hybrid vehicles with **emissionStandard** of at least _EURO_6_, and 5 for electric vehicles.   Relevant for &#x60;toll&#x60;. </value>
        /// <example>1</example>
        [DataMember(Name = "co2EmissionClass", EmitDefaultValue = true)]
        public int? Co2EmissionClass { get; set; }

        /// <summary>
        /// Comma-separated list of the low-emission zone types of the vehicle. This parameter is deprecated and superseded by **lowEmissionZoneApprovals**. When still being used, only low-emission zones in Germany are affected, zones in other countries which need an environmental badge or vehicle registration can be entered without restriction. It is not possible to specify both parameters.  Available values are provided by type &#x60;LowEmissionZoneTypes&#x60;:  \&quot;DE_GREEN\&quot;, \&quot;DE_YELLOW\&quot;, \&quot;DE_RED\&quot;, \&quot;DE_NONE\&quot;  Relevant for &#x60;routing&#x60;. 
        /// </summary>
        /// <value>Comma-separated list of the low-emission zone types of the vehicle. This parameter is deprecated and superseded by **lowEmissionZoneApprovals**. When still being used, only low-emission zones in Germany are affected, zones in other countries which need an environmental badge or vehicle registration can be entered without restriction. It is not possible to specify both parameters.  Available values are provided by type &#x60;LowEmissionZoneTypes&#x60;:  \&quot;DE_GREEN\&quot;, \&quot;DE_YELLOW\&quot;, \&quot;DE_RED\&quot;, \&quot;DE_NONE\&quot;  Relevant for &#x60;routing&#x60;. </value>
        [DataMember(Name = "lowEmissionZoneTypes", EmitDefaultValue = true)]
        [Obsolete]
        public string LowEmissionZoneTypes { get; set; }

        /// <summary>
        /// Comma-separated list of approvals to enter low-emission zones. Usually, such approvals are environmental badges to be placed on the windscreen, but that can also be any other kind of approval or vehicle registration allowing it to enter a low-emission zone.  Low-emission zones which do not need any kind of approval but depend only on the **emissionStandard** are not affected by this parameter. Instead they can be entered if the **emissionStandard**  is sufficient. Electric vehicles can always enter these zones.  The default of the selected predefined profile allows entering all low-emission zones the vehicle can get an approval for. So, if you do not want to care about that and your  vehicle operates in a region where it has all necessary approvals, leave this parameter empty.  In order to consider low-emission zones depending on the actually available approvals, i.e. on  the environmental badges on the windscreen and other vehicle registrations, specify all of them here. The vehicle can then enter only those zones for which a proper approval is present. Low-emission zones in countries for which no value is specified cannot be entered.  Available values are:  \&quot;NONE\&quot;, \&quot;AT_EURO_1\&quot;, \&quot;AT_EURO_2\&quot;, \&quot;AT_EURO_3\&quot;, \&quot;AT_EURO_4\&quot;, \&quot;AT_EURO_5\&quot;, \&quot;AT_EURO_6\&quot;, \&quot;DE_GREEN\&quot;, \&quot;DE_YELLOW\&quot;, \&quot;DE_RED\&quot;, \&quot;DK_AUTHORIZED\&quot;, \&quot;ES_CAT_B\&quot;, \&quot;ES_CAT_C\&quot;, \&quot;ES_CAT_ECO\&quot;, \&quot;ES_CAT_ZERO\&quot;, \&quot;FR_CRITAIR_0\&quot;, \&quot;FR_CRITAIR_1\&quot;, \&quot;FR_CRITAIR_2\&quot;, \&quot;FR_CRITAIR_3\&quot;, \&quot;FR_CRITAIR_4\&quot;, \&quot;FR_CRITAIR_5\&quot;  This list can be extended at any time, clients should handle unknown values properly. Only one value per country can be specified. Relevant for &#x60;routing&#x60;. See [here](./concepts/low-emission-zones) for more information. 
        /// </summary>
        /// <value>Comma-separated list of approvals to enter low-emission zones. Usually, such approvals are environmental badges to be placed on the windscreen, but that can also be any other kind of approval or vehicle registration allowing it to enter a low-emission zone.  Low-emission zones which do not need any kind of approval but depend only on the **emissionStandard** are not affected by this parameter. Instead they can be entered if the **emissionStandard**  is sufficient. Electric vehicles can always enter these zones.  The default of the selected predefined profile allows entering all low-emission zones the vehicle can get an approval for. So, if you do not want to care about that and your  vehicle operates in a region where it has all necessary approvals, leave this parameter empty.  In order to consider low-emission zones depending on the actually available approvals, i.e. on  the environmental badges on the windscreen and other vehicle registrations, specify all of them here. The vehicle can then enter only those zones for which a proper approval is present. Low-emission zones in countries for which no value is specified cannot be entered.  Available values are:  \&quot;NONE\&quot;, \&quot;AT_EURO_1\&quot;, \&quot;AT_EURO_2\&quot;, \&quot;AT_EURO_3\&quot;, \&quot;AT_EURO_4\&quot;, \&quot;AT_EURO_5\&quot;, \&quot;AT_EURO_6\&quot;, \&quot;DE_GREEN\&quot;, \&quot;DE_YELLOW\&quot;, \&quot;DE_RED\&quot;, \&quot;DK_AUTHORIZED\&quot;, \&quot;ES_CAT_B\&quot;, \&quot;ES_CAT_C\&quot;, \&quot;ES_CAT_ECO\&quot;, \&quot;ES_CAT_ZERO\&quot;, \&quot;FR_CRITAIR_0\&quot;, \&quot;FR_CRITAIR_1\&quot;, \&quot;FR_CRITAIR_2\&quot;, \&quot;FR_CRITAIR_3\&quot;, \&quot;FR_CRITAIR_4\&quot;, \&quot;FR_CRITAIR_5\&quot;  This list can be extended at any time, clients should handle unknown values properly. Only one value per country can be specified. Relevant for &#x60;routing&#x60;. See [here](./concepts/low-emission-zones) for more information. </value>
        /// <example>DE_GREEN,DK_AUTHORIZED,FR_CRITAIR_1</example>
        [DataMember(Name = "lowEmissionZoneApprovals", EmitDefaultValue = true)]
        public string LowEmissionZoneApprovals { get; set; }

        /// <summary>
        /// The empty weight of the vehicle [kg].  Relevant for &#x60;routing&#x60;, &#x60;emissions&#x60;, &#x60;range calculation&#x60;. 
        /// </summary>
        /// <value>The empty weight of the vehicle [kg].  Relevant for &#x60;routing&#x60;, &#x60;emissions&#x60;, &#x60;range calculation&#x60;. </value>
        /// <example>15000</example>
        [DataMember(Name = "emptyWeight", EmitDefaultValue = true)]
        public int? EmptyWeight { get; set; }

        /// <summary>
        /// The weight of the vehicle&#39;s load [kg].  Relevant for &#x60;routing&#x60;, &#x60;emissions&#x60;, &#x60;range calculation&#x60;. 
        /// </summary>
        /// <value>The weight of the vehicle&#39;s load [kg].  Relevant for &#x60;routing&#x60;, &#x60;emissions&#x60;, &#x60;range calculation&#x60;. </value>
        /// <example>25000</example>
        [DataMember(Name = "loadWeight", EmitDefaultValue = true)]
        public int? LoadWeight { get; set; }

        /// <summary>
        /// The total permitted weight of the vehicle and its load [kg]. This is the weight the vehicle is usually registered with. If this value is not specified but **totalTechnicallyPermittedWeight** is specified then that value is used  for both **totalPermittedWeight** and **totalTechnicallyPermittedWeight**.  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;, &#x60;emissions&#x60;. 
        /// </summary>
        /// <value>The total permitted weight of the vehicle and its load [kg]. This is the weight the vehicle is usually registered with. If this value is not specified but **totalTechnicallyPermittedWeight** is specified then that value is used  for both **totalPermittedWeight** and **totalTechnicallyPermittedWeight**.  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;, &#x60;emissions&#x60;. </value>
        /// <example>40000</example>
        [DataMember(Name = "totalPermittedWeight", EmitDefaultValue = true)]
        public int? TotalPermittedWeight { get; set; }

        /// <summary>
        /// The total technically permitted weight of the vehicle and its load [kg].  Sometimes vehicles are registered with a smaller **totalPermittedWeight** than technically possible. For  such cases the possibly larger total technically permitted weight is specified here, it is relevant for  toll calculation in some European countries. If this value is not specified but **totalPermittedWeight** is specified then that value is used  for both **totalPermittedWeight** and **totalTechnicallyPermittedWeight**.  Relevant for &#x60;toll&#x60;. 
        /// </summary>
        /// <value>The total technically permitted weight of the vehicle and its load [kg].  Sometimes vehicles are registered with a smaller **totalPermittedWeight** than technically possible. For  such cases the possibly larger total technically permitted weight is specified here, it is relevant for  toll calculation in some European countries. If this value is not specified but **totalPermittedWeight** is specified then that value is used  for both **totalPermittedWeight** and **totalTechnicallyPermittedWeight**.  Relevant for &#x60;toll&#x60;. </value>
        /// <example>40000</example>
        [DataMember(Name = "totalTechnicallyPermittedWeight", EmitDefaultValue = true)]
        public int? TotalTechnicallyPermittedWeight { get; set; }

        /// <summary>
        /// The maximum distributed weight that may be supported by an axle of the vehicle [kg].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. 
        /// </summary>
        /// <value>The maximum distributed weight that may be supported by an axle of the vehicle [kg].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. </value>
        /// <example>11500</example>
        [DataMember(Name = "axleWeight", EmitDefaultValue = true)]
        public int? AxleWeight { get; set; }

        /// <summary>
        /// The total number of axles of the vehicle including the trailers.  Relevant for &#x60;toll&#x60;. 
        /// </summary>
        /// <value>The total number of axles of the vehicle including the trailers.  Relevant for &#x60;toll&#x60;. </value>
        /// <example>5</example>
        [DataMember(Name = "numberOfAxles", EmitDefaultValue = true)]
        public int? NumberOfAxles { get; set; }

        /// <summary>
        /// The total number of tires of the vehicle including the trailers.  Relevant for &#x60;toll&#x60;. 
        /// </summary>
        /// <value>The total number of tires of the vehicle including the trailers.  Relevant for &#x60;toll&#x60;. </value>
        /// <example>10</example>
        [DataMember(Name = "numberOfTires", EmitDefaultValue = true)]
        public int? NumberOfTires { get; set; }

        /// <summary>
        /// The height of the vehicle [cm].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. 
        /// </summary>
        /// <value>The height of the vehicle [cm].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. </value>
        /// <example>400</example>
        [DataMember(Name = "height", EmitDefaultValue = true)]
        public int? Height { get; set; }

        /// <summary>
        /// The height above the front axle [cm].  Relevant for &#x60;toll&#x60;. 
        /// </summary>
        /// <value>The height above the front axle [cm].  Relevant for &#x60;toll&#x60;. </value>
        /// <example>400</example>
        [DataMember(Name = "heightAboveFrontAxle", EmitDefaultValue = true)]
        public int? HeightAboveFrontAxle { get; set; }

        /// <summary>
        /// The length of the vehicle [cm].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. 
        /// </summary>
        /// <value>The length of the vehicle [cm].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. </value>
        /// <example>1650</example>
        [DataMember(Name = "length", EmitDefaultValue = true)]
        public int? Length { get; set; }

        /// <summary>
        /// The width of the vehicle [cm].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. 
        /// </summary>
        /// <value>The width of the vehicle [cm].  Relevant for &#x60;routing&#x60;, &#x60;toll&#x60;. </value>
        /// <example>254</example>
        [DataMember(Name = "width", EmitDefaultValue = true)]
        public int? Width { get; set; }

        /// <summary>
        /// Comma-separated list of hazardous materials the vehicle has loaded. If _NONE_ is specified along with other hazardous materials it is ignored. Depending on the load the route will avoid roads prohibited for and/or prefer roads prescribed for specific hazardous materials.  Available values are provided by type &#x60;HazardousMaterials&#x60;: \&quot;HAZARDOUS_TO_WATER\&quot; \&quot;EXPLOSIVE\&quot; \&quot;FLAMMABLE\&quot; \&quot;RADIOACTIVE\&quot; \&quot;INHALATION_HAZARD\&quot; \&quot;MEDICAL_WASTE\&quot; \&quot;OTHER\&quot; \&quot;NONE\&quot;  Relevant for &#x60;routing&#x60;. 
        /// </summary>
        /// <value>Comma-separated list of hazardous materials the vehicle has loaded. If _NONE_ is specified along with other hazardous materials it is ignored. Depending on the load the route will avoid roads prohibited for and/or prefer roads prescribed for specific hazardous materials.  Available values are provided by type &#x60;HazardousMaterials&#x60;: \&quot;HAZARDOUS_TO_WATER\&quot; \&quot;EXPLOSIVE\&quot; \&quot;FLAMMABLE\&quot; \&quot;RADIOACTIVE\&quot; \&quot;INHALATION_HAZARD\&quot; \&quot;MEDICAL_WASTE\&quot; \&quot;OTHER\&quot; \&quot;NONE\&quot;  Relevant for &#x60;routing&#x60;. </value>
        [DataMember(Name = "hazardousMaterials", EmitDefaultValue = true)]
        public string HazardousMaterials { get; set; }

        /// <summary>
        /// Comma-separated list of truck routes the vehicle has to follow. This parameter will be ignored for non-truck profiles such as EUR_CAR, EUR_VAN, USA_1_PICKUP or AUS_LCV_LIGHT_COMMERCIAL.  * &#x60;DE_LKWUEBERLSTVAUSNV&#x60;  Preferred routes for long trucks in Germany, also known as Lang-LKW.  * &#x60;NL_LZV&#x60;  Preferred routes for long trucks in the Netherlands, also known as LZV (Langere en Zwaardere Vrachtautocombinatie).  * &#x60;NZ_HPMV&#x60;  The network for High Productivity Motor Vehicles (HPMV) carrying the maximum loads available under a permit (New Zeland Transport Agency).  * &#x60;SE_BK_1&#x60;  Public roads and bridges that support up to 64 t total permitted weight (Swedish Transport Administration).  * &#x60;SE_BK_2&#x60;  Public roads and bridges that support up to 51.4 t total permitted weight.  Actual limit depends on wheelbase and axle weight (Swedish Transport Administration).  * &#x60;SE_BK_3&#x60;  Public roads and bridges that support up to 37.5 t total permitted weight.  Actual limit depends on wheelbase and axle weight (Swedish Transport Administration).  * &#x60;SE_BK_4&#x60;  Public roads and bridges that support up to 74 t total permitted weight (draft summer 2018, Swedish Transport Administration).  * &#x60;US_STAA&#x60;  Routes that belong to the highway network as defined by the Surface Transportation Assistance Act in the US.  * &#x60;US_TD&#x60;  Part of a state-designated highway network for trucks in the US.  * &#x60;AU_B_DOUBLE&#x60;  B-Double routes as defined in Australia.  * &#x60;AU_B_DOUBLE_HML&#x60;  Routes for B-Double vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).  * &#x60;AU_B_TRIPLE&#x60;  B-Triple routes as defined in Australia.  * &#x60;AU_B_TRIPLE_HML&#x60;  Routes for B-Triple vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).  * &#x60;AU_AB_TRIPLE&#x60;  Routes for AB-Triple vehicle combinations operating (Australian Transport Administration).  * &#x60;AU_AB_TRIPLE_HML&#x60;  Routes for AB-Triple vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).  * &#x60;NONE&#x60;  Overrides the profile settings to specify not to follow any truck routes.   If _NONE_ is specified along with other truck routes it is ignored.  Available values are provided by type &#x60;TruckRoutes&#x60;.  Relevant for &#x60;routing&#x60;. Cannot be used with **options[routingMode]&#x3D;MONETARY**. 
        /// </summary>
        /// <value>Comma-separated list of truck routes the vehicle has to follow. This parameter will be ignored for non-truck profiles such as EUR_CAR, EUR_VAN, USA_1_PICKUP or AUS_LCV_LIGHT_COMMERCIAL.  * &#x60;DE_LKWUEBERLSTVAUSNV&#x60;  Preferred routes for long trucks in Germany, also known as Lang-LKW.  * &#x60;NL_LZV&#x60;  Preferred routes for long trucks in the Netherlands, also known as LZV (Langere en Zwaardere Vrachtautocombinatie).  * &#x60;NZ_HPMV&#x60;  The network for High Productivity Motor Vehicles (HPMV) carrying the maximum loads available under a permit (New Zeland Transport Agency).  * &#x60;SE_BK_1&#x60;  Public roads and bridges that support up to 64 t total permitted weight (Swedish Transport Administration).  * &#x60;SE_BK_2&#x60;  Public roads and bridges that support up to 51.4 t total permitted weight.  Actual limit depends on wheelbase and axle weight (Swedish Transport Administration).  * &#x60;SE_BK_3&#x60;  Public roads and bridges that support up to 37.5 t total permitted weight.  Actual limit depends on wheelbase and axle weight (Swedish Transport Administration).  * &#x60;SE_BK_4&#x60;  Public roads and bridges that support up to 74 t total permitted weight (draft summer 2018, Swedish Transport Administration).  * &#x60;US_STAA&#x60;  Routes that belong to the highway network as defined by the Surface Transportation Assistance Act in the US.  * &#x60;US_TD&#x60;  Part of a state-designated highway network for trucks in the US.  * &#x60;AU_B_DOUBLE&#x60;  B-Double routes as defined in Australia.  * &#x60;AU_B_DOUBLE_HML&#x60;  Routes for B-Double vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).  * &#x60;AU_B_TRIPLE&#x60;  B-Triple routes as defined in Australia.  * &#x60;AU_B_TRIPLE_HML&#x60;  Routes for B-Triple vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).  * &#x60;AU_AB_TRIPLE&#x60;  Routes for AB-Triple vehicle combinations operating (Australian Transport Administration).  * &#x60;AU_AB_TRIPLE_HML&#x60;  Routes for AB-Triple vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).  * &#x60;NONE&#x60;  Overrides the profile settings to specify not to follow any truck routes.   If _NONE_ is specified along with other truck routes it is ignored.  Available values are provided by type &#x60;TruckRoutes&#x60;.  Relevant for &#x60;routing&#x60;. Cannot be used with **options[routingMode]&#x3D;MONETARY**. </value>
        [DataMember(Name = "truckRoutes", EmitDefaultValue = true)]
        public string TruckRoutes { get; set; }

        /// <summary>
        /// Specifies if the vehicle usage is commercial.  Relevant for &#x60;toll&#x60;. 
        /// </summary>
        /// <value>Specifies if the vehicle usage is commercial.  Relevant for &#x60;toll&#x60;. </value>
        /// <example>false</example>
        [DataMember(Name = "commercial", EmitDefaultValue = true)]
        public bool? Commercial { get; set; }

        /// <summary>
        /// A comma separated list of ETC Subscriptions. See [here](./concepts/electronic-toll-collection) for more information on available subscriptions.  Available values are provided by type &#x60;EtcSubscriptionTypes&#x60;: \&quot;AT_GOBOX\&quot; \&quot;BE_TELETOL\&quot; \&quot;BE_VIAPASS\&quot; \&quot;CH_LSVA\&quot; \&quot;DE_QUICKBOX\&quot; \&quot;DE_TOLLCOLLECT\&quot; \&quot;DE_WARNOWTUNNEL_RFID\&quot; \&quot;DK_BROPAS_BUSINESS\&quot; \&quot;IT_TELEPASS\&quot; \&quot;NL_TELECARD\&quot; \&quot;NL_TTAG\&quot; \&quot;NO_AUTOPASS\&quot; \&quot;PT_VIA_VERDE\&quot; \&quot;US_APASS\&quot; \&quot;US_BREEZEBY\&quot; \&quot;US_DOWNBEACH_EXPRESSPASS\&quot; \&quot;US_EPASS\&quot; \&quot;US_EXPRESSACCOUNT\&quot; \&quot;US_EXPRESSCARD\&quot; \&quot;US_EXPRESSPASS\&quot; \&quot;US_EXPRESSTOLL\&quot; \&quot;US_EZPASS\&quot; \&quot;US_EZTAG\&quot; \&quot;US_FASTRAK\&quot; \&quot;US_GEAUXPASS\&quot; \&quot;US_GOODTOGO\&quot; \&quot;US_GOPASS\&quot; \&quot;US_IPASS\&quot; \&quot;US_KTAG\&quot; \&quot;US_LEEWAY\&quot; \&quot;US_MACKINACBRIDGE_MACPASS\&quot; \&quot;US_MARYLAND_EZPASS\&quot; \&quot;US_MASSACHUSETTS_EZPASS\&quot; \&quot;US_NC_QUICKPASS\&quot; \&quot;US_NEWHAMPSHIRE_EZPASS\&quot; \&quot;US_NEWJERSEY_EZPASS\&quot; \&quot;US_NEWYORK_EZPASS\&quot; \&quot;US_NEXPRESS\&quot; \&quot;US_OHIO_EZPASS\&quot; \&quot;US_PALPASS\&quot; \&quot;US_PIKEPASS\&quot; \&quot;US_RIVERLINK\&quot; \&quot;US_RIVERLINK_NOTRANSPONDER\&quot; \&quot;US_SEAWAYTRANSITCARD\&quot; \&quot;US_SUNPASS\&quot; \&quot;US_TOLLTAG\&quot; \&quot;US_TXTAG\&quot; \&quot;US_VIRGINIA_EZPASS\&quot; \&quot;US_WESTVIRGINIA_EZPASS\&quot; \&quot;US_PEACHPASS\&quot; \&quot;US_NEXUS\&quot; \&quot;US_DELAWARE_EZPASS\&quot; \&quot;US_GROSSEILETOLLBRIDGE_PASSTAG\&quot; \&quot;US_EZPASS_PAYBYPLATE\&quot;  Relevant for &#x60;toll&#x60;. 
        /// </summary>
        /// <value>A comma separated list of ETC Subscriptions. See [here](./concepts/electronic-toll-collection) for more information on available subscriptions.  Available values are provided by type &#x60;EtcSubscriptionTypes&#x60;: \&quot;AT_GOBOX\&quot; \&quot;BE_TELETOL\&quot; \&quot;BE_VIAPASS\&quot; \&quot;CH_LSVA\&quot; \&quot;DE_QUICKBOX\&quot; \&quot;DE_TOLLCOLLECT\&quot; \&quot;DE_WARNOWTUNNEL_RFID\&quot; \&quot;DK_BROPAS_BUSINESS\&quot; \&quot;IT_TELEPASS\&quot; \&quot;NL_TELECARD\&quot; \&quot;NL_TTAG\&quot; \&quot;NO_AUTOPASS\&quot; \&quot;PT_VIA_VERDE\&quot; \&quot;US_APASS\&quot; \&quot;US_BREEZEBY\&quot; \&quot;US_DOWNBEACH_EXPRESSPASS\&quot; \&quot;US_EPASS\&quot; \&quot;US_EXPRESSACCOUNT\&quot; \&quot;US_EXPRESSCARD\&quot; \&quot;US_EXPRESSPASS\&quot; \&quot;US_EXPRESSTOLL\&quot; \&quot;US_EZPASS\&quot; \&quot;US_EZTAG\&quot; \&quot;US_FASTRAK\&quot; \&quot;US_GEAUXPASS\&quot; \&quot;US_GOODTOGO\&quot; \&quot;US_GOPASS\&quot; \&quot;US_IPASS\&quot; \&quot;US_KTAG\&quot; \&quot;US_LEEWAY\&quot; \&quot;US_MACKINACBRIDGE_MACPASS\&quot; \&quot;US_MARYLAND_EZPASS\&quot; \&quot;US_MASSACHUSETTS_EZPASS\&quot; \&quot;US_NC_QUICKPASS\&quot; \&quot;US_NEWHAMPSHIRE_EZPASS\&quot; \&quot;US_NEWJERSEY_EZPASS\&quot; \&quot;US_NEWYORK_EZPASS\&quot; \&quot;US_NEXPRESS\&quot; \&quot;US_OHIO_EZPASS\&quot; \&quot;US_PALPASS\&quot; \&quot;US_PIKEPASS\&quot; \&quot;US_RIVERLINK\&quot; \&quot;US_RIVERLINK_NOTRANSPONDER\&quot; \&quot;US_SEAWAYTRANSITCARD\&quot; \&quot;US_SUNPASS\&quot; \&quot;US_TOLLTAG\&quot; \&quot;US_TXTAG\&quot; \&quot;US_VIRGINIA_EZPASS\&quot; \&quot;US_WESTVIRGINIA_EZPASS\&quot; \&quot;US_PEACHPASS\&quot; \&quot;US_NEXUS\&quot; \&quot;US_DELAWARE_EZPASS\&quot; \&quot;US_GROSSEILETOLLBRIDGE_PASSTAG\&quot; \&quot;US_EZPASS_PAYBYPLATE\&quot;  Relevant for &#x60;toll&#x60;. </value>
        [DataMember(Name = "etcSubscriptions", EmitDefaultValue = true)]
        public string EtcSubscriptions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Vehicle {\n");
            sb.Append("  EngineType: ").Append(EngineType).Append("\n");
            sb.Append("  FuelType: ").Append(FuelType).Append("\n");
            sb.Append("  ElectricityType: ").Append(ElectricityType).Append("\n");
            sb.Append("  AverageFuelConsumption: ").Append(AverageFuelConsumption).Append("\n");
            sb.Append("  AverageElectricityConsumption: ").Append(AverageElectricityConsumption).Append("\n");
            sb.Append("  BioFuelRatio: ").Append(BioFuelRatio).Append("\n");
            sb.Append("  HybridRatio: ").Append(HybridRatio).Append("\n");
            sb.Append("  DualFuelRatio: ").Append(DualFuelRatio).Append("\n");
            sb.Append("  CylinderCapacity: ").Append(CylinderCapacity).Append("\n");
            sb.Append("  EmissionStandard: ").Append(EmissionStandard).Append("\n");
            sb.Append("  Co2EmissionClass: ").Append(Co2EmissionClass).Append("\n");
            sb.Append("  LowEmissionZoneTypes: ").Append(LowEmissionZoneTypes).Append("\n");
            sb.Append("  LowEmissionZoneApprovals: ").Append(LowEmissionZoneApprovals).Append("\n");
            sb.Append("  ParticleReductionClass: ").Append(ParticleReductionClass).Append("\n");
            sb.Append("  EmptyWeight: ").Append(EmptyWeight).Append("\n");
            sb.Append("  LoadWeight: ").Append(LoadWeight).Append("\n");
            sb.Append("  TotalPermittedWeight: ").Append(TotalPermittedWeight).Append("\n");
            sb.Append("  TotalTechnicallyPermittedWeight: ").Append(TotalTechnicallyPermittedWeight).Append("\n");
            sb.Append("  AxleWeight: ").Append(AxleWeight).Append("\n");
            sb.Append("  NumberOfAxles: ").Append(NumberOfAxles).Append("\n");
            sb.Append("  NumberOfTires: ").Append(NumberOfTires).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  HeightAboveFrontAxle: ").Append(HeightAboveFrontAxle).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  HazardousMaterials: ").Append(HazardousMaterials).Append("\n");
            sb.Append("  TunnelRestrictionCode: ").Append(TunnelRestrictionCode).Append("\n");
            sb.Append("  TruckRoutes: ").Append(TruckRoutes).Append("\n");
            sb.Append("  Commercial: ").Append(Commercial).Append("\n");
            sb.Append("  EtcSubscriptions: ").Append(EtcSubscriptions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AverageFuelConsumption (double?) minimum
            if (this.AverageFuelConsumption < (double?)0)
            {
                yield return new ValidationResult("Invalid value for AverageFuelConsumption, must be a value greater than or equal to 0.", new [] { "AverageFuelConsumption" });
            }

            // AverageElectricityConsumption (double?) minimum
            if (this.AverageElectricityConsumption < (double?)0)
            {
                yield return new ValidationResult("Invalid value for AverageElectricityConsumption, must be a value greater than or equal to 0.", new [] { "AverageElectricityConsumption" });
            }

            // BioFuelRatio (int?) maximum
            if (this.BioFuelRatio > (int?)100)
            {
                yield return new ValidationResult("Invalid value for BioFuelRatio, must be a value less than or equal to 100.", new [] { "BioFuelRatio" });
            }

            // BioFuelRatio (int?) minimum
            if (this.BioFuelRatio < (int?)0)
            {
                yield return new ValidationResult("Invalid value for BioFuelRatio, must be a value greater than or equal to 0.", new [] { "BioFuelRatio" });
            }

            // HybridRatio (int?) maximum
            if (this.HybridRatio > (int?)99)
            {
                yield return new ValidationResult("Invalid value for HybridRatio, must be a value less than or equal to 99.", new [] { "HybridRatio" });
            }

            // HybridRatio (int?) minimum
            if (this.HybridRatio < (int?)1)
            {
                yield return new ValidationResult("Invalid value for HybridRatio, must be a value greater than or equal to 1.", new [] { "HybridRatio" });
            }

            // DualFuelRatio (int?) maximum
            if (this.DualFuelRatio > (int?)99)
            {
                yield return new ValidationResult("Invalid value for DualFuelRatio, must be a value less than or equal to 99.", new [] { "DualFuelRatio" });
            }

            // DualFuelRatio (int?) minimum
            if (this.DualFuelRatio < (int?)1)
            {
                yield return new ValidationResult("Invalid value for DualFuelRatio, must be a value greater than or equal to 1.", new [] { "DualFuelRatio" });
            }

            // CylinderCapacity (int?) minimum
            if (this.CylinderCapacity < (int?)1)
            {
                yield return new ValidationResult("Invalid value for CylinderCapacity, must be a value greater than or equal to 1.", new [] { "CylinderCapacity" });
            }

            // Co2EmissionClass (int?) maximum
            if (this.Co2EmissionClass > (int?)5)
            {
                yield return new ValidationResult("Invalid value for Co2EmissionClass, must be a value less than or equal to 5.", new [] { "Co2EmissionClass" });
            }

            // Co2EmissionClass (int?) minimum
            if (this.Co2EmissionClass < (int?)1)
            {
                yield return new ValidationResult("Invalid value for Co2EmissionClass, must be a value greater than or equal to 1.", new [] { "Co2EmissionClass" });
            }

            // EmptyWeight (int?) minimum
            if (this.EmptyWeight < (int?)1)
            {
                yield return new ValidationResult("Invalid value for EmptyWeight, must be a value greater than or equal to 1.", new [] { "EmptyWeight" });
            }

            // LoadWeight (int?) minimum
            if (this.LoadWeight < (int?)0)
            {
                yield return new ValidationResult("Invalid value for LoadWeight, must be a value greater than or equal to 0.", new [] { "LoadWeight" });
            }

            // TotalPermittedWeight (int?) minimum
            if (this.TotalPermittedWeight < (int?)1)
            {
                yield return new ValidationResult("Invalid value for TotalPermittedWeight, must be a value greater than or equal to 1.", new [] { "TotalPermittedWeight" });
            }

            // TotalTechnicallyPermittedWeight (int?) minimum
            if (this.TotalTechnicallyPermittedWeight < (int?)1)
            {
                yield return new ValidationResult("Invalid value for TotalTechnicallyPermittedWeight, must be a value greater than or equal to 1.", new [] { "TotalTechnicallyPermittedWeight" });
            }

            // AxleWeight (int?) minimum
            if (this.AxleWeight < (int?)1)
            {
                yield return new ValidationResult("Invalid value for AxleWeight, must be a value greater than or equal to 1.", new [] { "AxleWeight" });
            }

            // NumberOfAxles (int?) minimum
            if (this.NumberOfAxles < (int?)1)
            {
                yield return new ValidationResult("Invalid value for NumberOfAxles, must be a value greater than or equal to 1.", new [] { "NumberOfAxles" });
            }

            // NumberOfTires (int?) minimum
            if (this.NumberOfTires < (int?)1)
            {
                yield return new ValidationResult("Invalid value for NumberOfTires, must be a value greater than or equal to 1.", new [] { "NumberOfTires" });
            }

            // Height (int?) minimum
            if (this.Height < (int?)1)
            {
                yield return new ValidationResult("Invalid value for Height, must be a value greater than or equal to 1.", new [] { "Height" });
            }

            // HeightAboveFrontAxle (int?) minimum
            if (this.HeightAboveFrontAxle < (int?)1)
            {
                yield return new ValidationResult("Invalid value for HeightAboveFrontAxle, must be a value greater than or equal to 1.", new [] { "HeightAboveFrontAxle" });
            }

            // Length (int?) minimum
            if (this.Length < (int?)1)
            {
                yield return new ValidationResult("Invalid value for Length, must be a value greater than or equal to 1.", new [] { "Length" });
            }

            // Width (int?) minimum
            if (this.Width < (int?)1)
            {
                yield return new ValidationResult("Invalid value for Width, must be a value greater than or equal to 1.", new [] { "Width" });
            }

            yield break;
        }
    }

}
