/*
 * Routing
 *
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.33
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routing.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routing.Model
{
    /// <summary>
    /// Issued when the driver has to perform a maneuver, e.g. to turn or to enter a roundabout. Requires _MANEUVER_EVENTS_ to be requested.
    /// </summary>
    [DataContract(Name = "ManeuverEvent")]
    public partial class ManeuverEvent : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public ManeuverType Type { get; set; }

        /// <summary>
        /// Gets or Sets CombinedTransportType
        /// </summary>
        [DataMember(Name = "combinedTransportType", EmitDefaultValue = true)]
        public CombinedTransportType? CombinedTransportType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManeuverEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ManeuverEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ManeuverEvent" /> class.
        /// </summary>
        /// <param name="type">type (required).</param>
        /// <param name="relativeDirection">The direction of the outgoing road relative to continuing in the same direction as the incoming road (clockwise)..</param>
        /// <param name="absoluteDirection">The absolute direction of the outgoing road (clockwise). North represents 0 degrees..</param>
        /// <param name="description">A descriptive text for the current maneuver. The language can be specified by the parameter **options[language]**. A warning with **warningCode** _ROUTING_MANEUVERS_IN_DIFFERENT_LANGUAGE_ and the actual language is returned when the requested language is not available. Geographical names such as town and road names are always given in the local language. (required).</param>
        /// <param name="roadAhead">roadAhead.</param>
        /// <param name="directionSignText">The city names and road numbers on a signpost at the current location to follow for the current maneuver. Empty if no signpost is present or the data is not available..</param>
        /// <param name="exitNumber">The number of an exit or interchange of a highway or a freeway-like road. Only present if the maneuver type is _CHANGE_ or _EXIT_. Empty if the data does not contain an exit number..</param>
        /// <param name="exitName">The name of an exit or interchange of a highway or a freeway-like road. Only present if the maneuver type is _CHANGE_ or _EXIT_. Empty if the data does not contain an exit name..</param>
        /// <param name="roundaboutExit">The exit number at a roundabout. Only drivable roads are counted. Only present if the maneuver type is _TAKE\\_ROUNDABOUT_..</param>
        /// <param name="combinedTransportName">The name of the combined transport to take a the current location. Only present if the maneuver type is _TAKE\\_COMBINED\\_TRANSPORT_..</param>
        /// <param name="combinedTransportType">combinedTransportType.</param>
        /// <param name="crossingRoadName">The name of the crossing road at which a U-turn has to be made. Only present if the maneuver type is _MAKE\\_U\\_TURN_ and if the U-turn takes place at a crossing..</param>
        public ManeuverEvent(ManeuverType type = default(ManeuverType), int? relativeDirection = default(int?), int? absoluteDirection = default(int?), string description = default(string), RoadAhead roadAhead = default(RoadAhead), string directionSignText = default(string), string exitNumber = default(string), string exitName = default(string), int? roundaboutExit = default(int?), string combinedTransportName = default(string), CombinedTransportType? combinedTransportType = default(CombinedTransportType?), string crossingRoadName = default(string))
        {
            this.Type = type;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for ManeuverEvent and cannot be null");
            }
            this.Description = description;
            this.RelativeDirection = relativeDirection;
            this.AbsoluteDirection = absoluteDirection;
            this.RoadAhead = roadAhead;
            this.DirectionSignText = directionSignText;
            this.ExitNumber = exitNumber;
            this.ExitName = exitName;
            this.RoundaboutExit = roundaboutExit;
            this.CombinedTransportName = combinedTransportName;
            this.CombinedTransportType = combinedTransportType;
            this.CrossingRoadName = crossingRoadName;
        }

        /// <summary>
        /// The direction of the outgoing road relative to continuing in the same direction as the incoming road (clockwise).
        /// </summary>
        /// <value>The direction of the outgoing road relative to continuing in the same direction as the incoming road (clockwise).</value>
        [DataMember(Name = "relativeDirection", EmitDefaultValue = true)]
        public int? RelativeDirection { get; set; }

        /// <summary>
        /// The absolute direction of the outgoing road (clockwise). North represents 0 degrees.
        /// </summary>
        /// <value>The absolute direction of the outgoing road (clockwise). North represents 0 degrees.</value>
        [DataMember(Name = "absoluteDirection", EmitDefaultValue = true)]
        public int? AbsoluteDirection { get; set; }

        /// <summary>
        /// A descriptive text for the current maneuver. The language can be specified by the parameter **options[language]**. A warning with **warningCode** _ROUTING_MANEUVERS_IN_DIFFERENT_LANGUAGE_ and the actual language is returned when the requested language is not available. Geographical names such as town and road names are always given in the local language.
        /// </summary>
        /// <value>A descriptive text for the current maneuver. The language can be specified by the parameter **options[language]**. A warning with **warningCode** _ROUTING_MANEUVERS_IN_DIFFERENT_LANGUAGE_ and the actual language is returned when the requested language is not available. Geographical names such as town and road names are always given in the local language.</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets RoadAhead
        /// </summary>
        [DataMember(Name = "roadAhead", EmitDefaultValue = false)]
        public RoadAhead RoadAhead { get; set; }

        /// <summary>
        /// The city names and road numbers on a signpost at the current location to follow for the current maneuver. Empty if no signpost is present or the data is not available.
        /// </summary>
        /// <value>The city names and road numbers on a signpost at the current location to follow for the current maneuver. Empty if no signpost is present or the data is not available.</value>
        [DataMember(Name = "directionSignText", EmitDefaultValue = true)]
        public string DirectionSignText { get; set; }

        /// <summary>
        /// The number of an exit or interchange of a highway or a freeway-like road. Only present if the maneuver type is _CHANGE_ or _EXIT_. Empty if the data does not contain an exit number.
        /// </summary>
        /// <value>The number of an exit or interchange of a highway or a freeway-like road. Only present if the maneuver type is _CHANGE_ or _EXIT_. Empty if the data does not contain an exit number.</value>
        [DataMember(Name = "exitNumber", EmitDefaultValue = true)]
        public string ExitNumber { get; set; }

        /// <summary>
        /// The name of an exit or interchange of a highway or a freeway-like road. Only present if the maneuver type is _CHANGE_ or _EXIT_. Empty if the data does not contain an exit name.
        /// </summary>
        /// <value>The name of an exit or interchange of a highway or a freeway-like road. Only present if the maneuver type is _CHANGE_ or _EXIT_. Empty if the data does not contain an exit name.</value>
        [DataMember(Name = "exitName", EmitDefaultValue = true)]
        public string ExitName { get; set; }

        /// <summary>
        /// The exit number at a roundabout. Only drivable roads are counted. Only present if the maneuver type is _TAKE\\_ROUNDABOUT_.
        /// </summary>
        /// <value>The exit number at a roundabout. Only drivable roads are counted. Only present if the maneuver type is _TAKE\\_ROUNDABOUT_.</value>
        [DataMember(Name = "roundaboutExit", EmitDefaultValue = true)]
        public int? RoundaboutExit { get; set; }

        /// <summary>
        /// The name of the combined transport to take a the current location. Only present if the maneuver type is _TAKE\\_COMBINED\\_TRANSPORT_.
        /// </summary>
        /// <value>The name of the combined transport to take a the current location. Only present if the maneuver type is _TAKE\\_COMBINED\\_TRANSPORT_.</value>
        [DataMember(Name = "combinedTransportName", EmitDefaultValue = true)]
        public string CombinedTransportName { get; set; }

        /// <summary>
        /// The name of the crossing road at which a U-turn has to be made. Only present if the maneuver type is _MAKE\\_U\\_TURN_ and if the U-turn takes place at a crossing.
        /// </summary>
        /// <value>The name of the crossing road at which a U-turn has to be made. Only present if the maneuver type is _MAKE\\_U\\_TURN_ and if the U-turn takes place at a crossing.</value>
        [DataMember(Name = "crossingRoadName", EmitDefaultValue = true)]
        public string CrossingRoadName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ManeuverEvent {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RelativeDirection: ").Append(RelativeDirection).Append("\n");
            sb.Append("  AbsoluteDirection: ").Append(AbsoluteDirection).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  RoadAhead: ").Append(RoadAhead).Append("\n");
            sb.Append("  DirectionSignText: ").Append(DirectionSignText).Append("\n");
            sb.Append("  ExitNumber: ").Append(ExitNumber).Append("\n");
            sb.Append("  ExitName: ").Append(ExitName).Append("\n");
            sb.Append("  RoundaboutExit: ").Append(RoundaboutExit).Append("\n");
            sb.Append("  CombinedTransportName: ").Append(CombinedTransportName).Append("\n");
            sb.Append("  CombinedTransportType: ").Append(CombinedTransportType).Append("\n");
            sb.Append("  CrossingRoadName: ").Append(CrossingRoadName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // RelativeDirection (int?) maximum
            if (this.RelativeDirection > (int?)180)
            {
                yield return new ValidationResult("Invalid value for RelativeDirection, must be a value less than or equal to 180.", new [] { "RelativeDirection" });
            }

            // RelativeDirection (int?) minimum
            if (this.RelativeDirection < (int?)-180)
            {
                yield return new ValidationResult("Invalid value for RelativeDirection, must be a value greater than or equal to -180.", new [] { "RelativeDirection" });
            }

            // AbsoluteDirection (int?) maximum
            if (this.AbsoluteDirection > (int?)360)
            {
                yield return new ValidationResult("Invalid value for AbsoluteDirection, must be a value less than or equal to 360.", new [] { "AbsoluteDirection" });
            }

            // AbsoluteDirection (int?) minimum
            if (this.AbsoluteDirection < (int?)0)
            {
                yield return new ValidationResult("Invalid value for AbsoluteDirection, must be a value greater than or equal to 0.", new [] { "AbsoluteDirection" });
            }

            // RoundaboutExit (int?) minimum
            if (this.RoundaboutExit < (int?)0)
            {
                yield return new ValidationResult("Invalid value for RoundaboutExit, must be a value greater than or equal to 0.", new [] { "RoundaboutExit" });
            }

            yield break;
        }
    }

}
