/*
 * Routing
 *
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.32
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = PTV.Developer.Clients.routing.Client.OpenAPIDateConverter;

namespace PTV.Developer.Clients.routing.Model
{
    /// <summary>
    /// Issued periodically to report electricity consumption and battery status. Requires _EV_STATUS_EVENTS_ or _EV_STATUS_EVENTS_POLYLINE_ to be requested.
    /// </summary>
    [DataContract(Name = "EvStatusEvent")]
    public partial class EvStatusEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EvStatusEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EvStatusEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EvStatusEvent" /> class.
        /// </summary>
        /// <param name="batteryStateOfCharge">The remaining state of charge at the location of this event [%]. May be below the defined minimum state of charge or even below zero, if the electricity consumption exceeds the available energy in the battery and charging is not possible before falling below zero. (required).</param>
        /// <param name="electricityConsumption">The electricity consumption since the previous event containing **evStatus** [kWh]. (required).</param>
        /// <param name="polyline">The route polyline snippet since the previous event containing **evStatus** in the format specified by **options[polylineFormat]**. The polyline may be null for events without distance to the previous **evStatus** event, for example events generated at a waypoint  with power consumption during service. Requires _EV_STATUS_EVENTS_POLYLINE_ to be requested..</param>
        public EvStatusEvent(double? batteryStateOfCharge = default(double?), double? electricityConsumption = default(double?), string polyline = default(string))
        {
            // to ensure "batteryStateOfCharge" is required (not null)
            if (batteryStateOfCharge == null)
            {
                throw new ArgumentNullException("batteryStateOfCharge is a required property for EvStatusEvent and cannot be null");
            }
            this.BatteryStateOfCharge = batteryStateOfCharge;
            // to ensure "electricityConsumption" is required (not null)
            if (electricityConsumption == null)
            {
                throw new ArgumentNullException("electricityConsumption is a required property for EvStatusEvent and cannot be null");
            }
            this.ElectricityConsumption = electricityConsumption;
            this.Polyline = polyline;
        }

        /// <summary>
        /// The remaining state of charge at the location of this event [%]. May be below the defined minimum state of charge or even below zero, if the electricity consumption exceeds the available energy in the battery and charging is not possible before falling below zero.
        /// </summary>
        /// <value>The remaining state of charge at the location of this event [%]. May be below the defined minimum state of charge or even below zero, if the electricity consumption exceeds the available energy in the battery and charging is not possible before falling below zero.</value>
        /// <example>58</example>
        [DataMember(Name = "batteryStateOfCharge", IsRequired = true, EmitDefaultValue = true)]
        public double? BatteryStateOfCharge { get; set; }

        /// <summary>
        /// The electricity consumption since the previous event containing **evStatus** [kWh].
        /// </summary>
        /// <value>The electricity consumption since the previous event containing **evStatus** [kWh].</value>
        [DataMember(Name = "electricityConsumption", IsRequired = true, EmitDefaultValue = true)]
        public double? ElectricityConsumption { get; set; }

        /// <summary>
        /// The route polyline snippet since the previous event containing **evStatus** in the format specified by **options[polylineFormat]**. The polyline may be null for events without distance to the previous **evStatus** event, for example events generated at a waypoint  with power consumption during service. Requires _EV_STATUS_EVENTS_POLYLINE_ to be requested.
        /// </summary>
        /// <value>The route polyline snippet since the previous event containing **evStatus** in the format specified by **options[polylineFormat]**. The polyline may be null for events without distance to the previous **evStatus** event, for example events generated at a waypoint  with power consumption during service. Requires _EV_STATUS_EVENTS_POLYLINE_ to be requested.</value>
        [DataMember(Name = "polyline", EmitDefaultValue = true)]
        public string Polyline { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EvStatusEvent {\n");
            sb.Append("  BatteryStateOfCharge: ").Append(BatteryStateOfCharge).Append("\n");
            sb.Append("  ElectricityConsumption: ").Append(ElectricityConsumption).Append("\n");
            sb.Append("  Polyline: ").Append(Polyline).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // BatteryStateOfCharge (double?) maximum
            if (this.BatteryStateOfCharge > (double?)100)
            {
                yield return new ValidationResult("Invalid value for BatteryStateOfCharge, must be a value less than or equal to 100.", new [] { "BatteryStateOfCharge" });
            }

            yield break;
        }
    }

}
