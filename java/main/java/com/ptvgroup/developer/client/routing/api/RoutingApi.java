/*
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver's working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.ptvgroup.developer.client.routing.api;

import com.ptvgroup.developer.client.routing.ApiClient;
import com.ptvgroup.developer.client.routing.ApiException;
import com.ptvgroup.developer.client.routing.ApiResponse;
import com.ptvgroup.developer.client.routing.Pair;

import com.ptvgroup.developer.client.routing.model.Driver;
import com.ptvgroup.developer.client.routing.model.EmissionOptions;
import com.ptvgroup.developer.client.routing.model.ErrorResponse;
import com.ptvgroup.developer.client.routing.model.EtaResponse;
import com.ptvgroup.developer.client.routing.model.EvOptions;
import com.ptvgroup.developer.client.routing.model.MonetaryCostOptions;
import java.time.OffsetDateTime;
import com.ptvgroup.developer.client.routing.model.Options;
import com.ptvgroup.developer.client.routing.model.PositionAtWaypoint;
import com.ptvgroup.developer.client.routing.model.PositionOnRoute;
import com.ptvgroup.developer.client.routing.model.Results;
import com.ptvgroup.developer.client.routing.model.RouteRequest;
import com.ptvgroup.developer.client.routing.model.RouteResponse;
import java.util.UUID;
import com.ptvgroup.developer.client.routing.model.Vehicle;
import com.ptvgroup.developer.client.routing.model.WorkLogbook;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-08-12T07:36:30.278221337Z[Etc/UTC]", comments = "Generator version: 7.7.0")
public class RoutingApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public RoutingApi() {
    this(new ApiClient());
  }

  public RoutingApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * 
   * Calculates a route by specifying a list of waypoints.
   * @param waypoints The list of waypoints the route will be calculated for. At least two waypoints are necessary, a maximum number may apply according to your subscription. The first waypoint is the start and the last is the destination of the route. Additional intermediate waypoints are possible.   The format of each waypoint is &#x60;&lt;lat&gt;,&lt;lon&gt;[;&lt;attribute&gt;;&lt;attribute&gt;;...]&#x60; representing a point with the latitude value in degrees from south to north and the longitude value in degrees (WGS84/EPSG:4326) from west to east. This point will be matched to the nearest possible road.   By default the air-line connection between given and matched coordinates is not included in the route polyline, distance and duration. We will refer to this type of waypoint as an _on-road waypoint_.  The behaviour of a waypoint can be changed by appending the following attributes:    * &#x60;includeLastMeters&#x60; to include the air-line connection between given and matched coordinates in the route polyline, distance and duration.  We will refer to this type of waypoint as an _off-road waypoint_.  * &#x60;roadAccess&#x3D;&lt;lat&gt;,&lt;lon&gt;&#x60;, to use these coordinates for matching to the nearest road. Implies **includeLastMeters**, i.e.  the air-line connection between the waypoint coordinates and the matched coordinates  is included in the route polyline, distance and duration. This is useful if the waypoint should not be matched to the nearest possible road but to some road further away,  e.g. garage exit at a different road.  * &#x60;matchSideOfStreet&#x60;, specifies that this waypoint will be reached at the side of street on which it is located.  This is useful to prevent the driver from crossing the street to actually reach the location represented by this waypoint.  * &#x60;radius&#x3D;&lt;distance&gt;&#x60;, influences the route course, so that the route passes an area defined by the given radius [m] (integer value).  This waypoint will not appear as a waypoint event in the response and may not be used as start and destination.  &#x60;radius&#x60; must be &gt; 0 and is not compatible with any other attribute on the same waypoint except for &#x60;name&#x60;.  We will refer to this type of waypoint as a _route-manipulation waypoint_.  * &#x60;name&#x3D;&lt;name of waypoint&gt;&#x60;, is an identifier to reference this waypoint in the response.  * In order to influence the route course so that the route uses a specific ferry or railway connection between two locations the waypoint is formatted as follows:  &#x60;combinedTransport&#x3D;&lt;lat&gt;,&lt;lon&gt;,&lt;lat&gt;,&lt;lon&gt;&#x60;. Both locations will be matched to the nearest ports looking for a direct connection.  If no connection can be found, this waypoint will be ignored, and the warning _ROUTING_COMBINED_TRANSPORT_WAYPOINT_IGNORED_ will be returned.  If more than one connection is found, the best one will be used,  and the alternative connections will be returned in the response in a warning _ROUTING_COMBINED_TRANSPORT_WAYPOINT_AMBIGUOUS_.  This waypoint will not appear as a waypoint event in the response and may not be used as start or destination.  We will refer to this type of waypoint as a _combined-transport waypoint_.   See [here](./concepts/waypoints) for more information. (optional)
   * @param routeId Instead of the waypoint mentioned above, a **routeId** from a previously calculated route or a matched track can be entered. More information and applying restrictions can be found [here](./concepts/waypoints). (optional)
   * @param profile A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](../data-api/concepts/profiles) such as _EUR_TRAILER_TRUCK_.  If this parameter is not specified and the first waypoint or the routeId is located in the Americas, _USA_8_SEMITRAILER_5AXLE_ is used as the default instead of _EUR_TRAILER_TRUCK_.  If the first waypoint or the routeId is located in the Americas but a non-American profile is specified or vice-versa, a warning is returned (routing only). Always use a profile which matches the region of the waypoints to obtain best results.  If the attributes of the profile do not fit to your vehicle, the values can be changed by the corresponding attributes in the **vehicle** parameter (routing only).  The values of the predefined profiles may be adapted to reflect current vehicle standards. To obtain the same results when values change, it is recommended to  always send with the request the **vehicle** parameters that are important for your use case. (optional, default to EUR_TRAILER_TRUCK)
   * @param vehicle Physical and legal properties of the vehicle such as its dimensions to override the values of the selected **profile**.  These parameters will be ignored for non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_. Unsupported parameters such as **electricityType** for combustion vehicles should not be specified in the request.  Use array notation like &#x60;vehicle[emissionStandard]&#x3D;EURO_5&#x60; to set vehicle attributes. (optional)
   * @param options Routing-relevant options like date of travel or the use of additional data. Use array notation like &#x60;options[trafficMode]&#x3D;AVERAGE&#x60; to set options. (optional)
   * @param emissionOptions Relevant options to report emissions. Use array notation like &#x60;emissionOptions[calculationMethods]&#x3D;ISO14083_2023&#x60; to set options.  This parameter supersedes emission-related values in **results**.  If specified the emission-related values in **results** will be ignored. (optional)
   * @param monetaryCostOptions Relevant options to report the monetary costs of a route when _MONETARY_COSTS_ are requested in the **results**. Used for monetary cost routing when **options[routingMode]&#x3D;MONETARY** is set. The costs have to be specified in the currency that is set in **options[currency]**. (optional)
   * @param results Comma-separated list that defines which results will be returned. _TOLL_COSTS_, _TOLL_SECTIONS_, _TOLL_SYSTEMS_ and _TOLL_EVENTS_ will be ignored for non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_. For electric vehicles and non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_ all emission values will be 0.  **Main results:**  * &#x60;ROUTE_ID&#x60;     Response includes the route ID. See [here](./concepts/waypoints) for more information.  * &#x60;POLYLINE&#x60;     Response includes the complete **polyline** of the entire route in the format specified by **options[polylineFormat]**.  * &#x60;LEGS&#x60;     Response includes information about the route **legs** defined as the parts of the route between two consecutive waypoints.  * &#x60;LEGS_POLYLINE&#x60;     Response includes the **polyline** of each of the **legs** in the format specified by **options[polylineFormat]**. _LEGS_ will automatically be included.  * &#x60;ALTERNATIVE_ROUTES&#x60;     Response includes up to three alternatives in addition to the optimal route. Only supported when exactly two on-road or off-road waypoints are specified. Please note that the additional calculations will degrade the performance.       Cannot be used with **options[routingMode]&#x3D;MONETARY**.  * &#x60;GUIDED_NAVIGATION&#x60;     Response includes the guided navigation information for the [PTV Navigator](https://www.myptv.com/en/logistics-software/ptv-navigator).       See [here](./concepts/guided-navigation) for more information.  * &#x60;MONETARY_COSTS&#x60;     Response includes a report with monetary costs for the route. See [here](./concepts/monetary-costs) for more information.  **Toll-related results:**  * &#x60;TOLL_COSTS&#x60;     Response includes the toll **costs** of the route.  * &#x60;TOLL_SECTIONS&#x60;     Response includes the list of toll **sections** defined by the toll operators.  * &#x60;TOLL_SYSTEMS&#x60;     Response includes the list of toll **systems** defined by the toll operators.  * &#x60;TOLL_EVENTS&#x60;     Response includes **events** when a toll road is entered, exited or a toll booth is passed.  **Events:**  * &#x60;MANEUVER_EVENTS&#x60;     Response includes **events** for a **maneuver** when the driver has to take an action, e.g. turn left or right.  * &#x60;BORDER_EVENTS&#x60;     Response includes **events** when a **border** of a country or subdivision is crossed by the route.  * &#x60;VIOLATION_EVENTS&#x60;     Response includes **events** when the route contains a **violation**, e.g. entering or exiting an area where passing with the current vehicle is prohibited.  * &#x60;VIOLATION_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each route violation. _VIOLATION_EVENTS_ will automatically be included.  * &#x60;WAYPOINT_EVENTS&#x60;     Response includes **events** when a **waypoint** is reached by the route.  * &#x60;UTC_OFFSET_CHANGE_EVENTS&#x60;     Response includes **events** when the offset to UTC changes (**utcOffsetChange**).  * &#x60;COMBINED_TRANSPORT_EVENTS&#x60;     Response includes **events** when a combined transport is entered or exited.  * &#x60;TRAFFIC_EVENTS&#x60;     Response includes **events** when a traffic incident such as a traffic jam is reached by the route.  * &#x60;TRAFFIC_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each traffic events. _TRAFFIC_EVENTS_ will automatically be included.  * &#x60;LOW_EMISSION_ZONE_EVENTS&#x60;      Response includes **events** when a low-emission zone is entered or exited by the route.  **Emission-related results:**  These results are superseded by the parameter **emissionOptions**.  If **emissionOptions** is specified the emission-related results will be ignored.  * &#x60;EMISSIONS_EN16258_2012&#x60;     Response includes information on **emissions** (**EN16258_2012**) calculated according to EN16258 from 2012 (a.k.a. CEN) based on the total fuel consumption for this route.     Only vehicles with **engineType** _COMBUSTION_ and **fuelType** _GASOLINE_, _DIESEL_, _COMPRESSED_NATURAL_GAS_ or _LIQUEFIED_PETROLEUM_GAS_ are supported.     For _GASOLINE_ and _DIESEL_, an arbitrary **bioFuelRatio** is supported.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).     It is mutually exclusive with **EMISSIONS_EN16258_2012_HBEFA**.  * &#x60;EMISSIONS_EN16258_2012_HBEFA&#x60;     Response includes information on **emissions** (**EN16258_2012**) calculated according to EN 16258 from 2012 (a.k.a. CEN) based on the total fuel consumption for this route     which is automatically calculated through HBEFA 4.2. The **averageFuelConsumption** will be ignored.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).     Supported vehicles are the same as those of _EMISSIONS_EN16258_2012_.     It is mutually exclusive with **EMISSIONS_EN16258_2012**.  * &#x60;EMISSIONS_ISO14083_2022&#x60;     Draft version of ISO 14083:2023. See **EMISSIONS_ISO14083_2023** for more information.  * &#x60;EMISSIONS_ISO14083_2022_DEFAULT_CONSUMPTION&#x60;     Draft version of ISO 14083:2023. See **EMISSIONS_ISO14083_2023_DEFAULT_CONSUMPTION** for more information.  * &#x60;EMISSIONS_ISO14083_2023&#x60;     Response includes information on **emissions** (**ISO14083_2023**) calculated according to ISO 14083:2023 (a.k.a. ISO) based on the total fuel and electricity consumption for this route.     Only supported for [European and American profiles](../data-api/concepts/profiles). Emissions are calculated using the respective factors.     All fuel and electricity types are supported, for _GASOLINE_ and _DIESEL_ an arbitrary **bioFuelRatio** is supported.     For **engineType** _HYBRID_ or **engineType** _COMBUSTION_ with **fuelType** _CNG_GASOLINE_ or _LPG_GASOLINE_, an arbitrary **hybridRatio** is supported.     It is mutually exclusive with all other ISO14083 calculations.  * &#x60;EMISSIONS_ISO14083_2023_DEFAULT_CONSUMPTION&#x60;     Response includes information on **emissions** (**ISO14083_2023**) calculated according to ISO 14083:2023 (a.k.a. ISO) for based on the default fuel and electricity consumption for this route     which is automatically calculated through HBEFA 4.2. The **averageFuelConsumption** and **averageElectricityConsumption** will be ignored.     Only supported for [European profiles](../data-api/concepts/profiles). Emissions are calculated using the European factors.     Supported vehicles are the same as those of _EMISSIONS_ISO14083_2023_.     It is mutually exclusive with all other ISO14083 calculations.  * &#x60;EMISSIONS_FRENCH_CO2E_DECREE_2017_639&#x60;     Response includes information on **emissions** (**French_CO2e_Decree_2017_639**) calculated according to the French CO2E decree from 2017 based on the total fuel consumption for this route.     Only vehicles with **engineType** _COMBUSTION_ and **fuelType** _GASOLINE_, _DIESEL_, _COMPRESSED_NATURAL_GAS_ or _LIQUEFIED_PETROLEUM_GAS_ are supported.     For _GASOLINE_ a **bioFuelRatio** of _0_, _10_ and _85_ is supported, for _DIESEL_ _0_ and _30_.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).  **Results available only in the POST operation:**  * &#x60;SCHEDULE_EVENTS&#x60;     Response includes **events** when the driver has to take a break or a rest, perform service or wait for a waypoint to open (**schedule**).  * &#x60;SCHEDULE_REPORT&#x60;     Response includes the **scheduleReport** which provides an overview of the times of the schedule of this route including break and rest times.  * &#x60;EV_REPORT&#x60;     Response includes a report with detailed electricity consumption for electric vehicles for the route and, if they are requested, for legs. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_STATUS_EVENTS&#x60;     Response includes events reporting the electricity consumption along the route in more detail. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_STATUS_EVENTS_POLYLINE&#x60;     Response includes the polyline for each **evStatus**-event since the previous **evStatus**-event. _EV_STATUS_EVENTS_ will automatically be included. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_CHARGE_EVENTS&#x60;     Response includes events proposing where the battery of the electric vehicle should be charged. The charging time is a proposal, currently for information only. It is not included in the travel time of the route and the start time of subsequent events is not offset by it. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future. (optional)
   * @return RouteResponse
   * @throws ApiException if fails to make API call
   */
  public RouteResponse calculateRoute(List<String> waypoints, UUID routeId, String profile, Vehicle vehicle, Options options, EmissionOptions emissionOptions, MonetaryCostOptions monetaryCostOptions, List<Results> results) throws ApiException {
    ApiResponse<RouteResponse> localVarResponse = calculateRouteWithHttpInfo(waypoints, routeId, profile, vehicle, options, emissionOptions, monetaryCostOptions, results);
    return localVarResponse.getData();
  }

  /**
   * 
   * Calculates a route by specifying a list of waypoints.
   * @param waypoints The list of waypoints the route will be calculated for. At least two waypoints are necessary, a maximum number may apply according to your subscription. The first waypoint is the start and the last is the destination of the route. Additional intermediate waypoints are possible.   The format of each waypoint is &#x60;&lt;lat&gt;,&lt;lon&gt;[;&lt;attribute&gt;;&lt;attribute&gt;;...]&#x60; representing a point with the latitude value in degrees from south to north and the longitude value in degrees (WGS84/EPSG:4326) from west to east. This point will be matched to the nearest possible road.   By default the air-line connection between given and matched coordinates is not included in the route polyline, distance and duration. We will refer to this type of waypoint as an _on-road waypoint_.  The behaviour of a waypoint can be changed by appending the following attributes:    * &#x60;includeLastMeters&#x60; to include the air-line connection between given and matched coordinates in the route polyline, distance and duration.  We will refer to this type of waypoint as an _off-road waypoint_.  * &#x60;roadAccess&#x3D;&lt;lat&gt;,&lt;lon&gt;&#x60;, to use these coordinates for matching to the nearest road. Implies **includeLastMeters**, i.e.  the air-line connection between the waypoint coordinates and the matched coordinates  is included in the route polyline, distance and duration. This is useful if the waypoint should not be matched to the nearest possible road but to some road further away,  e.g. garage exit at a different road.  * &#x60;matchSideOfStreet&#x60;, specifies that this waypoint will be reached at the side of street on which it is located.  This is useful to prevent the driver from crossing the street to actually reach the location represented by this waypoint.  * &#x60;radius&#x3D;&lt;distance&gt;&#x60;, influences the route course, so that the route passes an area defined by the given radius [m] (integer value).  This waypoint will not appear as a waypoint event in the response and may not be used as start and destination.  &#x60;radius&#x60; must be &gt; 0 and is not compatible with any other attribute on the same waypoint except for &#x60;name&#x60;.  We will refer to this type of waypoint as a _route-manipulation waypoint_.  * &#x60;name&#x3D;&lt;name of waypoint&gt;&#x60;, is an identifier to reference this waypoint in the response.  * In order to influence the route course so that the route uses a specific ferry or railway connection between two locations the waypoint is formatted as follows:  &#x60;combinedTransport&#x3D;&lt;lat&gt;,&lt;lon&gt;,&lt;lat&gt;,&lt;lon&gt;&#x60;. Both locations will be matched to the nearest ports looking for a direct connection.  If no connection can be found, this waypoint will be ignored, and the warning _ROUTING_COMBINED_TRANSPORT_WAYPOINT_IGNORED_ will be returned.  If more than one connection is found, the best one will be used,  and the alternative connections will be returned in the response in a warning _ROUTING_COMBINED_TRANSPORT_WAYPOINT_AMBIGUOUS_.  This waypoint will not appear as a waypoint event in the response and may not be used as start or destination.  We will refer to this type of waypoint as a _combined-transport waypoint_.   See [here](./concepts/waypoints) for more information. (optional)
   * @param routeId Instead of the waypoint mentioned above, a **routeId** from a previously calculated route or a matched track can be entered. More information and applying restrictions can be found [here](./concepts/waypoints). (optional)
   * @param profile A profile defines a vehicle by a set of attributes, matching typical transport situations. It must be the name of one of the [predefined profiles](../data-api/concepts/profiles) such as _EUR_TRAILER_TRUCK_.  If this parameter is not specified and the first waypoint or the routeId is located in the Americas, _USA_8_SEMITRAILER_5AXLE_ is used as the default instead of _EUR_TRAILER_TRUCK_.  If the first waypoint or the routeId is located in the Americas but a non-American profile is specified or vice-versa, a warning is returned (routing only). Always use a profile which matches the region of the waypoints to obtain best results.  If the attributes of the profile do not fit to your vehicle, the values can be changed by the corresponding attributes in the **vehicle** parameter (routing only).  The values of the predefined profiles may be adapted to reflect current vehicle standards. To obtain the same results when values change, it is recommended to  always send with the request the **vehicle** parameters that are important for your use case. (optional, default to EUR_TRAILER_TRUCK)
   * @param vehicle Physical and legal properties of the vehicle such as its dimensions to override the values of the selected **profile**.  These parameters will be ignored for non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_. Unsupported parameters such as **electricityType** for combustion vehicles should not be specified in the request.  Use array notation like &#x60;vehicle[emissionStandard]&#x3D;EURO_5&#x60; to set vehicle attributes. (optional)
   * @param options Routing-relevant options like date of travel or the use of additional data. Use array notation like &#x60;options[trafficMode]&#x3D;AVERAGE&#x60; to set options. (optional)
   * @param emissionOptions Relevant options to report emissions. Use array notation like &#x60;emissionOptions[calculationMethods]&#x3D;ISO14083_2023&#x60; to set options.  This parameter supersedes emission-related values in **results**.  If specified the emission-related values in **results** will be ignored. (optional)
   * @param monetaryCostOptions Relevant options to report the monetary costs of a route when _MONETARY_COSTS_ are requested in the **results**. Used for monetary cost routing when **options[routingMode]&#x3D;MONETARY** is set. The costs have to be specified in the currency that is set in **options[currency]**. (optional)
   * @param results Comma-separated list that defines which results will be returned. _TOLL_COSTS_, _TOLL_SECTIONS_, _TOLL_SYSTEMS_ and _TOLL_EVENTS_ will be ignored for non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_. For electric vehicles and non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_ all emission values will be 0.  **Main results:**  * &#x60;ROUTE_ID&#x60;     Response includes the route ID. See [here](./concepts/waypoints) for more information.  * &#x60;POLYLINE&#x60;     Response includes the complete **polyline** of the entire route in the format specified by **options[polylineFormat]**.  * &#x60;LEGS&#x60;     Response includes information about the route **legs** defined as the parts of the route between two consecutive waypoints.  * &#x60;LEGS_POLYLINE&#x60;     Response includes the **polyline** of each of the **legs** in the format specified by **options[polylineFormat]**. _LEGS_ will automatically be included.  * &#x60;ALTERNATIVE_ROUTES&#x60;     Response includes up to three alternatives in addition to the optimal route. Only supported when exactly two on-road or off-road waypoints are specified. Please note that the additional calculations will degrade the performance.       Cannot be used with **options[routingMode]&#x3D;MONETARY**.  * &#x60;GUIDED_NAVIGATION&#x60;     Response includes the guided navigation information for the [PTV Navigator](https://www.myptv.com/en/logistics-software/ptv-navigator).       See [here](./concepts/guided-navigation) for more information.  * &#x60;MONETARY_COSTS&#x60;     Response includes a report with monetary costs for the route. See [here](./concepts/monetary-costs) for more information.  **Toll-related results:**  * &#x60;TOLL_COSTS&#x60;     Response includes the toll **costs** of the route.  * &#x60;TOLL_SECTIONS&#x60;     Response includes the list of toll **sections** defined by the toll operators.  * &#x60;TOLL_SYSTEMS&#x60;     Response includes the list of toll **systems** defined by the toll operators.  * &#x60;TOLL_EVENTS&#x60;     Response includes **events** when a toll road is entered, exited or a toll booth is passed.  **Events:**  * &#x60;MANEUVER_EVENTS&#x60;     Response includes **events** for a **maneuver** when the driver has to take an action, e.g. turn left or right.  * &#x60;BORDER_EVENTS&#x60;     Response includes **events** when a **border** of a country or subdivision is crossed by the route.  * &#x60;VIOLATION_EVENTS&#x60;     Response includes **events** when the route contains a **violation**, e.g. entering or exiting an area where passing with the current vehicle is prohibited.  * &#x60;VIOLATION_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each route violation. _VIOLATION_EVENTS_ will automatically be included.  * &#x60;WAYPOINT_EVENTS&#x60;     Response includes **events** when a **waypoint** is reached by the route.  * &#x60;UTC_OFFSET_CHANGE_EVENTS&#x60;     Response includes **events** when the offset to UTC changes (**utcOffsetChange**).  * &#x60;COMBINED_TRANSPORT_EVENTS&#x60;     Response includes **events** when a combined transport is entered or exited.  * &#x60;TRAFFIC_EVENTS&#x60;     Response includes **events** when a traffic incident such as a traffic jam is reached by the route.  * &#x60;TRAFFIC_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each traffic events. _TRAFFIC_EVENTS_ will automatically be included.  * &#x60;LOW_EMISSION_ZONE_EVENTS&#x60;      Response includes **events** when a low-emission zone is entered or exited by the route.  **Emission-related results:**  These results are superseded by the parameter **emissionOptions**.  If **emissionOptions** is specified the emission-related results will be ignored.  * &#x60;EMISSIONS_EN16258_2012&#x60;     Response includes information on **emissions** (**EN16258_2012**) calculated according to EN16258 from 2012 (a.k.a. CEN) based on the total fuel consumption for this route.     Only vehicles with **engineType** _COMBUSTION_ and **fuelType** _GASOLINE_, _DIESEL_, _COMPRESSED_NATURAL_GAS_ or _LIQUEFIED_PETROLEUM_GAS_ are supported.     For _GASOLINE_ and _DIESEL_, an arbitrary **bioFuelRatio** is supported.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).     It is mutually exclusive with **EMISSIONS_EN16258_2012_HBEFA**.  * &#x60;EMISSIONS_EN16258_2012_HBEFA&#x60;     Response includes information on **emissions** (**EN16258_2012**) calculated according to EN 16258 from 2012 (a.k.a. CEN) based on the total fuel consumption for this route     which is automatically calculated through HBEFA 4.2. The **averageFuelConsumption** will be ignored.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).     Supported vehicles are the same as those of _EMISSIONS_EN16258_2012_.     It is mutually exclusive with **EMISSIONS_EN16258_2012**.  * &#x60;EMISSIONS_ISO14083_2022&#x60;     Draft version of ISO 14083:2023. See **EMISSIONS_ISO14083_2023** for more information.  * &#x60;EMISSIONS_ISO14083_2022_DEFAULT_CONSUMPTION&#x60;     Draft version of ISO 14083:2023. See **EMISSIONS_ISO14083_2023_DEFAULT_CONSUMPTION** for more information.  * &#x60;EMISSIONS_ISO14083_2023&#x60;     Response includes information on **emissions** (**ISO14083_2023**) calculated according to ISO 14083:2023 (a.k.a. ISO) based on the total fuel and electricity consumption for this route.     Only supported for [European and American profiles](../data-api/concepts/profiles). Emissions are calculated using the respective factors.     All fuel and electricity types are supported, for _GASOLINE_ and _DIESEL_ an arbitrary **bioFuelRatio** is supported.     For **engineType** _HYBRID_ or **engineType** _COMBUSTION_ with **fuelType** _CNG_GASOLINE_ or _LPG_GASOLINE_, an arbitrary **hybridRatio** is supported.     It is mutually exclusive with all other ISO14083 calculations.  * &#x60;EMISSIONS_ISO14083_2023_DEFAULT_CONSUMPTION&#x60;     Response includes information on **emissions** (**ISO14083_2023**) calculated according to ISO 14083:2023 (a.k.a. ISO) for based on the default fuel and electricity consumption for this route     which is automatically calculated through HBEFA 4.2. The **averageFuelConsumption** and **averageElectricityConsumption** will be ignored.     Only supported for [European profiles](../data-api/concepts/profiles). Emissions are calculated using the European factors.     Supported vehicles are the same as those of _EMISSIONS_ISO14083_2023_.     It is mutually exclusive with all other ISO14083 calculations.  * &#x60;EMISSIONS_FRENCH_CO2E_DECREE_2017_639&#x60;     Response includes information on **emissions** (**French_CO2e_Decree_2017_639**) calculated according to the French CO2E decree from 2017 based on the total fuel consumption for this route.     Only vehicles with **engineType** _COMBUSTION_ and **fuelType** _GASOLINE_, _DIESEL_, _COMPRESSED_NATURAL_GAS_ or _LIQUEFIED_PETROLEUM_GAS_ are supported.     For _GASOLINE_ a **bioFuelRatio** of _0_, _10_ and _85_ is supported, for _DIESEL_ _0_ and _30_.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).  **Results available only in the POST operation:**  * &#x60;SCHEDULE_EVENTS&#x60;     Response includes **events** when the driver has to take a break or a rest, perform service or wait for a waypoint to open (**schedule**).  * &#x60;SCHEDULE_REPORT&#x60;     Response includes the **scheduleReport** which provides an overview of the times of the schedule of this route including break and rest times.  * &#x60;EV_REPORT&#x60;     Response includes a report with detailed electricity consumption for electric vehicles for the route and, if they are requested, for legs. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_STATUS_EVENTS&#x60;     Response includes events reporting the electricity consumption along the route in more detail. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_STATUS_EVENTS_POLYLINE&#x60;     Response includes the polyline for each **evStatus**-event since the previous **evStatus**-event. _EV_STATUS_EVENTS_ will automatically be included. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_CHARGE_EVENTS&#x60;     Response includes events proposing where the battery of the electric vehicle should be charged. The charging time is a proposal, currently for information only. It is not included in the travel time of the route and the start time of subsequent events is not offset by it. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future. (optional)
   * @return ApiResponse&lt;RouteResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RouteResponse> calculateRouteWithHttpInfo(List<String> waypoints, UUID routeId, String profile, Vehicle vehicle, Options options, EmissionOptions emissionOptions, MonetaryCostOptions monetaryCostOptions, List<Results> results) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = calculateRouteRequestBuilder(waypoints, routeId, profile, vehicle, options, emissionOptions, monetaryCostOptions, results);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("calculateRoute", localVarResponse);
        }
        return new ApiResponse<RouteResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RouteResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder calculateRouteRequestBuilder(List<String> waypoints, UUID routeId, String profile, Vehicle vehicle, Options options, EmissionOptions emissionOptions, MonetaryCostOptions monetaryCostOptions, List<Results> results) throws ApiException {

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();
		localVarRequestBuilder.header("User-Agent","ptv-generated java client");

    String localVarPath = "/routes";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "waypoints";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("multi", "waypoints", waypoints));
    localVarQueryParameterBaseName = "routeId";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("routeId", routeId));
    localVarQueryParameterBaseName = "profile";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("profile", profile));
    localVarQueryParameterBaseName = "vehicle";
    if (vehicle != null) {
      String queryString = vehicle.toUrlQueryString("vehicle");
      if (!queryString.isBlank()) {
        localVarQueryStringJoiner.add(queryString);
      }
    }
    localVarQueryParameterBaseName = "options";
    if (options != null) {
      String queryString = options.toUrlQueryString("options");
      if (!queryString.isBlank()) {
        localVarQueryStringJoiner.add(queryString);
      }
    }
    localVarQueryParameterBaseName = "emissionOptions";
    if (emissionOptions != null) {
      String queryString = emissionOptions.toUrlQueryString("emissionOptions");
      if (!queryString.isBlank()) {
        localVarQueryStringJoiner.add(queryString);
      }
    }
    localVarQueryParameterBaseName = "monetaryCostOptions";
    if (monetaryCostOptions != null) {
      String queryString = monetaryCostOptions.toUrlQueryString("monetaryCostOptions");
      if (!queryString.isBlank()) {
        localVarQueryStringJoiner.add(queryString);
      }
    }
    localVarQueryParameterBaseName = "results";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("csv", "results", results));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 
   * Calculates a route by specifying a list of waypoints taking into account opening intervals and working hours.
   * @param routeRequest  (required)
   * @param profile A profile defines a vehicle by a set of attributes, matching typical transport situations. It must either be the name of one of the [predefined profiles](../data-api/concepts/profiles) such as _EUR_TRAILER_TRUCK_ or a UUID of a predefined [vehicle model](../data-api/code-samples/vehicle-models) from the Data API.  If this parameter is not specified and the first waypoint or the routeId is located in the Americas, _USA_8_SEMITRAILER_5AXLE_ is used as the default instead of _EUR_TRAILER_TRUCK_.  If the first waypoint or the routeId is located in the Americas but a non-American profile is specified or vice-versa, a warning is returned (routing only). Always use a profile which matches the region of the waypoints to obtain best results.  If a model of an electric vehicle is used, the electricity consumption of the concrete vehicle model can be calculated. Some parameters like **vehicle[engineType]** cannot be used with a model of an electric vehicle. Those parameters are automatically filled as applicable from the selected model.  Please refer to the [concept](./concepts/model-based-ev-consumption-calculation) to see specifically which parameters are not compatible. These vehicle model profiles are in a preview state, the API is stable, feature changes could be introduced in future.  If the attributes of the profile do not fit to your vehicle, the values can be changed by the corresponding attributes in the **vehicle** parameter (routing only).  The values of the predefined profiles may be adapted to reflect current vehicle standards. To obtain the same results when values change, it is recommended to  always send with the request the **vehicle** parameters that are important for your use case. (optional, default to EUR_TRAILER_TRUCK)
   * @param vehicle Physical and legal properties of the vehicle such as its dimensions to override the values of the selected **profile**.  These parameters will be ignored for non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_. Unsupported parameters such as **electricityType** for combustion vehicles should not be specified in the request.  Use array notation like &#x60;vehicle[emissionStandard]&#x3D;EURO_5&#x60; to set vehicle attributes. (optional)
   * @param driver Options regarding the driver&#39;s working hours. (optional)
   * @param options Routing-relevant options like date of travel or the use of additional data. Use array notation like &#x60;options[trafficMode]&#x3D;AVERAGE&#x60; to set options. (optional)
   * @param emissionOptions Relevant options to report emissions. Use array notation like &#x60;emissionOptions[calculationMethods]&#x3D;ISO14083_2023&#x60; to set options.  This parameter supersedes emission-related values in **results**.  If specified the emission-related values in **results** will be ignored. (optional)
   * @param monetaryCostOptions Relevant options to report the monetary costs of a route when _MONETARY_COSTS_ are requested in the **results**. Used for monetary cost routing when **options[routingMode]&#x3D;MONETARY** is set. The costs have to be specified in the currency that is set in **options[currency]**. (optional)
   * @param evOptions Relevant options to report the electricity consumption of an electric vehicle along a route when _EV_REPORT_, _EV_STATUS_EVENTS_, _EV_STATUS_EVENTS_POLYLINE_ or _EV_CHARGE_EVENTS_ are requested in the **results**. Use array notation like &#x60;evOptions[initialStateOfCharge]&#x3D;100&#x60; to set options.  This parameter is in a preview state, the API is stable, feature changes could be introduced in future. (optional)
   * @param results Comma-separated list that defines which results will be returned. _TOLL_COSTS_, _TOLL_SECTIONS_, _TOLL_SYSTEMS_ and _TOLL_EVENTS_ will be ignored for non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_. For electric vehicles and non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_ all emission values will be 0.  **Main results:**  * &#x60;ROUTE_ID&#x60;     Response includes the route ID. See [here](./concepts/waypoints) for more information.  * &#x60;POLYLINE&#x60;     Response includes the complete **polyline** of the entire route in the format specified by **options[polylineFormat]**.  * &#x60;LEGS&#x60;     Response includes information about the route **legs** defined as the parts of the route between two consecutive waypoints.  * &#x60;LEGS_POLYLINE&#x60;     Response includes the **polyline** of each of the **legs** in the format specified by **options[polylineFormat]**. _LEGS_ will automatically be included.  * &#x60;ALTERNATIVE_ROUTES&#x60;     Response includes up to three alternatives in addition to the optimal route. Only supported when exactly two on-road or off-road waypoints are specified. Please note that the additional calculations will degrade the performance.       Cannot be used with **options[routingMode]&#x3D;MONETARY**.  * &#x60;GUIDED_NAVIGATION&#x60;     Response includes the guided navigation information for the [PTV Navigator](https://www.myptv.com/en/logistics-software/ptv-navigator).       See [here](./concepts/guided-navigation) for more information.  * &#x60;MONETARY_COSTS&#x60;     Response includes a report with monetary costs for the route. See [here](./concepts/monetary-costs) for more information.  **Toll-related results:**  * &#x60;TOLL_COSTS&#x60;     Response includes the toll **costs** of the route.  * &#x60;TOLL_SECTIONS&#x60;     Response includes the list of toll **sections** defined by the toll operators.  * &#x60;TOLL_SYSTEMS&#x60;     Response includes the list of toll **systems** defined by the toll operators.  * &#x60;TOLL_EVENTS&#x60;     Response includes **events** when a toll road is entered, exited or a toll booth is passed.  **Events:**  * &#x60;MANEUVER_EVENTS&#x60;     Response includes **events** for a **maneuver** when the driver has to take an action, e.g. turn left or right.  * &#x60;BORDER_EVENTS&#x60;     Response includes **events** when a **border** of a country or subdivision is crossed by the route.  * &#x60;VIOLATION_EVENTS&#x60;     Response includes **events** when the route contains a **violation**, e.g. entering or exiting an area where passing with the current vehicle is prohibited.  * &#x60;VIOLATION_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each route violation. _VIOLATION_EVENTS_ will automatically be included.  * &#x60;WAYPOINT_EVENTS&#x60;     Response includes **events** when a **waypoint** is reached by the route.  * &#x60;UTC_OFFSET_CHANGE_EVENTS&#x60;     Response includes **events** when the offset to UTC changes (**utcOffsetChange**).  * &#x60;COMBINED_TRANSPORT_EVENTS&#x60;     Response includes **events** when a combined transport is entered or exited.  * &#x60;TRAFFIC_EVENTS&#x60;     Response includes **events** when a traffic incident such as a traffic jam is reached by the route.  * &#x60;TRAFFIC_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each traffic events. _TRAFFIC_EVENTS_ will automatically be included.  * &#x60;LOW_EMISSION_ZONE_EVENTS&#x60;      Response includes **events** when a low-emission zone is entered or exited by the route.  **Emission-related results:**  These results are superseded by the parameter **emissionOptions**.  If **emissionOptions** is specified the emission-related results will be ignored.  * &#x60;EMISSIONS_EN16258_2012&#x60;     Response includes information on **emissions** (**EN16258_2012**) calculated according to EN16258 from 2012 (a.k.a. CEN) based on the total fuel consumption for this route.     Only vehicles with **engineType** _COMBUSTION_ and **fuelType** _GASOLINE_, _DIESEL_, _COMPRESSED_NATURAL_GAS_ or _LIQUEFIED_PETROLEUM_GAS_ are supported.     For _GASOLINE_ and _DIESEL_, an arbitrary **bioFuelRatio** is supported.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).     It is mutually exclusive with **EMISSIONS_EN16258_2012_HBEFA**.  * &#x60;EMISSIONS_EN16258_2012_HBEFA&#x60;     Response includes information on **emissions** (**EN16258_2012**) calculated according to EN 16258 from 2012 (a.k.a. CEN) based on the total fuel consumption for this route     which is automatically calculated through HBEFA 4.2. The **averageFuelConsumption** will be ignored.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).     Supported vehicles are the same as those of _EMISSIONS_EN16258_2012_.     It is mutually exclusive with **EMISSIONS_EN16258_2012**.  * &#x60;EMISSIONS_ISO14083_2022&#x60;     Draft version of ISO 14083:2023. See **EMISSIONS_ISO14083_2023** for more information.  * &#x60;EMISSIONS_ISO14083_2022_DEFAULT_CONSUMPTION&#x60;     Draft version of ISO 14083:2023. See **EMISSIONS_ISO14083_2023_DEFAULT_CONSUMPTION** for more information.  * &#x60;EMISSIONS_ISO14083_2023&#x60;     Response includes information on **emissions** (**ISO14083_2023**) calculated according to ISO 14083:2023 (a.k.a. ISO) based on the total fuel and electricity consumption for this route.     Only supported for [European and American profiles](../data-api/concepts/profiles). Emissions are calculated using the respective factors.     All fuel and electricity types are supported, for _GASOLINE_ and _DIESEL_ an arbitrary **bioFuelRatio** is supported.     For **engineType** _HYBRID_ or **engineType** _COMBUSTION_ with **fuelType** _CNG_GASOLINE_ or _LPG_GASOLINE_, an arbitrary **hybridRatio** is supported.     It is mutually exclusive with all other ISO14083 calculations.  * &#x60;EMISSIONS_ISO14083_2023_DEFAULT_CONSUMPTION&#x60;     Response includes information on **emissions** (**ISO14083_2023**) calculated according to ISO 14083:2023 (a.k.a. ISO) for based on the default fuel and electricity consumption for this route     which is automatically calculated through HBEFA 4.2. The **averageFuelConsumption** and **averageElectricityConsumption** will be ignored.     Only supported for [European profiles](../data-api/concepts/profiles). Emissions are calculated using the European factors.     Supported vehicles are the same as those of _EMISSIONS_ISO14083_2023_.     It is mutually exclusive with all other ISO14083 calculations.  * &#x60;EMISSIONS_FRENCH_CO2E_DECREE_2017_639&#x60;     Response includes information on **emissions** (**French_CO2e_Decree_2017_639**) calculated according to the French CO2E decree from 2017 based on the total fuel consumption for this route.     Only vehicles with **engineType** _COMBUSTION_ and **fuelType** _GASOLINE_, _DIESEL_, _COMPRESSED_NATURAL_GAS_ or _LIQUEFIED_PETROLEUM_GAS_ are supported.     For _GASOLINE_ a **bioFuelRatio** of _0_, _10_ and _85_ is supported, for _DIESEL_ _0_ and _30_.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).  **Results available only in the POST operation:**  * &#x60;SCHEDULE_EVENTS&#x60;     Response includes **events** when the driver has to take a break or a rest, perform service or wait for a waypoint to open (**schedule**).  * &#x60;SCHEDULE_REPORT&#x60;     Response includes the **scheduleReport** which provides an overview of the times of the schedule of this route including break and rest times.  * &#x60;EV_REPORT&#x60;     Response includes a report with detailed electricity consumption for electric vehicles for the route and, if they are requested, for legs. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_STATUS_EVENTS&#x60;     Response includes events reporting the electricity consumption along the route in more detail. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_STATUS_EVENTS_POLYLINE&#x60;     Response includes the polyline for each **evStatus**-event since the previous **evStatus**-event. _EV_STATUS_EVENTS_ will automatically be included. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_CHARGE_EVENTS&#x60;     Response includes events proposing where the battery of the electric vehicle should be charged. The charging time is a proposal, currently for information only. It is not included in the travel time of the route and the start time of subsequent events is not offset by it. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future. (optional)
   * @return RouteResponse
   * @throws ApiException if fails to make API call
   */
  public RouteResponse calculateRoutePost(RouteRequest routeRequest, String profile, Vehicle vehicle, Driver driver, Options options, EmissionOptions emissionOptions, MonetaryCostOptions monetaryCostOptions, EvOptions evOptions, List<Results> results) throws ApiException {
    ApiResponse<RouteResponse> localVarResponse = calculateRoutePostWithHttpInfo(routeRequest, profile, vehicle, driver, options, emissionOptions, monetaryCostOptions, evOptions, results);
    return localVarResponse.getData();
  }

  /**
   * 
   * Calculates a route by specifying a list of waypoints taking into account opening intervals and working hours.
   * @param routeRequest  (required)
   * @param profile A profile defines a vehicle by a set of attributes, matching typical transport situations. It must either be the name of one of the [predefined profiles](../data-api/concepts/profiles) such as _EUR_TRAILER_TRUCK_ or a UUID of a predefined [vehicle model](../data-api/code-samples/vehicle-models) from the Data API.  If this parameter is not specified and the first waypoint or the routeId is located in the Americas, _USA_8_SEMITRAILER_5AXLE_ is used as the default instead of _EUR_TRAILER_TRUCK_.  If the first waypoint or the routeId is located in the Americas but a non-American profile is specified or vice-versa, a warning is returned (routing only). Always use a profile which matches the region of the waypoints to obtain best results.  If a model of an electric vehicle is used, the electricity consumption of the concrete vehicle model can be calculated. Some parameters like **vehicle[engineType]** cannot be used with a model of an electric vehicle. Those parameters are automatically filled as applicable from the selected model.  Please refer to the [concept](./concepts/model-based-ev-consumption-calculation) to see specifically which parameters are not compatible. These vehicle model profiles are in a preview state, the API is stable, feature changes could be introduced in future.  If the attributes of the profile do not fit to your vehicle, the values can be changed by the corresponding attributes in the **vehicle** parameter (routing only).  The values of the predefined profiles may be adapted to reflect current vehicle standards. To obtain the same results when values change, it is recommended to  always send with the request the **vehicle** parameters that are important for your use case. (optional, default to EUR_TRAILER_TRUCK)
   * @param vehicle Physical and legal properties of the vehicle such as its dimensions to override the values of the selected **profile**.  These parameters will be ignored for non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_. Unsupported parameters such as **electricityType** for combustion vehicles should not be specified in the request.  Use array notation like &#x60;vehicle[emissionStandard]&#x3D;EURO_5&#x60; to set vehicle attributes. (optional)
   * @param driver Options regarding the driver&#39;s working hours. (optional)
   * @param options Routing-relevant options like date of travel or the use of additional data. Use array notation like &#x60;options[trafficMode]&#x3D;AVERAGE&#x60; to set options. (optional)
   * @param emissionOptions Relevant options to report emissions. Use array notation like &#x60;emissionOptions[calculationMethods]&#x3D;ISO14083_2023&#x60; to set options.  This parameter supersedes emission-related values in **results**.  If specified the emission-related values in **results** will be ignored. (optional)
   * @param monetaryCostOptions Relevant options to report the monetary costs of a route when _MONETARY_COSTS_ are requested in the **results**. Used for monetary cost routing when **options[routingMode]&#x3D;MONETARY** is set. The costs have to be specified in the currency that is set in **options[currency]**. (optional)
   * @param evOptions Relevant options to report the electricity consumption of an electric vehicle along a route when _EV_REPORT_, _EV_STATUS_EVENTS_, _EV_STATUS_EVENTS_POLYLINE_ or _EV_CHARGE_EVENTS_ are requested in the **results**. Use array notation like &#x60;evOptions[initialStateOfCharge]&#x3D;100&#x60; to set options.  This parameter is in a preview state, the API is stable, feature changes could be introduced in future. (optional)
   * @param results Comma-separated list that defines which results will be returned. _TOLL_COSTS_, _TOLL_SECTIONS_, _TOLL_SYSTEMS_ and _TOLL_EVENTS_ will be ignored for non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_. For electric vehicles and non-motorized profiles such as _BICYCLE_ or _PEDESTRIAN_ all emission values will be 0.  **Main results:**  * &#x60;ROUTE_ID&#x60;     Response includes the route ID. See [here](./concepts/waypoints) for more information.  * &#x60;POLYLINE&#x60;     Response includes the complete **polyline** of the entire route in the format specified by **options[polylineFormat]**.  * &#x60;LEGS&#x60;     Response includes information about the route **legs** defined as the parts of the route between two consecutive waypoints.  * &#x60;LEGS_POLYLINE&#x60;     Response includes the **polyline** of each of the **legs** in the format specified by **options[polylineFormat]**. _LEGS_ will automatically be included.  * &#x60;ALTERNATIVE_ROUTES&#x60;     Response includes up to three alternatives in addition to the optimal route. Only supported when exactly two on-road or off-road waypoints are specified. Please note that the additional calculations will degrade the performance.       Cannot be used with **options[routingMode]&#x3D;MONETARY**.  * &#x60;GUIDED_NAVIGATION&#x60;     Response includes the guided navigation information for the [PTV Navigator](https://www.myptv.com/en/logistics-software/ptv-navigator).       See [here](./concepts/guided-navigation) for more information.  * &#x60;MONETARY_COSTS&#x60;     Response includes a report with monetary costs for the route. See [here](./concepts/monetary-costs) for more information.  **Toll-related results:**  * &#x60;TOLL_COSTS&#x60;     Response includes the toll **costs** of the route.  * &#x60;TOLL_SECTIONS&#x60;     Response includes the list of toll **sections** defined by the toll operators.  * &#x60;TOLL_SYSTEMS&#x60;     Response includes the list of toll **systems** defined by the toll operators.  * &#x60;TOLL_EVENTS&#x60;     Response includes **events** when a toll road is entered, exited or a toll booth is passed.  **Events:**  * &#x60;MANEUVER_EVENTS&#x60;     Response includes **events** for a **maneuver** when the driver has to take an action, e.g. turn left or right.  * &#x60;BORDER_EVENTS&#x60;     Response includes **events** when a **border** of a country or subdivision is crossed by the route.  * &#x60;VIOLATION_EVENTS&#x60;     Response includes **events** when the route contains a **violation**, e.g. entering or exiting an area where passing with the current vehicle is prohibited.  * &#x60;VIOLATION_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each route violation. _VIOLATION_EVENTS_ will automatically be included.  * &#x60;WAYPOINT_EVENTS&#x60;     Response includes **events** when a **waypoint** is reached by the route.  * &#x60;UTC_OFFSET_CHANGE_EVENTS&#x60;     Response includes **events** when the offset to UTC changes (**utcOffsetChange**).  * &#x60;COMBINED_TRANSPORT_EVENTS&#x60;     Response includes **events** when a combined transport is entered or exited.  * &#x60;TRAFFIC_EVENTS&#x60;     Response includes **events** when a traffic incident such as a traffic jam is reached by the route.  * &#x60;TRAFFIC_EVENTS_POLYLINE&#x60;     The response contains the **polyline** of each traffic events. _TRAFFIC_EVENTS_ will automatically be included.  * &#x60;LOW_EMISSION_ZONE_EVENTS&#x60;      Response includes **events** when a low-emission zone is entered or exited by the route.  **Emission-related results:**  These results are superseded by the parameter **emissionOptions**.  If **emissionOptions** is specified the emission-related results will be ignored.  * &#x60;EMISSIONS_EN16258_2012&#x60;     Response includes information on **emissions** (**EN16258_2012**) calculated according to EN16258 from 2012 (a.k.a. CEN) based on the total fuel consumption for this route.     Only vehicles with **engineType** _COMBUSTION_ and **fuelType** _GASOLINE_, _DIESEL_, _COMPRESSED_NATURAL_GAS_ or _LIQUEFIED_PETROLEUM_GAS_ are supported.     For _GASOLINE_ and _DIESEL_, an arbitrary **bioFuelRatio** is supported.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).     It is mutually exclusive with **EMISSIONS_EN16258_2012_HBEFA**.  * &#x60;EMISSIONS_EN16258_2012_HBEFA&#x60;     Response includes information on **emissions** (**EN16258_2012**) calculated according to EN 16258 from 2012 (a.k.a. CEN) based on the total fuel consumption for this route     which is automatically calculated through HBEFA 4.2. The **averageFuelConsumption** will be ignored.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).     Supported vehicles are the same as those of _EMISSIONS_EN16258_2012_.     It is mutually exclusive with **EMISSIONS_EN16258_2012**.  * &#x60;EMISSIONS_ISO14083_2022&#x60;     Draft version of ISO 14083:2023. See **EMISSIONS_ISO14083_2023** for more information.  * &#x60;EMISSIONS_ISO14083_2022_DEFAULT_CONSUMPTION&#x60;     Draft version of ISO 14083:2023. See **EMISSIONS_ISO14083_2023_DEFAULT_CONSUMPTION** for more information.  * &#x60;EMISSIONS_ISO14083_2023&#x60;     Response includes information on **emissions** (**ISO14083_2023**) calculated according to ISO 14083:2023 (a.k.a. ISO) based on the total fuel and electricity consumption for this route.     Only supported for [European and American profiles](../data-api/concepts/profiles). Emissions are calculated using the respective factors.     All fuel and electricity types are supported, for _GASOLINE_ and _DIESEL_ an arbitrary **bioFuelRatio** is supported.     For **engineType** _HYBRID_ or **engineType** _COMBUSTION_ with **fuelType** _CNG_GASOLINE_ or _LPG_GASOLINE_, an arbitrary **hybridRatio** is supported.     It is mutually exclusive with all other ISO14083 calculations.  * &#x60;EMISSIONS_ISO14083_2023_DEFAULT_CONSUMPTION&#x60;     Response includes information on **emissions** (**ISO14083_2023**) calculated according to ISO 14083:2023 (a.k.a. ISO) for based on the default fuel and electricity consumption for this route     which is automatically calculated through HBEFA 4.2. The **averageFuelConsumption** and **averageElectricityConsumption** will be ignored.     Only supported for [European profiles](../data-api/concepts/profiles). Emissions are calculated using the European factors.     Supported vehicles are the same as those of _EMISSIONS_ISO14083_2023_.     It is mutually exclusive with all other ISO14083 calculations.  * &#x60;EMISSIONS_FRENCH_CO2E_DECREE_2017_639&#x60;     Response includes information on **emissions** (**French_CO2e_Decree_2017_639**) calculated according to the French CO2E decree from 2017 based on the total fuel consumption for this route.     Only vehicles with **engineType** _COMBUSTION_ and **fuelType** _GASOLINE_, _DIESEL_, _COMPRESSED_NATURAL_GAS_ or _LIQUEFIED_PETROLEUM_GAS_ are supported.     For _GASOLINE_ a **bioFuelRatio** of _0_, _10_ and _85_ is supported, for _DIESEL_ _0_ and _30_.     This is a European emission calculation method which should only be used with [European profiles](../data-api/concepts/profiles).  **Results available only in the POST operation:**  * &#x60;SCHEDULE_EVENTS&#x60;     Response includes **events** when the driver has to take a break or a rest, perform service or wait for a waypoint to open (**schedule**).  * &#x60;SCHEDULE_REPORT&#x60;     Response includes the **scheduleReport** which provides an overview of the times of the schedule of this route including break and rest times.  * &#x60;EV_REPORT&#x60;     Response includes a report with detailed electricity consumption for electric vehicles for the route and, if they are requested, for legs. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_STATUS_EVENTS&#x60;     Response includes events reporting the electricity consumption along the route in more detail. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_STATUS_EVENTS_POLYLINE&#x60;     Response includes the polyline for each **evStatus**-event since the previous **evStatus**-event. _EV_STATUS_EVENTS_ will automatically be included. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future.  * &#x60;EV_CHARGE_EVENTS&#x60;     Response includes events proposing where the battery of the electric vehicle should be charged. The charging time is a proposal, currently for information only. It is not included in the travel time of the route and the start time of subsequent events is not offset by it. This is only available for concrete models of electric vehicles but not for general routing profiles (see documentation of **profile**). This result is in a preview state, the API is stable, feature changes could be introduced in future. (optional)
   * @return ApiResponse&lt;RouteResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RouteResponse> calculateRoutePostWithHttpInfo(RouteRequest routeRequest, String profile, Vehicle vehicle, Driver driver, Options options, EmissionOptions emissionOptions, MonetaryCostOptions monetaryCostOptions, EvOptions evOptions, List<Results> results) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = calculateRoutePostRequestBuilder(routeRequest, profile, vehicle, driver, options, emissionOptions, monetaryCostOptions, evOptions, results);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("calculateRoutePost", localVarResponse);
        }
        return new ApiResponse<RouteResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RouteResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder calculateRoutePostRequestBuilder(RouteRequest routeRequest, String profile, Vehicle vehicle, Driver driver, Options options, EmissionOptions emissionOptions, MonetaryCostOptions monetaryCostOptions, EvOptions evOptions, List<Results> results) throws ApiException {
    // verify the required parameter 'routeRequest' is set
    if (routeRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'routeRequest' when calling calculateRoutePost");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();
		localVarRequestBuilder.header("User-Agent","ptv-generated java client");

    String localVarPath = "/routes";

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "profile";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("profile", profile));
    localVarQueryParameterBaseName = "vehicle";
    if (vehicle != null) {
      String queryString = vehicle.toUrlQueryString("vehicle");
      if (!queryString.isBlank()) {
        localVarQueryStringJoiner.add(queryString);
      }
    }
    localVarQueryParameterBaseName = "driver";
    if (driver != null) {
      String queryString = driver.toUrlQueryString("driver");
      if (!queryString.isBlank()) {
        localVarQueryStringJoiner.add(queryString);
      }
    }
    localVarQueryParameterBaseName = "options";
    if (options != null) {
      String queryString = options.toUrlQueryString("options");
      if (!queryString.isBlank()) {
        localVarQueryStringJoiner.add(queryString);
      }
    }
    localVarQueryParameterBaseName = "emissionOptions";
    if (emissionOptions != null) {
      String queryString = emissionOptions.toUrlQueryString("emissionOptions");
      if (!queryString.isBlank()) {
        localVarQueryStringJoiner.add(queryString);
      }
    }
    localVarQueryParameterBaseName = "monetaryCostOptions";
    if (monetaryCostOptions != null) {
      String queryString = monetaryCostOptions.toUrlQueryString("monetaryCostOptions");
      if (!queryString.isBlank()) {
        localVarQueryStringJoiner.add(queryString);
      }
    }
    localVarQueryParameterBaseName = "evOptions";
    if (evOptions != null) {
      String queryString = evOptions.toUrlQueryString("evOptions");
      if (!queryString.isBlank()) {
        localVarQueryStringJoiner.add(queryString);
      }
    }
    localVarQueryParameterBaseName = "results";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("csv", "results", results));

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(routeRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 
   * Calculates the estimated time of arrival (ETA) based on a previously calculated route and the position of the vehicle.
   * @param routeId The route ID returned from a previous route calculation. See [here](./concepts/waypoints) for more information.  Make sure to assign unique names to all off-road and on-road waypoints in the request to obtain the route ID. Otherwise, the route ID cannot be used for ETA calculation because the waypoints cannot be identified. Furthermore, the route ID must not contain route-manipulation waypoints, combined-transport waypoints or vehicle parameters at waypoints.  (required)
   * @param waypoint  (optional)
   * @param position  (optional)
   * @param time Defines the time when the vehicle position was captured formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If not specified the current time will be used, i.e. the given position of the vehicle is its current position.  If the date-time string does not include an explicit offset to UTC, the time will be interpreted as the local time of the position of the vehicle. The date must not be before 1970-01-01T00:00:00+00:00 nor after 2037-12-31T23:59:59+00:00.  The response will contain the offset to UTC specified in the request, otherwise it will contain the offset to UTC of the position of the vehicle. For best results the time should be only several minutes in the past or in the future, otherwise live traffic will not be considered properly. (optional)
   * @param workLogbook  (optional)
   * @return EtaResponse
   * @throws ApiException if fails to make API call
   */
  public EtaResponse getEstimatedTimeOfArrival(UUID routeId, PositionAtWaypoint waypoint, PositionOnRoute position, OffsetDateTime time, WorkLogbook workLogbook) throws ApiException {
    ApiResponse<EtaResponse> localVarResponse = getEstimatedTimeOfArrivalWithHttpInfo(routeId, waypoint, position, time, workLogbook);
    return localVarResponse.getData();
  }

  /**
   * 
   * Calculates the estimated time of arrival (ETA) based on a previously calculated route and the position of the vehicle.
   * @param routeId The route ID returned from a previous route calculation. See [here](./concepts/waypoints) for more information.  Make sure to assign unique names to all off-road and on-road waypoints in the request to obtain the route ID. Otherwise, the route ID cannot be used for ETA calculation because the waypoints cannot be identified. Furthermore, the route ID must not contain route-manipulation waypoints, combined-transport waypoints or vehicle parameters at waypoints.  (required)
   * @param waypoint  (optional)
   * @param position  (optional)
   * @param time Defines the time when the vehicle position was captured formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). If not specified the current time will be used, i.e. the given position of the vehicle is its current position.  If the date-time string does not include an explicit offset to UTC, the time will be interpreted as the local time of the position of the vehicle. The date must not be before 1970-01-01T00:00:00+00:00 nor after 2037-12-31T23:59:59+00:00.  The response will contain the offset to UTC specified in the request, otherwise it will contain the offset to UTC of the position of the vehicle. For best results the time should be only several minutes in the past or in the future, otherwise live traffic will not be considered properly. (optional)
   * @param workLogbook  (optional)
   * @return ApiResponse&lt;EtaResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<EtaResponse> getEstimatedTimeOfArrivalWithHttpInfo(UUID routeId, PositionAtWaypoint waypoint, PositionOnRoute position, OffsetDateTime time, WorkLogbook workLogbook) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getEstimatedTimeOfArrivalRequestBuilder(routeId, waypoint, position, time, workLogbook);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getEstimatedTimeOfArrival", localVarResponse);
        }
        return new ApiResponse<EtaResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<EtaResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getEstimatedTimeOfArrivalRequestBuilder(UUID routeId, PositionAtWaypoint waypoint, PositionOnRoute position, OffsetDateTime time, WorkLogbook workLogbook) throws ApiException {
    // verify the required parameter 'routeId' is set
    if (routeId == null) {
      throw new ApiException(400, "Missing the required parameter 'routeId' when calling getEstimatedTimeOfArrival");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();
		localVarRequestBuilder.header("User-Agent","ptv-generated java client");

    String localVarPath = "/eta/{routeId}"
        .replace("{routeId}", ApiClient.urlEncode(routeId.toString()));

    List<Pair> localVarQueryParams = new ArrayList<>();
    StringJoiner localVarQueryStringJoiner = new StringJoiner("&");
    String localVarQueryParameterBaseName;
    localVarQueryParameterBaseName = "waypoint";
    if (waypoint != null) {
      String queryString = waypoint.toUrlQueryString("waypoint");
      if (!queryString.isBlank()) {
        localVarQueryStringJoiner.add(queryString);
      }
    }
    localVarQueryParameterBaseName = "position";
    if (position != null) {
      String queryString = position.toUrlQueryString("position");
      if (!queryString.isBlank()) {
        localVarQueryStringJoiner.add(queryString);
      }
    }
    localVarQueryParameterBaseName = "time";
    localVarQueryParams.addAll(ApiClient.parameterToPairs("time", time));
    localVarQueryParameterBaseName = "workLogbook";
    if (workLogbook != null) {
      String queryString = workLogbook.toUrlQueryString("workLogbook");
      if (!queryString.isBlank()) {
        localVarQueryStringJoiner.add(queryString);
      }
    }

    if (!localVarQueryParams.isEmpty() || localVarQueryStringJoiner.length() != 0) {
      StringJoiner queryJoiner = new StringJoiner("&");
      localVarQueryParams.forEach(p -> queryJoiner.add(p.getName() + '=' + p.getValue()));
      if (localVarQueryStringJoiner.length() != 0) {
        queryJoiner.add(localVarQueryStringJoiner.toString());
      }
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath + '?' + queryJoiner.toString()));
    } else {
      localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));
    }

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * 
   * Returns the route of a previously calculated route or an alternative route. The response will use the same parameters and contain all results of the previously calculated route. Although the route itself will be the same, other results might be slightly different such as the travel time or  toll costs. See [here](./concepts/waypoints) for more information.
   * @param routeId The route ID returned from a previous route calculation or alternative route. (required)
   * @return RouteResponse
   * @throws ApiException if fails to make API call
   */
  public RouteResponse getRouteByRouteId(UUID routeId) throws ApiException {
    ApiResponse<RouteResponse> localVarResponse = getRouteByRouteIdWithHttpInfo(routeId);
    return localVarResponse.getData();
  }

  /**
   * 
   * Returns the route of a previously calculated route or an alternative route. The response will use the same parameters and contain all results of the previously calculated route. Although the route itself will be the same, other results might be slightly different such as the travel time or  toll costs. See [here](./concepts/waypoints) for more information.
   * @param routeId The route ID returned from a previous route calculation or alternative route. (required)
   * @return ApiResponse&lt;RouteResponse&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<RouteResponse> getRouteByRouteIdWithHttpInfo(UUID routeId) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getRouteByRouteIdRequestBuilder(routeId);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getRouteByRouteId", localVarResponse);
        }
        return new ApiResponse<RouteResponse>(
          localVarResponse.statusCode(),
          localVarResponse.headers().map(),
          localVarResponse.body() == null ? null : memberVarObjectMapper.readValue(localVarResponse.body(), new TypeReference<RouteResponse>() {}) // closes the InputStream
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getRouteByRouteIdRequestBuilder(UUID routeId) throws ApiException {
    // verify the required parameter 'routeId' is set
    if (routeId == null) {
      throw new ApiException(400, "Missing the required parameter 'routeId' when calling getRouteByRouteId");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();
		localVarRequestBuilder.header("User-Agent","ptv-generated java client");

    String localVarPath = "/routes/{routeId}"
        .replace("{routeId}", ApiClient.urlEncode(routeId.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
