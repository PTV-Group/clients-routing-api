/*
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routing.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routing.model.ElectricityPrice;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.routing.ApiClient;
/**
 * Issued when the battery should be charged at a waypoint.  Requires _EV_CHARGE_EVENTS_ to be requested.
 */
@JsonPropertyOrder({
  ChargeEvent.JSON_PROPERTY_CHARGING_TIME,
  ChargeEvent.JSON_PROPERTY_ELECTRICITY_CHARGED,
  ChargeEvent.JSON_PROPERTY_PERCENTAGE_CHARGED,
  ChargeEvent.JSON_PROPERTY_COST
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-13T09:18:49.935887368Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class ChargeEvent {
  public static final String JSON_PROPERTY_CHARGING_TIME = "chargingTime";
  private Integer chargingTime;

  public static final String JSON_PROPERTY_ELECTRICITY_CHARGED = "electricityCharged";
  private Double electricityCharged;

  public static final String JSON_PROPERTY_PERCENTAGE_CHARGED = "percentageCharged";
  private Integer percentageCharged;

  public static final String JSON_PROPERTY_COST = "cost";
  private ElectricityPrice cost;

  public ChargeEvent() { 
  }

  public ChargeEvent chargingTime(Integer chargingTime) {
    this.chargingTime = chargingTime;
    return this;
  }

  /**
   * The time spent for charging the battery [s]. The charging time is a proposal, currently for information only. It is not included in the travel time of the route and the start time of subsequent events is not offset by it.
   * minimum: 1
   * @return chargingTime
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CHARGING_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getChargingTime() {
    return chargingTime;
  }


  @JsonProperty(JSON_PROPERTY_CHARGING_TIME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setChargingTime(Integer chargingTime) {
    this.chargingTime = chargingTime;
  }


  public ChargeEvent electricityCharged(Double electricityCharged) {
    this.electricityCharged = electricityCharged;
    return this;
  }

  /**
   * The amount of electricity charged [kWh].
   * minimum: 0
   * @return electricityCharged
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ELECTRICITY_CHARGED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Double getElectricityCharged() {
    return electricityCharged;
  }


  @JsonProperty(JSON_PROPERTY_ELECTRICITY_CHARGED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setElectricityCharged(Double electricityCharged) {
    this.electricityCharged = electricityCharged;
  }


  public ChargeEvent percentageCharged(Integer percentageCharged) {
    this.percentageCharged = percentageCharged;
    return this;
  }

  /**
   * The percentage of battery charged [%].
   * minimum: 1
   * @return percentageCharged
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_PERCENTAGE_CHARGED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getPercentageCharged() {
    return percentageCharged;
  }


  @JsonProperty(JSON_PROPERTY_PERCENTAGE_CHARGED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPercentageCharged(Integer percentageCharged) {
    this.percentageCharged = percentageCharged;
  }


  public ChargeEvent cost(ElectricityPrice cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Get cost
   * @return cost
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public ElectricityPrice getCost() {
    return cost;
  }


  @JsonProperty(JSON_PROPERTY_COST)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCost(ElectricityPrice cost) {
    this.cost = cost;
  }


  /**
   * Return true if this ChargeEvent object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ChargeEvent chargeEvent = (ChargeEvent) o;
    return Objects.equals(this.chargingTime, chargeEvent.chargingTime) &&
        Objects.equals(this.electricityCharged, chargeEvent.electricityCharged) &&
        Objects.equals(this.percentageCharged, chargeEvent.percentageCharged) &&
        Objects.equals(this.cost, chargeEvent.cost);
  }

  @Override
  public int hashCode() {
    return Objects.hash(chargingTime, electricityCharged, percentageCharged, cost);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ChargeEvent {\n");
    sb.append("    chargingTime: ").append(toIndentedString(chargingTime)).append("\n");
    sb.append("    electricityCharged: ").append(toIndentedString(electricityCharged)).append("\n");
    sb.append("    percentageCharged: ").append(toIndentedString(percentageCharged)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `chargingTime` to the URL query string
    if (getChargingTime() != null) {
      joiner.add(String.format("%schargingTime%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getChargingTime()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `electricityCharged` to the URL query string
    if (getElectricityCharged() != null) {
      joiner.add(String.format("%selectricityCharged%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getElectricityCharged()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `percentageCharged` to the URL query string
    if (getPercentageCharged() != null) {
      joiner.add(String.format("%spercentageCharged%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getPercentageCharged()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `cost` to the URL query string
    if (getCost() != null) {
      joiner.add(getCost().toUrlQueryString(prefix + "cost" + suffix));
    }

    return joiner.toString();
  }
}

