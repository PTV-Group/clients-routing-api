/*
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver's working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routing.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routing.model.Warning;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * The result of the reachable areas calculation.
 */
@ApiModel(description = "The result of the reachable areas calculation.")
@JsonPropertyOrder({
  ReachableAreas.JSON_PROPERTY_POLYGONS,
  ReachableAreas.JSON_PROPERTY_WARNINGS
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-03-07T09:48:51.311424Z[Etc/UTC]")
public class ReachableAreas {
  public static final String JSON_PROPERTY_POLYGONS = "polygons";
  private List<String> polygons = new ArrayList<>();

  public static final String JSON_PROPERTY_WARNINGS = "warnings";
  private List<Warning> warnings = null;

  public ReachableAreas() { 
  }

  public ReachableAreas polygons(List<String> polygons) {
    this.polygons = polygons;
    return this;
  }

  public ReachableAreas addPolygonsItem(String polygonsItem) {
    this.polygons.add(polygonsItem);
    return this;
  }

   /**
   * The list of polygons calculated for the specified horizons in GeoJson format. For each horizon there is a separate polygon at the same index.
   * @return polygons
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The list of polygons calculated for the specified horizons in GeoJson format. For each horizon there is a separate polygon at the same index.")
  @JsonProperty(JSON_PROPERTY_POLYGONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public List<String> getPolygons() {
    return polygons;
  }


  @JsonProperty(JSON_PROPERTY_POLYGONS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPolygons(List<String> polygons) {
    this.polygons = polygons;
  }


  public ReachableAreas warnings(List<Warning> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ReachableAreas addWarningsItem(Warning warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

   /**
   * A list of warnings concerning the validity of the result.
   * @return warnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A list of warnings concerning the validity of the result.")
  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public List<Warning> getWarnings() {
    return warnings;
  }


  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWarnings(List<Warning> warnings) {
    this.warnings = warnings;
  }


  /**
   * Return true if this ReachableAreas object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReachableAreas reachableAreas = (ReachableAreas) o;
    return Objects.equals(this.polygons, reachableAreas.polygons) &&
        Objects.equals(this.warnings, reachableAreas.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(polygons, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReachableAreas {\n");
    sb.append("    polygons: ").append(toIndentedString(polygons)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

