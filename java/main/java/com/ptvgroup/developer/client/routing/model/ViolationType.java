/*
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver's working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.16
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routing.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import io.swagger.annotations.ApiModel;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * The reason why the road or the schedule is violated.  * &#x60;PROHIBITED&#x60; - The violated road is prohibited in general for the current vehicle.    * &#x60;DELIVERY_ONLY&#x60; - The violated road is prohibited except for delivery reasons but delivery is disallowed for the cars and vans.    * &#x60;URBAN&#x60; - The violated road is prohibited because it is flagged as urban.    * &#x60;RESIDENTS_ONLY&#x60; - The violated road is prohibited because it is flagged as residents only for the current vehicle.    * &#x60;RESTRICTED_ACCESS&#x60; - A point with restricted access, e.g. a gate or a bollard was passed.    * &#x60;VEHICLE_PROPERTY&#x60; - The violated road is prohibited for the current vehicle due to a vehicle property such as the weight or height.    * &#x60;COMBINED_TRANSPORT&#x60; - The violated road is a boat(ferry) or rail (train or rail shuttle) connection prohibited for the current vehicle.  * &#x60;SCHEDULE&#x60; - The schedule is violated. The reasons can be found in **scheduleViolationTypes**.  * &#x60;BLOCKED_ROAD_BY_INTERSECTION&#x60; - The violated road has been blocked through **options[blockIntersectingRoads]**.
 */
public enum ViolationType {
  
  PROHIBITED("PROHIBITED"),
  
  DELIVERY_ONLY("DELIVERY_ONLY"),
  
  URBAN("URBAN"),
  
  RESIDENTS_ONLY("RESIDENTS_ONLY"),
  
  RESTRICTED_ACCESS("RESTRICTED_ACCESS"),
  
  VEHICLE_PROPERTY("VEHICLE_PROPERTY"),
  
  COMBINED_TRANSPORT("COMBINED_TRANSPORT"),
  
  SCHEDULE("SCHEDULE"),
  
  BLOCKED_ROAD_BY_INTERSECTION("BLOCKED_ROAD_BY_INTERSECTION");

  private String value;

  ViolationType(String value) {
    this.value = value;
  }

  @JsonValue
  public String getValue() {
    return value;
  }

  @Override
  public String toString() {
    return String.valueOf(value);
  }

  @JsonCreator
  public static ViolationType fromValue(String value) {
    for (ViolationType b : ViolationType.values()) {
      if (b.value.equals(value)) {
        return b;
      }
    }
    throw new IllegalArgumentException("Unexpected value '" + value + "'");
  }
}

