/*
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver's working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.20
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routing.model;

import java.util.Objects;
import java.util.Arrays;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


/**
 * Defines the accumulated driving, working and travel times since the last break or daily rest. For details see this [concept](./concepts/drivers-working-hours).
 */
@ApiModel(description = "Defines the accumulated driving, working and travel times since the last break or daily rest. For details see this [concept](./concepts/drivers-working-hours).")
@JsonPropertyOrder({
  WorkLogbook.JSON_PROPERTY_LAST_TIME_THE_DRIVER_WORKED,
  WorkLogbook.JSON_PROPERTY_ACCUMULATED_DRIVING_TIME_SINCE_LAST_BREAK,
  WorkLogbook.JSON_PROPERTY_ACCUMULATED_WORKING_TIME_SINCE_LAST_BREAK,
  WorkLogbook.JSON_PROPERTY_ACCUMULATED_DRIVING_TIME_SINCE_LAST_DAILY_REST,
  WorkLogbook.JSON_PROPERTY_ACCUMULATED_TRAVEL_TIME_SINCE_LAST_DAILY_REST
})
@javax.annotation.processing.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-08-31T08:11:59.671519Z[Etc/UTC]")
public class WorkLogbook {
  public static final String JSON_PROPERTY_LAST_TIME_THE_DRIVER_WORKED = "lastTimeTheDriverWorked";
  private OffsetDateTime lastTimeTheDriverWorked;

  public static final String JSON_PROPERTY_ACCUMULATED_DRIVING_TIME_SINCE_LAST_BREAK = "accumulatedDrivingTimeSinceLastBreak";
  private Integer accumulatedDrivingTimeSinceLastBreak = 0;

  public static final String JSON_PROPERTY_ACCUMULATED_WORKING_TIME_SINCE_LAST_BREAK = "accumulatedWorkingTimeSinceLastBreak";
  private Integer accumulatedWorkingTimeSinceLastBreak;

  public static final String JSON_PROPERTY_ACCUMULATED_DRIVING_TIME_SINCE_LAST_DAILY_REST = "accumulatedDrivingTimeSinceLastDailyRest";
  private Integer accumulatedDrivingTimeSinceLastDailyRest;

  public static final String JSON_PROPERTY_ACCUMULATED_TRAVEL_TIME_SINCE_LAST_DAILY_REST = "accumulatedTravelTimeSinceLastDailyRest";
  private Integer accumulatedTravelTimeSinceLastDailyRest;

  public WorkLogbook() { 
  }

  public WorkLogbook lastTimeTheDriverWorked(OffsetDateTime lastTimeTheDriverWorked) {
    this.lastTimeTheDriverWorked = lastTimeTheDriverWorked;
    return this;
  }

   /**
   * The last time the driver worked formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).   If the date-time string does not include an explicit offset to UTC, the time will be interpreted as the local time of the start waypoint. The date must not be before 1970-01-01T00:00:00+00:00 nor after 2037-12-31T23:59:59+00:00.   See [here](./concepts/date-and-time) for more information on the relevance of date and time.
   * @return lastTimeTheDriverWorked
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "2020-12-04T06:00Z", required = true, value = "The last time the driver worked formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).   If the date-time string does not include an explicit offset to UTC, the time will be interpreted as the local time of the start waypoint. The date must not be before 1970-01-01T00:00:00+00:00 nor after 2037-12-31T23:59:59+00:00.   See [here](./concepts/date-and-time) for more information on the relevance of date and time.")
  @JsonProperty(JSON_PROPERTY_LAST_TIME_THE_DRIVER_WORKED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)

  public OffsetDateTime getLastTimeTheDriverWorked() {
    return lastTimeTheDriverWorked;
  }


  @JsonProperty(JSON_PROPERTY_LAST_TIME_THE_DRIVER_WORKED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLastTimeTheDriverWorked(OffsetDateTime lastTimeTheDriverWorked) {
    this.lastTimeTheDriverWorked = lastTimeTheDriverWorked;
  }


  public WorkLogbook accumulatedDrivingTimeSinceLastBreak(Integer accumulatedDrivingTimeSinceLastBreak) {
    this.accumulatedDrivingTimeSinceLastBreak = accumulatedDrivingTimeSinceLastBreak;
    return this;
  }

   /**
   * Accumulated driving time since end of last break [s], this includes all time behind the wheel.   Values higher than the maximum driving time between breaks of the **workingHoursPreset** are capped and effectively equal to the value given by the preset. 
   * minimum: 0
   * @return accumulatedDrivingTimeSinceLastBreak
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Accumulated driving time since end of last break [s], this includes all time behind the wheel.   Values higher than the maximum driving time between breaks of the **workingHoursPreset** are capped and effectively equal to the value given by the preset. ")
  @JsonProperty(JSON_PROPERTY_ACCUMULATED_DRIVING_TIME_SINCE_LAST_BREAK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAccumulatedDrivingTimeSinceLastBreak() {
    return accumulatedDrivingTimeSinceLastBreak;
  }


  @JsonProperty(JSON_PROPERTY_ACCUMULATED_DRIVING_TIME_SINCE_LAST_BREAK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccumulatedDrivingTimeSinceLastBreak(Integer accumulatedDrivingTimeSinceLastBreak) {
    this.accumulatedDrivingTimeSinceLastBreak = accumulatedDrivingTimeSinceLastBreak;
  }


  public WorkLogbook accumulatedWorkingTimeSinceLastBreak(Integer accumulatedWorkingTimeSinceLastBreak) {
    this.accumulatedWorkingTimeSinceLastBreak = accumulatedWorkingTimeSinceLastBreak;
    return this;
  }

   /**
   * Accumulated working time since end of last break [s], this includes driving time, service time at depot and customers, and idle time if lower than working time threshold.     Values higher than the maximum working time between breaks of the **workingHoursPreset** are capped and effectively equal to the value given by the preset. May not be smaller than **accumulatedDrivingTimeSinceLastBreak** if the value is specified. If no other value is specified, the default value is 0. 
   * minimum: 0
   * @return accumulatedWorkingTimeSinceLastBreak
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Accumulated working time since end of last break [s], this includes driving time, service time at depot and customers, and idle time if lower than working time threshold.     Values higher than the maximum working time between breaks of the **workingHoursPreset** are capped and effectively equal to the value given by the preset. May not be smaller than **accumulatedDrivingTimeSinceLastBreak** if the value is specified. If no other value is specified, the default value is 0. ")
  @JsonProperty(JSON_PROPERTY_ACCUMULATED_WORKING_TIME_SINCE_LAST_BREAK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAccumulatedWorkingTimeSinceLastBreak() {
    return accumulatedWorkingTimeSinceLastBreak;
  }


  @JsonProperty(JSON_PROPERTY_ACCUMULATED_WORKING_TIME_SINCE_LAST_BREAK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccumulatedWorkingTimeSinceLastBreak(Integer accumulatedWorkingTimeSinceLastBreak) {
    this.accumulatedWorkingTimeSinceLastBreak = accumulatedWorkingTimeSinceLastBreak;
  }


  public WorkLogbook accumulatedDrivingTimeSinceLastDailyRest(Integer accumulatedDrivingTimeSinceLastDailyRest) {
    this.accumulatedDrivingTimeSinceLastDailyRest = accumulatedDrivingTimeSinceLastDailyRest;
    return this;
  }

   /**
   * Accumulated driving time since end of last daily rest [s], this includes all time behind the wheel.   Values higher than the maximum driving time between daily rests of the **workingHoursPreset** are capped and effectively equal to the value given by preset. May not be smaller than **accumulatedDrivingTimeSinceLastBreak** if the value is specified. If no other value is specified, the default value is 0. 
   * minimum: 0
   * @return accumulatedDrivingTimeSinceLastDailyRest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Accumulated driving time since end of last daily rest [s], this includes all time behind the wheel.   Values higher than the maximum driving time between daily rests of the **workingHoursPreset** are capped and effectively equal to the value given by preset. May not be smaller than **accumulatedDrivingTimeSinceLastBreak** if the value is specified. If no other value is specified, the default value is 0. ")
  @JsonProperty(JSON_PROPERTY_ACCUMULATED_DRIVING_TIME_SINCE_LAST_DAILY_REST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAccumulatedDrivingTimeSinceLastDailyRest() {
    return accumulatedDrivingTimeSinceLastDailyRest;
  }


  @JsonProperty(JSON_PROPERTY_ACCUMULATED_DRIVING_TIME_SINCE_LAST_DAILY_REST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccumulatedDrivingTimeSinceLastDailyRest(Integer accumulatedDrivingTimeSinceLastDailyRest) {
    this.accumulatedDrivingTimeSinceLastDailyRest = accumulatedDrivingTimeSinceLastDailyRest;
  }


  public WorkLogbook accumulatedTravelTimeSinceLastDailyRest(Integer accumulatedTravelTimeSinceLastDailyRest) {
    this.accumulatedTravelTimeSinceLastDailyRest = accumulatedTravelTimeSinceLastDailyRest;
    return this;
  }

   /**
   * Accumulated travel time since end of last daily rest [s], this includes all time since the last daily rest.   Values higher than maximum travel time between daily rests of the **workingHoursPreset** are capped and effectively equal to the value given by the preset. May not be smaller than **accumulatedWorkingTimeSinceLastBreak** or **accumulatedDrivingTimeSinceLastDailyRest** if the values are specified. If no other value is specified, the default value is 0. 
   * minimum: 0
   * @return accumulatedTravelTimeSinceLastDailyRest
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Accumulated travel time since end of last daily rest [s], this includes all time since the last daily rest.   Values higher than maximum travel time between daily rests of the **workingHoursPreset** are capped and effectively equal to the value given by the preset. May not be smaller than **accumulatedWorkingTimeSinceLastBreak** or **accumulatedDrivingTimeSinceLastDailyRest** if the values are specified. If no other value is specified, the default value is 0. ")
  @JsonProperty(JSON_PROPERTY_ACCUMULATED_TRAVEL_TIME_SINCE_LAST_DAILY_REST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)

  public Integer getAccumulatedTravelTimeSinceLastDailyRest() {
    return accumulatedTravelTimeSinceLastDailyRest;
  }


  @JsonProperty(JSON_PROPERTY_ACCUMULATED_TRAVEL_TIME_SINCE_LAST_DAILY_REST)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setAccumulatedTravelTimeSinceLastDailyRest(Integer accumulatedTravelTimeSinceLastDailyRest) {
    this.accumulatedTravelTimeSinceLastDailyRest = accumulatedTravelTimeSinceLastDailyRest;
  }


  /**
   * Return true if this WorkLogbook object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WorkLogbook workLogbook = (WorkLogbook) o;
    return Objects.equals(this.lastTimeTheDriverWorked, workLogbook.lastTimeTheDriverWorked) &&
        Objects.equals(this.accumulatedDrivingTimeSinceLastBreak, workLogbook.accumulatedDrivingTimeSinceLastBreak) &&
        Objects.equals(this.accumulatedWorkingTimeSinceLastBreak, workLogbook.accumulatedWorkingTimeSinceLastBreak) &&
        Objects.equals(this.accumulatedDrivingTimeSinceLastDailyRest, workLogbook.accumulatedDrivingTimeSinceLastDailyRest) &&
        Objects.equals(this.accumulatedTravelTimeSinceLastDailyRest, workLogbook.accumulatedTravelTimeSinceLastDailyRest);
  }

  @Override
  public int hashCode() {
    return Objects.hash(lastTimeTheDriverWorked, accumulatedDrivingTimeSinceLastBreak, accumulatedWorkingTimeSinceLastBreak, accumulatedDrivingTimeSinceLastDailyRest, accumulatedTravelTimeSinceLastDailyRest);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WorkLogbook {\n");
    sb.append("    lastTimeTheDriverWorked: ").append(toIndentedString(lastTimeTheDriverWorked)).append("\n");
    sb.append("    accumulatedDrivingTimeSinceLastBreak: ").append(toIndentedString(accumulatedDrivingTimeSinceLastBreak)).append("\n");
    sb.append("    accumulatedWorkingTimeSinceLastBreak: ").append(toIndentedString(accumulatedWorkingTimeSinceLastBreak)).append("\n");
    sb.append("    accumulatedDrivingTimeSinceLastDailyRest: ").append(toIndentedString(accumulatedDrivingTimeSinceLastDailyRest)).append("\n");
    sb.append("    accumulatedTravelTimeSinceLastDailyRest: ").append(toIndentedString(accumulatedTravelTimeSinceLastDailyRest)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

