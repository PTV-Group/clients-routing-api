/*
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers' working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.ptvgroup.developer.client.routing.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.ptvgroup.developer.client.routing.model.ReachableLocation;
import com.ptvgroup.developer.client.routing.model.Warning;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import com.ptvgroup.developer.client.routing.ApiClient;
/**
 * The results of a reachable locations calculation.
 */
@JsonPropertyOrder({
  ReachableLocations.JSON_PROPERTY_REACHABLE,
  ReachableLocations.JSON_PROPERTY_UNREACHABLE,
  ReachableLocations.JSON_PROPERTY_WARNINGS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-11-18T13:35:23.497749140Z[Etc/UTC]", comments = "Generator version: 7.8.0")
public class ReachableLocations {
  public static final String JSON_PROPERTY_REACHABLE = "reachable";
  private List<ReachableLocation> reachable = new ArrayList<>();

  public static final String JSON_PROPERTY_UNREACHABLE = "unreachable";
  private List<Integer> unreachable = new ArrayList<>();

  public static final String JSON_PROPERTY_WARNINGS = "warnings";
  private List<Warning> warnings = new ArrayList<>();

  public ReachableLocations() { 
  }

  public ReachableLocations reachable(List<ReachableLocation> reachable) {
    this.reachable = reachable;
    return this;
  }

  public ReachableLocations addReachableItem(ReachableLocation reachableItem) {
    if (this.reachable == null) {
      this.reachable = new ArrayList<>();
    }
    this.reachable.add(reachableItem);
    return this;
  }

  /**
   * Reachable locations ordered by distance or travel time (depending on the request **horizonType**).
   * @return reachable
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_REACHABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<ReachableLocation> getReachable() {
    return reachable;
  }


  @JsonProperty(JSON_PROPERTY_REACHABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReachable(List<ReachableLocation> reachable) {
    this.reachable = reachable;
  }


  public ReachableLocations unreachable(List<Integer> unreachable) {
    this.unreachable = unreachable;
    return this;
  }

  public ReachableLocations addUnreachableItem(Integer unreachableItem) {
    if (this.unreachable == null) {
      this.unreachable = new ArrayList<>();
    }
    this.unreachable.add(unreachableItem);
    return this;
  }

  /**
   * Indexes of the unreachable locations as given in the request locations.
   * @return unreachable
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_UNREACHABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Integer> getUnreachable() {
    return unreachable;
  }


  @JsonProperty(JSON_PROPERTY_UNREACHABLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUnreachable(List<Integer> unreachable) {
    this.unreachable = unreachable;
  }


  public ReachableLocations warnings(List<Warning> warnings) {
    this.warnings = warnings;
    return this;
  }

  public ReachableLocations addWarningsItem(Warning warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * A list of warnings concerning the validity of the result.
   * @return warnings
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<Warning> getWarnings() {
    return warnings;
  }


  @JsonProperty(JSON_PROPERTY_WARNINGS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setWarnings(List<Warning> warnings) {
    this.warnings = warnings;
  }


  /**
   * Return true if this ReachableLocations object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReachableLocations reachableLocations = (ReachableLocations) o;
    return Objects.equals(this.reachable, reachableLocations.reachable) &&
        Objects.equals(this.unreachable, reachableLocations.unreachable) &&
        Objects.equals(this.warnings, reachableLocations.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reachable, unreachable, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReachableLocations {\n");
    sb.append("    reachable: ").append(toIndentedString(reachable)).append("\n");
    sb.append("    unreachable: ").append(toIndentedString(unreachable)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `reachable` to the URL query string
    if (getReachable() != null) {
      for (int i = 0; i < getReachable().size(); i++) {
        if (getReachable().get(i) != null) {
          joiner.add(getReachable().get(i).toUrlQueryString(String.format("%sreachable%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    // add `unreachable` to the URL query string
    if (getUnreachable() != null) {
      for (int i = 0; i < getUnreachable().size(); i++) {
        joiner.add(String.format("%sunreachable%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getUnreachable().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `warnings` to the URL query string
    if (getWarnings() != null) {
      for (int i = 0; i < getWarnings().size(); i++) {
        if (getWarnings().get(i) != null) {
          joiner.add(getWarnings().get(i).toUrlQueryString(String.format("%swarnings%s%s", prefix, suffix,
          "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
    }

    return joiner.toString();
  }
}

