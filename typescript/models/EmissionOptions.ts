/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Iso14083EmissionFactorsVersion } from './Iso14083EmissionFactorsVersion';
import {
    Iso14083EmissionFactorsVersionFromJSON,
    Iso14083EmissionFactorsVersionFromJSONTyped,
    Iso14083EmissionFactorsVersionToJSON,
} from './Iso14083EmissionFactorsVersion';

/**
 * 
 * @export
 * @interface EmissionOptions
 */
export interface EmissionOptions {
    /**
     * Comma-separated list of the calculation method to be returned.
     * 
     * Available values are provided by type `EmissionCalculationMethod`:
     *  * `EN16258_2012`
     *     Emissions according to EN16258 from 2012 (a.k.a. CEN).
     *  * `ISO14083_2023`
     *     Emissions according to ISO 14083:2023 (a.k.a. ISO). 
     *     Only supported for [European and American profiles](../data-api/concepts/profiles).
     *     If **defaultConsumption** is true, only supported for [European profiles](../data-api/concepts/profiles).
     *  * `FRENCH_CO2E_DECREE_2017_639`
     *     Emissions according to the French CO2E decree from 2017.
     * @type {string}
     * @memberof EmissionOptions
     */
    calculationMethods: string | null;
    /**
     * If true, the fuel or electricity consumption is automatically calculated through HBEFA 4.2. 
     * Otherwise, the **averageFuelConsumption** or **averageElectricityConsumption** specified calculating the route represented by **routeId** will be considered.
     * Will be ignored for calculation method _FRENCH_CO2E_DECREE_2017_639_.
     * @type {boolean}
     * @memberof EmissionOptions
     */
    defaultConsumption?: boolean;
    /**
     * 
     * @type {Iso14083EmissionFactorsVersion}
     * @memberof EmissionOptions
     */
    iso14083EmissionFactorsVersion?: Iso14083EmissionFactorsVersion | null;
}

/**
 * Check if a given object implements the EmissionOptions interface.
 */
export function instanceOfEmissionOptions(value: object): value is EmissionOptions {
    if (!('calculationMethods' in value) || value['calculationMethods'] === undefined) return false;
    return true;
}

export function EmissionOptionsFromJSON(json: any): EmissionOptions {
    return EmissionOptionsFromJSONTyped(json, false);
}

export function EmissionOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmissionOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'calculationMethods': json['calculationMethods'],
        'defaultConsumption': json['defaultConsumption'] == null ? undefined : json['defaultConsumption'],
        'iso14083EmissionFactorsVersion': json['iso14083EmissionFactorsVersion'] == null ? undefined : Iso14083EmissionFactorsVersionFromJSON(json['iso14083EmissionFactorsVersion']),
    };
}

export function EmissionOptionsToJSON(value?: EmissionOptions | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'calculationMethods': value['calculationMethods'],
        'defaultConsumption': value['defaultConsumption'],
        'iso14083EmissionFactorsVersion': Iso14083EmissionFactorsVersionToJSON(value['iso14083EmissionFactorsVersion']),
    };
}

