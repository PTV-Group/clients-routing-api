/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { WeatherResponse } from './WeatherResponse';
import {
    WeatherResponseFromJSON,
    WeatherResponseFromJSONTyped,
    WeatherResponseToJSON,
} from './WeatherResponse';

/**
 * The consumption summary for the specified vehicle model including the weather used for consumption calculation. Only present if both _EV_REPORT_ and _LEGS_ is requested.
 * 
 * @export
 * @interface EvReportLeg
 */
export interface EvReportLeg {
    /**
     * The electricity consumption since the start of the leg [kWh].
     * @type {number}
     * @memberof EvReportLeg
     */
    electricityConsumption: number;
    /**
     * The remaining state of charge at the end of the leg [%]. May be below the defined minimum state of charge or even below zero, if the electricity consumption exceeds the available energy in the battery and charging is not possible before falling below zero.
     * @type {number}
     * @memberof EvReportLeg
     */
    batteryStateOfCharge: number;
    /**
     * 
     * @type {WeatherResponse}
     * @memberof EvReportLeg
     */
    weatherAtStart: WeatherResponse;
    /**
     * 
     * @type {WeatherResponse}
     * @memberof EvReportLeg
     */
    weatherAtEnd: WeatherResponse;
}

/**
 * Check if a given object implements the EvReportLeg interface.
 */
export function instanceOfEvReportLeg(value: object): value is EvReportLeg {
    if (!('electricityConsumption' in value) || value['electricityConsumption'] === undefined) return false;
    if (!('batteryStateOfCharge' in value) || value['batteryStateOfCharge'] === undefined) return false;
    if (!('weatherAtStart' in value) || value['weatherAtStart'] === undefined) return false;
    if (!('weatherAtEnd' in value) || value['weatherAtEnd'] === undefined) return false;
    return true;
}

export function EvReportLegFromJSON(json: any): EvReportLeg {
    return EvReportLegFromJSONTyped(json, false);
}

export function EvReportLegFromJSONTyped(json: any, ignoreDiscriminator: boolean): EvReportLeg {
    if (json == null) {
        return json;
    }
    return {
        
        'electricityConsumption': json['electricityConsumption'],
        'batteryStateOfCharge': json['batteryStateOfCharge'],
        'weatherAtStart': WeatherResponseFromJSON(json['weatherAtStart']),
        'weatherAtEnd': WeatherResponseFromJSON(json['weatherAtEnd']),
    };
}

export function EvReportLegToJSON(value?: EvReportLeg | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'electricityConsumption': value['electricityConsumption'],
        'batteryStateOfCharge': value['batteryStateOfCharge'],
        'weatherAtStart': WeatherResponseToJSON(value['weatherAtStart']),
        'weatherAtEnd': WeatherResponseToJSON(value['weatherAtEnd']),
    };
}

