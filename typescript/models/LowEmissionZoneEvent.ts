/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.25
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccessType } from './AccessType';
import {
    AccessTypeFromJSON,
    AccessTypeFromJSONTyped,
    AccessTypeToJSON,
} from './AccessType';

/**
 * Issued when the route passes a low-emission zone. Requires _LOW_EMISSION_ZONE_EVENTS_ to be requested.
 * @export
 * @interface LowEmissionZoneEvent
 */
export interface LowEmissionZoneEvent {
    /**
     * The name of the low-emission zone.
     * @type {string}
     * @memberof LowEmissionZoneEvent
     */
    name: string;
    /**
     * 
     * @type {AccessType}
     * @memberof LowEmissionZoneEvent
     */
    accessType: AccessType;
    /**
     * For **accessType** _ENTER_ this index points to the corresponding event with **accessType** _EXIT_ and vice-versa. Not present otherwise.
     * @type {number}
     * @memberof LowEmissionZoneEvent
     */
    relatedEventIndex?: number;
}

/**
 * Check if a given object implements the LowEmissionZoneEvent interface.
 */
export function instanceOfLowEmissionZoneEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "accessType" in value;

    return isInstance;
}

export function LowEmissionZoneEventFromJSON(json: any): LowEmissionZoneEvent {
    return LowEmissionZoneEventFromJSONTyped(json, false);
}

export function LowEmissionZoneEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): LowEmissionZoneEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'accessType': AccessTypeFromJSON(json['accessType']),
        'relatedEventIndex': !exists(json, 'relatedEventIndex') ? undefined : json['relatedEventIndex'],
    };
}

export function LowEmissionZoneEventToJSON(value?: LowEmissionZoneEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'accessType': AccessTypeToJSON(value.accessType),
        'relatedEventIndex': value.relatedEventIndex,
    };
}

