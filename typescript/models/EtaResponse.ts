/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { RemainingWaypoint } from './RemainingWaypoint';
import {
    RemainingWaypointFromJSON,
    RemainingWaypointFromJSONTyped,
    RemainingWaypointToJSON,
} from './RemainingWaypoint';
import type { Warning } from './Warning';
import {
    WarningFromJSON,
    WarningFromJSONTyped,
    WarningToJSON,
} from './Warning';

/**
 * The response of an ETA calculation.
 * @export
 * @interface EtaResponse
 */
export interface EtaResponse {
    /**
     * The ETA and the remaining distance and travel time to the waypoints not yet reached by the route.
     * @type {Array<RemainingWaypoint>}
     * @memberof EtaResponse
     */
    remainingWaypoints: Array<RemainingWaypoint>;
    /**
     * If the route has been recalculated, this is the ID of the new route.
     * That will happen when it is likely that the vehicle has left the route, so the vehicle position is too far away from the route,
     * or when the estimated time of arrival at the last waypoint is delayed in a way that another route may result in arriving earlier.
     * @type {string}
     * @memberof EtaResponse
     */
    routeId?: string;
    /**
     * A list of warnings concerning the validity of the result.
     * @type {Array<Warning>}
     * @memberof EtaResponse
     */
    warnings?: Array<Warning>;
}

/**
 * Check if a given object implements the EtaResponse interface.
 */
export function instanceOfEtaResponse(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "remainingWaypoints" in value;

    return isInstance;
}

export function EtaResponseFromJSON(json: any): EtaResponse {
    return EtaResponseFromJSONTyped(json, false);
}

export function EtaResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): EtaResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'remainingWaypoints': ((json['remainingWaypoints'] as Array<any>).map(RemainingWaypointFromJSON)),
        'routeId': !exists(json, 'routeId') ? undefined : json['routeId'],
        'warnings': !exists(json, 'warnings') ? undefined : ((json['warnings'] as Array<any>).map(WarningFromJSON)),
    };
}

export function EtaResponseToJSON(value?: EtaResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'remainingWaypoints': ((value.remainingWaypoints as Array<any>).map(RemainingWaypointToJSON)),
        'routeId': value.routeId,
        'warnings': value.warnings === undefined ? undefined : ((value.warnings as Array<any>).map(WarningToJSON)),
    };
}

