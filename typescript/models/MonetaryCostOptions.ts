/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, drivers\' working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.33
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface MonetaryCostOptions
 */
export interface MonetaryCostOptions {
    /**
     * Specifies the cost per kilometer. This value can contain the cost from the energy consumption, but it also
     * possible to define the energy costs using **monetaryCostOptions[costPerKwh]** and **monetaryCostOptions[costPerFuelUnit]**.
     * If it is not specified the default value depends on the used **profile**. The default value of the profile can change at any time.
     * @type {number}
     * @memberof MonetaryCostOptions
     */
    costPerKilometer?: number;
    /**
     * Specifies the cost per hour. It is not applied to service, break or rest periods.
     * If it is not specified the default value depends on the used **profile**. The default value of the profile can change at any time.
     * @type {number}
     * @memberof MonetaryCostOptions
     */
    workingCostPerHour?: number;
    /**
     * Specifies the cost per kilowatt hour. Only relevant for **vehicle[engineType]** _ELECTRIC_ and _HYBRID_.
     * @type {number}
     * @memberof MonetaryCostOptions
     */
    costPerKwh?: number;
    /**
     * Specifies the cost per fuel unit (per liter Diesel or per kg CNG). Only used for **vehicle[engineType]** _COMBUSTION_ and _HYBRID_.
     * @type {number}
     * @memberof MonetaryCostOptions
     */
    costPerFuelUnit?: number;
}

/**
 * Check if a given object implements the MonetaryCostOptions interface.
 */
export function instanceOfMonetaryCostOptions(value: object): value is MonetaryCostOptions {
    return true;
}

export function MonetaryCostOptionsFromJSON(json: any): MonetaryCostOptions {
    return MonetaryCostOptionsFromJSONTyped(json, false);
}

export function MonetaryCostOptionsFromJSONTyped(json: any, ignoreDiscriminator: boolean): MonetaryCostOptions {
    if (json == null) {
        return json;
    }
    return {
        
        'costPerKilometer': json['costPerKilometer'] == null ? undefined : json['costPerKilometer'],
        'workingCostPerHour': json['workingCostPerHour'] == null ? undefined : json['workingCostPerHour'],
        'costPerKwh': json['costPerKwh'] == null ? undefined : json['costPerKwh'],
        'costPerFuelUnit': json['costPerFuelUnit'] == null ? undefined : json['costPerFuelUnit'],
    };
}

export function MonetaryCostOptionsToJSON(value?: MonetaryCostOptions | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'costPerKilometer': value['costPerKilometer'],
        'workingCostPerHour': value['workingCostPerHour'],
        'costPerKwh': value['costPerKwh'],
        'costPerFuelUnit': value['costPerFuelUnit'],
    };
}

