/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.29
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ElectricityPrice } from './ElectricityPrice';
import {
    ElectricityPriceFromJSON,
    ElectricityPriceFromJSONTyped,
    ElectricityPriceToJSON,
} from './ElectricityPrice';

/**
 * Issued when the battery should be charged at a waypoint. 
 * Requires _EV_CHARGE_EVENTS_ to be requested.
 * @export
 * @interface ChargeEvent
 */
export interface ChargeEvent {
    /**
     * The time spent for charging the battery [s]. The charging time is a proposal, currently for information only. It is not included in the travel time of the route and the start time of subsequent events is not offset by it.
     * @type {number}
     * @memberof ChargeEvent
     */
    chargingTime: number;
    /**
     * The amount of electricity charged [kWh].
     * @type {number}
     * @memberof ChargeEvent
     */
    electricityCharged: number;
    /**
     * The percentage of battery charged [%].
     * @type {number}
     * @memberof ChargeEvent
     */
    percentageCharged: number;
    /**
     * 
     * @type {ElectricityPrice}
     * @memberof ChargeEvent
     */
    cost: ElectricityPrice;
}

/**
 * Check if a given object implements the ChargeEvent interface.
 */
export function instanceOfChargeEvent(value: object): value is ChargeEvent {
    if (!('chargingTime' in value) || value['chargingTime'] === undefined) return false;
    if (!('electricityCharged' in value) || value['electricityCharged'] === undefined) return false;
    if (!('percentageCharged' in value) || value['percentageCharged'] === undefined) return false;
    if (!('cost' in value) || value['cost'] === undefined) return false;
    return true;
}

export function ChargeEventFromJSON(json: any): ChargeEvent {
    return ChargeEventFromJSONTyped(json, false);
}

export function ChargeEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChargeEvent {
    if (json == null) {
        return json;
    }
    return {
        
        'chargingTime': json['chargingTime'],
        'electricityCharged': json['electricityCharged'],
        'percentageCharged': json['percentageCharged'],
        'cost': ElectricityPriceFromJSON(json['cost']),
    };
}

export function ChargeEventToJSON(value?: ChargeEvent | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'chargingTime': value['chargingTime'],
        'electricityCharged': value['electricityCharged'],
        'percentageCharged': value['percentageCharged'],
        'cost': ElectricityPriceToJSON(value['cost']),
    };
}

