/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ElectricityType } from './ElectricityType';
import {
    ElectricityTypeFromJSON,
    ElectricityTypeFromJSONTyped,
    ElectricityTypeToJSON,
} from './ElectricityType';
import type { EmissionStandard } from './EmissionStandard';
import {
    EmissionStandardFromJSON,
    EmissionStandardFromJSONTyped,
    EmissionStandardToJSON,
} from './EmissionStandard';
import type { EngineType } from './EngineType';
import {
    EngineTypeFromJSON,
    EngineTypeFromJSONTyped,
    EngineTypeToJSON,
} from './EngineType';
import type { FuelType } from './FuelType';
import {
    FuelTypeFromJSON,
    FuelTypeFromJSONTyped,
    FuelTypeToJSON,
} from './FuelType';
import type { ParticleReductionClass } from './ParticleReductionClass';
import {
    ParticleReductionClassFromJSON,
    ParticleReductionClassFromJSONTyped,
    ParticleReductionClassToJSON,
} from './ParticleReductionClass';
import type { TunnelRestrictionCode } from './TunnelRestrictionCode';
import {
    TunnelRestrictionCodeFromJSON,
    TunnelRestrictionCodeFromJSONTyped,
    TunnelRestrictionCodeToJSON,
} from './TunnelRestrictionCode';

/**
 * 
 * @export
 * @interface Vehicle
 */
export interface Vehicle {
    /**
     * 
     * @type {EngineType}
     * @memberof Vehicle
     */
    engineType?: EngineType | null;
    /**
     * 
     * @type {FuelType}
     * @memberof Vehicle
     */
    fuelType?: FuelType | null;
    /**
     * 
     * @type {ElectricityType}
     * @memberof Vehicle
     */
    electricityType?: ElectricityType | null;
    /**
     * The average fuel consumption of the vehicle.
     * Depending on the **fuelType** [l/100km] for liquid fuel types or [kg/100km] for gaseous fuel types.
     * 
     * Supported for **engineType** _COMBUSTION_  or _HYBRID_. Relevant for `emissions`.
     * @type {number}
     * @memberof Vehicle
     */
    averageFuelConsumption?: number | null;
    /**
     * The average power consumption of the vehicle [kWh/100km].
     * 
     * Supported for **engineType** _ELECTRIC_ or _HYBRID_. Relevant for `emissions`.
     * @type {number}
     * @memberof Vehicle
     */
    averageElectricityConsumption?: number | null;
    /**
     * The ratio of biofuel to conventional fuel [%], i.e. 10 for E10 with 10% biofuel.
     * 
     * Supported for **engineType** _COMBUSTION_ or _HYBRID_ and only for the fuel types _GASOLINE_, _DIESEL_, _CNG_GASOLINE_ and _LNG_GASOLINE_.
     * Relevant for `emissions`.
     * @type {number}
     * @memberof Vehicle
     */
    bioFuelRatio?: number | null;
    /**
     * Electric energy usage ratio from the total amount of energy consumed by the vehicle.
     * 
     * Supported for **engineType** _HYBRID_. Relevant for `emissions`.
     * @type {number}
     * @memberof Vehicle
     */
    hybridRatio?: number | null;
    /**
     * Ratio of CNG or LPG usage from the total amount of fuel consumption.
     * 
     * Supported for **engineType** _COMBUSTION_ with **fuelType**  _CNG_GASOLINE_ or _LPG_GASOLINE_. Relevant for `emissions`.
     * @type {number}
     * @memberof Vehicle
     */
    dualFuelRatio?: number | null;
    /**
     * The cylinder capacity of the vehicle [cm&#x00B3;]. This value is present for compatibility reasons and does not influence
     * any of the results.
     * 
     * Supported for **engineType** _COMBUSTION_ or _HYBRID_.
     * @type {number}
     * @memberof Vehicle
     */
    cylinderCapacity?: number | null;
    /**
     * 
     * @type {EmissionStandard}
     * @memberof Vehicle
     */
    emissionStandard?: EmissionStandard | null;
    /**
     * The CO&#8322; emission class valid in the European Union. See also the 
     * [Directive 1999/62/EC](https://eur-lex.europa.eu/eli/dir/1999/62) of the European Parliament and of the 
     * Council on the charging of heavy goods vehicles for the use of certain infrastructures, article 7ga.
     * 
     * Relevant for `toll`.
     * @type {number}
     * @memberof Vehicle
     */
    co2EmissionClass?: number | null;
    /**
     * Comma-separated list of the low-emission zone types of the vehicle.
     * For now, types are available only for Germany, so using more than one value is not meaningful.
     * 
     * Available values are provided by type `LowEmissionZoneTypes`: "DE_GREEN" "DE_YELLOW" "DE_RED" "DE_NONE" 
     * 
     * Relevant for `routing`.
     * @type {string}
     * @memberof Vehicle
     */
    lowEmissionZoneTypes?: string | null;
    /**
     * 
     * @type {ParticleReductionClass}
     * @memberof Vehicle
     */
    particleReductionClass?: ParticleReductionClass | null;
    /**
     * The empty weight of the vehicle [kg].
     * 
     * Relevant for `routing`, `emissions`.
     * @type {number}
     * @memberof Vehicle
     */
    emptyWeight?: number | null;
    /**
     * The weight of the vehicle's load [kg].
     * 
     * Relevant for `routing`, `emissions`.
     * @type {number}
     * @memberof Vehicle
     */
    loadWeight?: number | null;
    /**
     * The total permitted weight of the vehicle and load [kg].
     * 
     * Relevant for `routing`, `toll`, `emissions`.
     * @type {number}
     * @memberof Vehicle
     */
    totalPermittedWeight?: number | null;
    /**
     * The maximum distributed weight that may be supported by an axle of the vehicle [kg].
     * 
     * Relevant for `routing`, `toll`.
     * @type {number}
     * @memberof Vehicle
     */
    axleWeight?: number | null;
    /**
     * The total number of axles of the vehicle including the trailers.
     * 
     * Relevant for `toll`.
     * @type {number}
     * @memberof Vehicle
     */
    numberOfAxles?: number | null;
    /**
     * The total number of tires of the vehicle including the trailers.
     * 
     * Relevant for `toll`.
     * @type {number}
     * @memberof Vehicle
     */
    numberOfTires?: number | null;
    /**
     * The height of the vehicle [cm].
     * 
     * Relevant for `routing`, `toll`.
     * @type {number}
     * @memberof Vehicle
     */
    height?: number | null;
    /**
     * The height above the front axle [cm].
     * 
     * Relevant for `toll`.
     * @type {number}
     * @memberof Vehicle
     */
    heightAboveFrontAxle?: number | null;
    /**
     * The length of the vehicle [cm].
     * 
     * Relevant for `routing`, `toll`.
     * @type {number}
     * @memberof Vehicle
     */
    length?: number | null;
    /**
     * The width of the vehicle [cm].
     * 
     * Relevant for `routing`, `toll`.
     * @type {number}
     * @memberof Vehicle
     */
    width?: number | null;
    /**
     * Comma-separated list of hazardous materials the vehicle has loaded. If _NONE_ is specified along with
     * other hazardous materials it is ignored. Depending on the load the route will avoid roads prohibited
     * for and/or prefer roads prescribed for specific hazardous materials.
     * 
     * Available values are provided by type `HazardousMaterials`: "HAZARDOUS_TO_WATER" "EXPLOSIVE" "FLAMMABLE" "RADIOACTIVE" "INHALATION_HAZARD" "MEDICAL_WASTE" "OTHER" "NONE"
     * 
     * Relevant for `routing`.
     * @type {string}
     * @memberof Vehicle
     */
    hazardousMaterials?: string | null;
    /**
     * 
     * @type {TunnelRestrictionCode}
     * @memberof Vehicle
     */
    tunnelRestrictionCode?: TunnelRestrictionCode | null;
    /**
     * Comma-separated list of truck routes the vehicle has to follow.
     * This parameter will be ignored for non-truck profiles such as EUR_CAR, EUR_VAN, USA_1_PICKUP or AUS_LCV_LIGHT_COMMERCIAL.
     *  * `DE_LKWUEBERLSTVAUSNV`
     *  Preferred routes for long trucks in Germany, also known as Lang-LKW.
     *  * `NL_LZV`
     *  Preferred routes for long trucks in the Netherlands, also known as LZV (Langere en Zwaardere Vrachtautocombinatie).
     *  * `NZ_HPMV`
     *  The network for High Productivity Motor Vehicles (HPMV) carrying the maximum loads available under a permit (New Zeland Transport Agency).
     *  * `SE_BK_1`
     *  Public roads and bridges that support up to 64 t total permitted weight (Swedish Transport Administration).
     *  * `SE_BK_2`
     *  Public roads and bridges that support up to 51.4 t total permitted weight.
     *  Actual limit depends on wheelbase and axle weight (Swedish Transport Administration).
     *  * `SE_BK_3`
     *  Public roads and bridges that support up to 37.5 t total permitted weight.
     *  Actual limit depends on wheelbase and axle weight (Swedish Transport Administration).
     *  * `SE_BK_4`
     *  Public roads and bridges that support up to 74 t total permitted weight (draft summer 2018, Swedish Transport Administration).
     *  * `US_STAA`
     *  Routes that belong to the highway network as defined by the Surface Transportation Assistance Act in the US.
     *  * `US_TD`
     *  Part of a state-designated highway network for trucks in the US.
     *  * `AU_B_DOUBLE`
     *  B-Double routes as defined in Australia.
     *  * `AU_B_DOUBLE_HML`
     *  Routes for B-Double vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).
     *  * `AU_B_TRIPLE`
     *  B-Triple routes as defined in Australia.
     *  * `AU_B_TRIPLE_HML`
     *  Routes for B-Triple vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).
     *  * `AU_AB_TRIPLE`
     *  Routes for AB-Triple vehicle combinations operating (Australian Transport Administration).
     *  * `AU_AB_TRIPLE_HML`
     *  Routes for AB-Triple vehicle combinations operating at Higher Mass Limits (HML) (Australian Transport Administration).
     *  * `NONE`
     *  Overrides the profile settings to specify not to follow any truck routes. 
     *  If _NONE_ is specified along with other truck routes it is ignored.
     * 
     * Available values are provided by type `TruckRoutes`.
     * 
     * Relevant for `routing`.
     * Cannot be used with **options[routingMode]=MONETARY**.
     * @type {string}
     * @memberof Vehicle
     */
    truckRoutes?: string | null;
    /**
     * Specifies if the vehicle usage is commercial.
     * 
     * Relevant for `toll`.
     * @type {boolean}
     * @memberof Vehicle
     */
    commercial?: boolean | null;
    /**
     * A comma separated list of ETC Subscriptions.
     * See [here](./concepts/electronic-toll-collection) for more information on available subscriptions.
     * 
     * Available values are provided by type `EtcSubscriptionTypes`: "AT_GOBOX" "BE_TELETOL" "BE_VIAPASS" "CH_LSVA" "DE_QUICKBOX" "DE_TOLLCOLLECT" "DE_WARNOWTUNNEL_RFID" "DK_BROPAS_BUSINESS" "IT_TELEPASS" "NL_TELECARD" "NL_TTAG" "NO_AUTOPASS" "PT_VIA_VERDE" "US_APASS" "US_BREEZEBY" "US_DOWNBEACH_EXPRESSPASS" "US_EPASS" "US_EXPRESSACCOUNT" "US_EXPRESSCARD" "US_EXPRESSPASS" "US_EXPRESSTOLL" "US_EZPASS" "US_EZTAG" "US_FASTRAK" "US_GEAUXPASS" "US_GOODTOGO" "US_GOPASS" "US_IPASS" "US_KTAG" "US_LEEWAY" "US_MACKINACBRIDGE_MACPASS" "US_MARYLAND_EZPASS" "US_MASSACHUSETTS_EZPASS" "US_NC_QUICKPASS" "US_NEWHAMPSHIRE_EZPASS" "US_NEWJERSEY_EZPASS" "US_NEWYORK_EZPASS" "US_NEXPRESS" "US_OHIO_EZPASS" "US_PALPASS" "US_PIKEPASS" "US_RIVERLINK" "US_RIVERLINK_NOTRANSPONDER" "US_SEAWAYTRANSITCARD" "US_SUNPASS" "US_TOLLTAG" "US_TXTAG" "US_VIRGINIA_EZPASS" "US_WESTVIRGINIA_EZPASS" "US_PEACHPASS" "US_NEXUS" "US_DELAWARE_EZPASS" "US_GROSSEILETOLLBRIDGE_PASSTAG" "US_EZPASS_PAYBYPLATE"
     * 
     * Relevant for `toll`.
     * @type {string}
     * @memberof Vehicle
     */
    etcSubscriptions?: string | null;
}

/**
 * Check if a given object implements the Vehicle interface.
 */
export function instanceOfVehicle(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function VehicleFromJSON(json: any): Vehicle {
    return VehicleFromJSONTyped(json, false);
}

export function VehicleFromJSONTyped(json: any, ignoreDiscriminator: boolean): Vehicle {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'engineType': !exists(json, 'engineType') ? undefined : EngineTypeFromJSON(json['engineType']),
        'fuelType': !exists(json, 'fuelType') ? undefined : FuelTypeFromJSON(json['fuelType']),
        'electricityType': !exists(json, 'electricityType') ? undefined : ElectricityTypeFromJSON(json['electricityType']),
        'averageFuelConsumption': !exists(json, 'averageFuelConsumption') ? undefined : json['averageFuelConsumption'],
        'averageElectricityConsumption': !exists(json, 'averageElectricityConsumption') ? undefined : json['averageElectricityConsumption'],
        'bioFuelRatio': !exists(json, 'bioFuelRatio') ? undefined : json['bioFuelRatio'],
        'hybridRatio': !exists(json, 'hybridRatio') ? undefined : json['hybridRatio'],
        'dualFuelRatio': !exists(json, 'dualFuelRatio') ? undefined : json['dualFuelRatio'],
        'cylinderCapacity': !exists(json, 'cylinderCapacity') ? undefined : json['cylinderCapacity'],
        'emissionStandard': !exists(json, 'emissionStandard') ? undefined : EmissionStandardFromJSON(json['emissionStandard']),
        'co2EmissionClass': !exists(json, 'co2EmissionClass') ? undefined : json['co2EmissionClass'],
        'lowEmissionZoneTypes': !exists(json, 'lowEmissionZoneTypes') ? undefined : json['lowEmissionZoneTypes'],
        'particleReductionClass': !exists(json, 'particleReductionClass') ? undefined : ParticleReductionClassFromJSON(json['particleReductionClass']),
        'emptyWeight': !exists(json, 'emptyWeight') ? undefined : json['emptyWeight'],
        'loadWeight': !exists(json, 'loadWeight') ? undefined : json['loadWeight'],
        'totalPermittedWeight': !exists(json, 'totalPermittedWeight') ? undefined : json['totalPermittedWeight'],
        'axleWeight': !exists(json, 'axleWeight') ? undefined : json['axleWeight'],
        'numberOfAxles': !exists(json, 'numberOfAxles') ? undefined : json['numberOfAxles'],
        'numberOfTires': !exists(json, 'numberOfTires') ? undefined : json['numberOfTires'],
        'height': !exists(json, 'height') ? undefined : json['height'],
        'heightAboveFrontAxle': !exists(json, 'heightAboveFrontAxle') ? undefined : json['heightAboveFrontAxle'],
        'length': !exists(json, 'length') ? undefined : json['length'],
        'width': !exists(json, 'width') ? undefined : json['width'],
        'hazardousMaterials': !exists(json, 'hazardousMaterials') ? undefined : json['hazardousMaterials'],
        'tunnelRestrictionCode': !exists(json, 'tunnelRestrictionCode') ? undefined : TunnelRestrictionCodeFromJSON(json['tunnelRestrictionCode']),
        'truckRoutes': !exists(json, 'truckRoutes') ? undefined : json['truckRoutes'],
        'commercial': !exists(json, 'commercial') ? undefined : json['commercial'],
        'etcSubscriptions': !exists(json, 'etcSubscriptions') ? undefined : json['etcSubscriptions'],
    };
}

export function VehicleToJSON(value?: Vehicle | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'engineType': EngineTypeToJSON(value.engineType),
        'fuelType': FuelTypeToJSON(value.fuelType),
        'electricityType': ElectricityTypeToJSON(value.electricityType),
        'averageFuelConsumption': value.averageFuelConsumption,
        'averageElectricityConsumption': value.averageElectricityConsumption,
        'bioFuelRatio': value.bioFuelRatio,
        'hybridRatio': value.hybridRatio,
        'dualFuelRatio': value.dualFuelRatio,
        'cylinderCapacity': value.cylinderCapacity,
        'emissionStandard': EmissionStandardToJSON(value.emissionStandard),
        'co2EmissionClass': value.co2EmissionClass,
        'lowEmissionZoneTypes': value.lowEmissionZoneTypes,
        'particleReductionClass': ParticleReductionClassToJSON(value.particleReductionClass),
        'emptyWeight': value.emptyWeight,
        'loadWeight': value.loadWeight,
        'totalPermittedWeight': value.totalPermittedWeight,
        'axleWeight': value.axleWeight,
        'numberOfAxles': value.numberOfAxles,
        'numberOfTires': value.numberOfTires,
        'height': value.height,
        'heightAboveFrontAxle': value.heightAboveFrontAxle,
        'length': value.length,
        'width': value.width,
        'hazardousMaterials': value.hazardousMaterials,
        'tunnelRestrictionCode': TunnelRestrictionCodeToJSON(value.tunnelRestrictionCode),
        'truckRoutes': value.truckRoutes,
        'commercial': value.commercial,
        'etcSubscriptions': value.etcSubscriptions,
    };
}

