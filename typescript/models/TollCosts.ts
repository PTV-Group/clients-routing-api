/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TollCostsByCountry,
    TollCostsByCountryFromJSON,
    TollCostsByCountryFromJSONTyped,
    TollCostsByCountryToJSON,
} from './TollCostsByCountry';
import {
    TollCostsConvertedPrice,
    TollCostsConvertedPriceFromJSON,
    TollCostsConvertedPriceFromJSONTyped,
    TollCostsConvertedPriceToJSON,
} from './TollCostsConvertedPrice';
import {
    TollPrice,
    TollPriceFromJSON,
    TollPriceFromJSONTyped,
    TollPriceToJSON,
} from './TollPrice';

/**
 * The toll prices payable for this route or leg aggregated by currency.
 * @export
 * @interface TollCosts
 */
export interface TollCosts {
    /**
     * The toll prices payable in the given currencies. The price may be 0 if no toll applies for a currency in a country passed by the route.
     * @type {Array<TollPrice>}
     * @memberof TollCosts
     */
    prices: Array<TollPrice>;
    /**
     * 
     * @type {TollCostsConvertedPrice}
     * @memberof TollCosts
     */
    convertedPrice?: TollCostsConvertedPrice;
    /**
     * The toll prices by country or subdivision. The price may be 0 if no toll applies in a country passed by the route.
     * @type {Array<TollCostsByCountry>}
     * @memberof TollCosts
     */
    countries: Array<TollCostsByCountry>;
}

export function TollCostsFromJSON(json: any): TollCosts {
    return TollCostsFromJSONTyped(json, false);
}

export function TollCostsFromJSONTyped(json: any, ignoreDiscriminator: boolean): TollCosts {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'prices': ((json['prices'] as Array<any>).map(TollPriceFromJSON)),
        'convertedPrice': !exists(json, 'convertedPrice') ? undefined : TollCostsConvertedPriceFromJSON(json['convertedPrice']),
        'countries': ((json['countries'] as Array<any>).map(TollCostsByCountryFromJSON)),
    };
}

export function TollCostsToJSON(value?: TollCosts | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'prices': ((value.prices as Array<any>).map(TollPriceToJSON)),
        'convertedPrice': TollCostsConvertedPriceToJSON(value.convertedPrice),
        'countries': ((value.countries as Array<any>).map(TollCostsByCountryToJSON)),
    };
}

