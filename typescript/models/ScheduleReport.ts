/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Provides an overview of the times of the schedule of this route including break and rest times.
 * Requires _SCHELDULE_REPORT_ to be requested.
 * @export
 * @interface ScheduleReport
 */
export interface ScheduleReport {
    /**
     * The start time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). Only present with **options[trafficMode]** _REALISTIC_ or when **options[startTime]** is specified.
     * @type {Date}
     * @memberof ScheduleReport
     */
    startTime?: Date;
    /**
     * The end time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). Only present with **options[trafficMode]** _REALISTIC_ or when **options[startTime]** is specified.
     * @type {Date}
     * @memberof ScheduleReport
     */
    endTime?: Date;
    /**
     * The total driving time of the route [s].
     * @type {number}
     * @memberof ScheduleReport
     */
    drivingTime: number;
    /**
     * The total service time of the route [s].
     * @type {number}
     * @memberof ScheduleReport
     */
    serviceTime: number;
    /**
     * The total waiting time of the route [s].
     * @type {number}
     * @memberof ScheduleReport
     */
    waitingTime: number;
    /**
     * The total break time of the route [s].
     * @type {number}
     * @memberof ScheduleReport
     */
    breakTime: number;
    /**
     * The total rest time of the route [s].
     * @type {number}
     * @memberof ScheduleReport
     */
    restTime: number;
}

export function ScheduleReportFromJSON(json: any): ScheduleReport {
    return ScheduleReportFromJSONTyped(json, false);
}

export function ScheduleReportFromJSONTyped(json: any, ignoreDiscriminator: boolean): ScheduleReport {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'startTime': !exists(json, 'startTime') ? undefined : (new Date(json['startTime'])),
        'endTime': !exists(json, 'endTime') ? undefined : (new Date(json['endTime'])),
        'drivingTime': json['drivingTime'],
        'serviceTime': json['serviceTime'],
        'waitingTime': json['waitingTime'],
        'breakTime': json['breakTime'],
        'restTime': json['restTime'],
    };
}

export function ScheduleReportToJSON(value?: ScheduleReport | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'startTime': value.startTime === undefined ? undefined : (value.startTime.toISOString()),
        'endTime': value.endTime === undefined ? undefined : (value.endTime.toISOString()),
        'drivingTime': value.drivingTime,
        'serviceTime': value.serviceTime,
        'waitingTime': value.waitingTime,
        'breakTime': value.breakTime,
        'restTime': value.restTime,
    };
}

