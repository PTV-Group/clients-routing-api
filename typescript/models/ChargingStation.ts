/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.25
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CurrentType } from './CurrentType';
import {
    CurrentTypeFromJSON,
    CurrentTypeFromJSONTyped,
    CurrentTypeToJSON,
} from './CurrentType';

/**
 * Defines the charging capabilities available the a waypoint.
 * @export
 * @interface ChargingStation
 */
export interface ChargingStation {
    /**
     * The power delivered by the charging station [kW].
     * @type {number}
     * @memberof ChargingStation
     */
    power: number;
    /**
     * 
     * @type {CurrentType}
     * @memberof ChargingStation
     */
    currentType: CurrentType;
    /**
     * The time to setup the connection [s].
     * @type {number}
     * @memberof ChargingStation
     */
    setupTime?: number;
    /**
     * The price of one kWh in the currency defined in **options[currency]**.
     * @type {number}
     * @memberof ChargingStation
     */
    kWhPrice?: number;
}

/**
 * Check if a given object implements the ChargingStation interface.
 */
export function instanceOfChargingStation(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "power" in value;
    isInstance = isInstance && "currentType" in value;

    return isInstance;
}

export function ChargingStationFromJSON(json: any): ChargingStation {
    return ChargingStationFromJSONTyped(json, false);
}

export function ChargingStationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChargingStation {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'power': json['power'],
        'currentType': CurrentTypeFromJSON(json['currentType']),
        'setupTime': !exists(json, 'setupTime') ? undefined : json['setupTime'],
        'kWhPrice': !exists(json, 'kWhPrice') ? undefined : json['kWhPrice'],
    };
}

export function ChargingStationToJSON(value?: ChargingStation | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'power': value.power,
        'currentType': CurrentTypeToJSON(value.currentType),
        'setupTime': value.setupTime,
        'kWhPrice': value.kWhPrice,
    };
}

