/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CurrentType } from './CurrentType';
import {
    CurrentTypeFromJSON,
    CurrentTypeFromJSONTyped,
    CurrentTypeToJSON,
} from './CurrentType';

/**
 * Defines the charging capabilities available the a waypoint.
 * 
 * @export
 * @interface ChargingStation
 */
export interface ChargingStation {
    /**
     * The power delivered by the charging station [kW].
     * @type {number}
     * @memberof ChargingStation
     */
    power: number;
    /**
     * 
     * @type {CurrentType}
     * @memberof ChargingStation
     */
    currentType: CurrentType;
    /**
     * The time to setup the connection [s].
     * @type {number}
     * @memberof ChargingStation
     */
    setupTime?: number;
    /**
     * The price of one kWh in the currency defined in **options[currency]**.
     * @type {number}
     * @memberof ChargingStation
     */
    kWhPrice?: number;
    /**
     * If true, the service time can be used for charging. Will be ignored, if **serviceTime** is 0. This can have 
     * an influence on charging optimization because the additional time needed for charging is minimized.
     * @type {boolean}
     * @memberof ChargingStation
     */
    useServiceTimeForCharging?: boolean;
}



/**
 * Check if a given object implements the ChargingStation interface.
 */
export function instanceOfChargingStation(value: object): value is ChargingStation {
    if (!('power' in value) || value['power'] === undefined) return false;
    if (!('currentType' in value) || value['currentType'] === undefined) return false;
    return true;
}

export function ChargingStationFromJSON(json: any): ChargingStation {
    return ChargingStationFromJSONTyped(json, false);
}

export function ChargingStationFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChargingStation {
    if (json == null) {
        return json;
    }
    return {
        
        'power': json['power'],
        'currentType': CurrentTypeFromJSON(json['currentType']),
        'setupTime': json['setupTime'] == null ? undefined : json['setupTime'],
        'kWhPrice': json['kWhPrice'] == null ? undefined : json['kWhPrice'],
        'useServiceTimeForCharging': json['useServiceTimeForCharging'] == null ? undefined : json['useServiceTimeForCharging'],
    };
}

export function ChargingStationToJSON(value?: ChargingStation | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'power': value['power'],
        'currentType': CurrentTypeToJSON(value['currentType']),
        'setupTime': value['setupTime'],
        'kWhPrice': value['kWhPrice'],
        'useServiceTimeForCharging': value['useServiceTimeForCharging'],
    };
}

