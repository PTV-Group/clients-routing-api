/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ExchangeRate,
    ExchangeRateFromJSON,
    ExchangeRateFromJSONTyped,
    ExchangeRateToJSON,
} from './ExchangeRate';

/**
 * Information about the currencies that are listed in the toll costs and/or toll sections objects.
 * @export
 * @interface Currencies
 */
export interface Currencies {
    /**
     * The date of the exchange rates formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * @type {Date}
     * @memberof Currencies
     */
    date: Date;
    /**
     * The provider of the exchange rates.
     * @type {string}
     * @memberof Currencies
     */
    provider: string;
    /**
     * The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code as provided in the request.
     * @type {string}
     * @memberof Currencies
     */
    baseCurrency: string;
    /**
     * The exchange rates that were used to determine the converted prices.
     * @type {Array<ExchangeRate>}
     * @memberof Currencies
     */
    exchangeRates: Array<ExchangeRate>;
}

export function CurrenciesFromJSON(json: any): Currencies {
    return CurrenciesFromJSONTyped(json, false);
}

export function CurrenciesFromJSONTyped(json: any, ignoreDiscriminator: boolean): Currencies {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'date': (new Date(json['date'])),
        'provider': json['provider'],
        'baseCurrency': json['baseCurrency'],
        'exchangeRates': ((json['exchangeRates'] as Array<any>).map(ExchangeRateFromJSON)),
    };
}

export function CurrenciesToJSON(value?: Currencies | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'date': (value.date.toISOString().substr(0,10)),
        'provider': value.provider,
        'baseCurrency': value.baseCurrency,
        'exchangeRates': ((value.exchangeRates as Array<any>).map(ExchangeRateToJSON)),
    };
}

