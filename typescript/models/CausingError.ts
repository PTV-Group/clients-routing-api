/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface CausingError
 */
export interface CausingError {
    /**
     * A human readable message that describes the error.
     * @type {string}
     * @memberof CausingError
     */
    description: string;
    /**
     * A constant string that can be used to identify this error class programmatically.
     * An errorCode can have **details** to provide information in additional properties which are described with the code they apply to. They are of type string unless otherwise specified.
     * Note that additional errorCodes as well as the **details** of existing errorCodes may be added at any time. Furthermore, the **description** may change at any time.  
     * 
     * **Error codes for** `GENERAL_VALIDATION_ERROR`
     * 
     * * `GENERAL_INVALID_VALUE` - A parameter is set to an invalid value.
     *   * `value` - The invalid value.
     * * `GENERAL_UNRECOGNIZED_PARAMETER` - A parameter is unknown.
     * * `GENERAL_MISSING_PARAMETER` - A required parameter is missing.
     * * `GENERAL_MINIMUM_LENGTH_VIOLATED` - The minimum length is violated.
     *   * `minimumLength` - The minimum length (integer).
     * * `GENERAL_MAXIMUM_LENGTH_VIOLATED` - The maximum length is violated.
     *   * `maximumLength` - The maximum length (integer).
     * * `GENERAL_MINIMUM_VALUE_VIOLATED` - The minimum value restriction is violated.
     *   * `minimumValue` - The minimum value (integer or double).
     * * `GENERAL_MAXIMUM_VALUE_VIOLATED` - The maximum value restriction is violated.
     *   * `maximumValue` - The maximum value (integer or double).
     * * `GENERAL_DUPLICATE_PARAMETER` - A parameter is duplicated.
     * * `GENERAL_INVALID_LIST` - A list has an invalid format such as duplicate commas.
     *   * `value` - The invalid list.
     * * `GENERAL_INVALID_INTERVAL` - A time interval is invalid, i.e. start is greater than end.
     * * `ROUTING_INVALID_WAYPOINT_ATTRIBUTE` - A waypoint attribute is set to an invalid value.
     *   * `attribute` - The invalid waypoint attribute.
     * * `ROUTING_UNRECOGNIZED_WAYPOINT_ATTRIBUTE` - A waypoint attribute is unknown.
     *   * `attribute` - The invalid waypoint key.
     * * `ROUTING_DUPLICATE_WAYPOINT_ATTRIBUTE` - A waypoint attribute is duplicated.
     *   * `attribute` - The duplicated waypoint key.
     * * `ROUTING_WAYPOINT_ATTRIBUTE_CONFLICT` - Two waypoint attributes are in conflict with each other.
     *   * `attribute` - The first conflicting attribute.
     *   * `conflictingAttribute` - The second conflicting attribute.
     * * `ROUTING_INVALID_MANIPULATION_WAYPOINT_ORDER` - The manipulation waypoint is not valid for start or destination.
     * * `ROUTING_INVALID_COMBINED_TRANSPORT_WAYPOINT_ORDER` - The combinedTransport waypoint is not valid for start or destination.
     * * `ROUTING_INVALID_WAYPOINT_LIST_FOR_ALTERNATIVE_ROUTES` - Alternative routes are supported only for two on-road or off-road waypoints.
     * * `ROUTING_INVALID_WAYPOINT` - A waypoint contains multiple types or none of them, but exactly one must be specified.
     * * `ROUTING_MUST_HAVE_WAYPOINTS_OR_ROUTE_ID` - The request must have either at least two waypoints or a routeId.
     * * `ROUTING_EMISSIONS_MUTUALLY_EXCLUSIVE` - All emissions EN16258_2012 results and ISO14083_2022 results are mutually exclusive.
     *   * `attribute` - The first conflicting emissions standard.
     *   * `conflictingAttributes` - The list of other conflicting emissions standards.
     * * `ROUTING_START_AND_ARRIVAL_TIME_MUTUALLY_EXCLUSIVE` - startTime and arrivalTime are mutually exclusive. - _The **parameter** remains empty._
     * * `ROUTING_ESTIMATED_DISTANCE_TOO_LONG` - The distance of the route (estimated by air-line) for non-motorized vehicles is too long. - _The **parameter** remains empty._
     *   * `distance` - The estimated distance (integer).
     *   * `limit` - The maximum allowable distance (integer).
     * * `ROUTING_PARAMETER_CONFLICT` - Two parameters are in conflict with each other.
     *   * `conflictingParameter` - The conflicting parameter.
     *   * `message` - The error message.
     * * `ROUTING_NO_VALID_COUNTRY_ALLOWED` - The list of allowed countries does not contain any of the available countries so that the effective list of countries allowed for routing is empty.
     *   * `allowedCountries` - The list of allowed countries.
     * * `ROUTING_ALL_VALID_COUNTRIES_PROHIBITED` - The list of prohibited countries contains all available countries so that the effective list of countries allowed for routing is empty.
     *   * `prohibitedCountries` - The list of prohibited countries.
     * * `ROUTING_ALLOWED_AND_PROHIBITED_COUNTRIES_CONFLICT` - The lists of allowed and prohibited countries contain the same countries so that the effective list of countries allowed for routing is empty. - _The **parameter** remains empty._
     *   * `allowedCountries` - The list of allowed countries.
     *   * `prohibitedCountries` - The list of prohibited countries.
     * * `ROUTING_MAXIMUM_HORIZON_VALUE_VIOLATED` - The maximum value of horizon is violated.
     *   * `limit` - The maximum allowable horizon (integer).
     * * `ROUTING_MUST_HAVE_ONE_WAYPOINT_OR_ROUTE_ID` - The request must have either a waypoint or a routeId.
     * * `ROUTING_HORIZONS_EQUAL_OR_NOT_ASCENDING` - The horizons have equal values or are not ascending.
     *   * `value` - The invalid horizon.
     * * `ROUTING_ROUTE_TOO_LONG_FOR_REACHABILITY` - The route is too long to be used with reachable areas or locations.
     *   * `length` - The actual route length (integer).
     *   * `limit` - The maximum allowable route length (integer).
     * * `ROUTING_ALLOWED_AND_PROHIBITED_COUNTRIES_IN_CONFLICT_WITH_ROUTE_ID` - The lists of allowed and prohibited countries are in conflict with the routeId which passes an effectively prohibited country.
     *   * `value` - The value in conflict.
     * * `ROUTING_ROUTE_ID_NOT_FOUND` - The routeId cannot be found.
     *   * `value` - The routeId.
     * * `ROUTING_ROUTE_ID_CANNOT_BE_USED` - The routeId cannot be used for this operation as it was created by a service other than routing and lacks a routing context.
     *   * `value` - The routeId.
     * * `ROUTING_PROFILE_NOT_FOUND` - The requested profile could not be found.
     *   * `value` - The profile name.
     * * `ROUTING_UNSUPPORTED_CURRENCY` - The specified currency is not supported.
     *   * `currency` - The unsupported currency.
     * * `ROUTING_PARAMETER_ONLY_SUPPORTED_BY_POST` - A requested parameter is only supported for the appropriate POST operation.
     *   * `value` - The invalid parameter value.
     * * `ROUTING_OPENING_INTERVALS_REQUIRE_TIME` - When using opening intervals with a waypoint and with **options[trafficMode]=AVERAGE** either a start or an arrival time has to be specified.
     * * `ROUTING_ARRIVAL_TIME_WITH_SCHEDULE` - **options[arrivalTime]** cannot be used with the **results** _SCHEDULE_REPORT_ and _SCHEDULE_EVENT_ nor when **openingIntervals**, **serviceTime** or **workingHoursPreset** are specified.
     *   * `value` - The invalid parameter value.
     * * `ROUTING_INVALID_NUMBER_OF_COORDINATES` - The polyline cannot be parsed because the number of coordinates is not even.
     *   * `value` - The invalid parameter value.
     *   * `polylineIndex` - The index denoting the polyline in which the error was found.
     * * `ROUTING_INVALID_COORDINATE` - The provided coordinate is not in the valid range or cannot be parsed.
     *   * `value` - The invalid parameter value.
     *   * `polylineIndex` - The index denoting the polyline in which the error was found.
     *   * `coordinateIndex` - The index denoting the erroneous coordinate within the polyline.
     * * `ROUTING_FEATURE_NOT_SUPPORTED_WITH_MONETARY_COSTS` - The requested feature is not supported when **options[routingMode] is _MONETARY_**.
     *   * `value` - The invalid parameter value.
     * * `ROUTING_MUST_HAVE_MONETARY_COST_VALUE` - Both values monetaryCostOptions[costPerKilometer] and monetaryCostOptions[workingCostPerHour] are zero. Use a value greater zero for at least one of this monetaryCostOptions parameters.
     * 
     * **Error codes for** `ROUTING_ERROR`
     * 
     * * `ROUTING_WAYPOINT_CANNOT_BE_MATCHED` - The waypoint cannot be matched to the nearest possible road.
     * * `ROUTING_ROUTE_NOT_FOUND` - A route between at least two waypoints could not be found for the current configuration and profile. - _The **parameter** remains empty._
     * * `ROUTING_UTC_OFFSET_CANNOT_BE_DETERMINED` - The UTC offset of the start waypoint cannot be determined.
     * * `ROUTING_BLOCK_INTERSECTING_ROADS_TOO_MANY_SEGMENTS` - The maximum number of road segments intersecting one polyline must not exceed 5000.
     * 
     * **Error codes for** `ROUTING_RESTRICTION_EXCEEDED`
     * 
     * * `ROUTING_TOO_MANY_WAYPOINTS` - The request contains too many waypoints.
     *   * `limit`- The maximum allowed number of waypoints for a single request (integer).
     * 
     * **Error codes for** `GENERAL_RESOURCE_NOT_FOUND`
     * 
     * * `GENERAL_INVALID_ID` - The ID does not exist.
     *   * `value` - The invalid ID.
     * @type {string}
     * @memberof CausingError
     */
    errorCode: string;
    /**
     * The name of the affected query or path parameter or a JSONPath to the affected property of the request.
     * @type {string}
     * @memberof CausingError
     */
    parameter?: string;
    /**
     * Additional properties specific to this error class.
     * @type {{ [key: string]: any; }}
     * @memberof CausingError
     */
    details?: { [key: string]: any; };
}

export function CausingErrorFromJSON(json: any): CausingError {
    return CausingErrorFromJSONTyped(json, false);
}

export function CausingErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): CausingError {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'description': json['description'],
        'errorCode': json['errorCode'],
        'parameter': !exists(json, 'parameter') ? undefined : json['parameter'],
        'details': !exists(json, 'details') ? undefined : json['details'],
    };
}

export function CausingErrorToJSON(value?: CausingError | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'description': value.description,
        'errorCode': value.errorCode,
        'parameter': value.parameter,
        'details': value.details,
    };
}

