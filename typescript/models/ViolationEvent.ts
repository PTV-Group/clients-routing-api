/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AccessType } from './AccessType';
import {
    AccessTypeFromJSON,
    AccessTypeFromJSONTyped,
    AccessTypeToJSON,
} from './AccessType';
import type { ScheduleViolationType } from './ScheduleViolationType';
import {
    ScheduleViolationTypeFromJSON,
    ScheduleViolationTypeFromJSONTyped,
    ScheduleViolationTypeToJSON,
} from './ScheduleViolationType';
import type { ViolationType } from './ViolationType';
import {
    ViolationTypeFromJSON,
    ViolationTypeFromJSONTyped,
    ViolationTypeToJSON,
} from './ViolationType';

/**
 * Issued when the route passes a road which is prohibited for the given vehicle but passed nevertheless as there is no other valid route or when schedule restrictions are violated. Requires _VIOLATION_EVENTS_ to be requested.
 * @export
 * @interface ViolationEvent
 */
export interface ViolationEvent {
    /**
     * 
     * @type {ViolationType}
     * @memberof ViolationEvent
     */
    type: ViolationType;
    /**
     * Contains the list of violated schedule restrictions at this event. Only present if **type=SCHEDULE**.
     * @type {Array<ScheduleViolationType>}
     * @memberof ViolationEvent
     */
    scheduleViolationTypes?: Array<ScheduleViolationType>;
    /**
     * 
     * @type {AccessType}
     * @memberof ViolationEvent
     */
    accessType?: AccessType;
    /**
     * For **accessType** _ENTER_ this index points to the corresponding event with **accessType** _EXIT_ and vice-versa. Not present otherwise.
     * @type {number}
     * @memberof ViolationEvent
     */
    relatedEventIndex?: number;
    /**
     * The polyline of the violation in the format specified by **options[polylineFormat]**. Only present for **accessType** _ENTER_. Requires _VIOLATION_EVENTS_POLYLINE_ to be requested.
     * @type {string}
     * @memberof ViolationEvent
     */
    polyline?: string;
}

/**
 * Check if a given object implements the ViolationEvent interface.
 */
export function instanceOfViolationEvent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function ViolationEventFromJSON(json: any): ViolationEvent {
    return ViolationEventFromJSONTyped(json, false);
}

export function ViolationEventFromJSONTyped(json: any, ignoreDiscriminator: boolean): ViolationEvent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': ViolationTypeFromJSON(json['type']),
        'scheduleViolationTypes': !exists(json, 'scheduleViolationTypes') ? undefined : ((json['scheduleViolationTypes'] as Array<any>).map(ScheduleViolationTypeFromJSON)),
        'accessType': !exists(json, 'accessType') ? undefined : AccessTypeFromJSON(json['accessType']),
        'relatedEventIndex': !exists(json, 'relatedEventIndex') ? undefined : json['relatedEventIndex'],
        'polyline': !exists(json, 'polyline') ? undefined : json['polyline'],
    };
}

export function ViolationEventToJSON(value?: ViolationEvent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': ViolationTypeToJSON(value.type),
        'scheduleViolationTypes': value.scheduleViolationTypes === undefined ? undefined : ((value.scheduleViolationTypes as Array<any>).map(ScheduleViolationTypeToJSON)),
        'accessType': AccessTypeToJSON(value.accessType),
        'relatedEventIndex': value.relatedEventIndex,
        'polyline': value.polyline,
    };
}

