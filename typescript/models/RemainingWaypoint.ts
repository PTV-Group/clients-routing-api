/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.25
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ScheduleViolationType } from './ScheduleViolationType';
import {
    ScheduleViolationTypeFromJSON,
    ScheduleViolationTypeFromJSONTyped,
    ScheduleViolationTypeToJSON,
} from './ScheduleViolationType';

/**
 * 
 * @export
 * @interface RemainingWaypoint
 */
export interface RemainingWaypoint {
    /**
     * The name of this waypoint.
     * @type {string}
     * @memberof RemainingWaypoint
     */
    name: string;
    /**
     * The estimated time of arrival at this waypoint formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * Does not include service, break, rest and waiting at this waypoint.
     * @type {Date}
     * @memberof RemainingWaypoint
     */
    estimatedTimeOfArrival: Date;
    /**
     * The distance from the current position to this waypoint [m].
     * @type {number}
     * @memberof RemainingWaypoint
     */
    distance: number;
    /**
     * The travel time from the current position to this waypoint [s]. Does not include service, break, rest and waiting at this waypoint.
     * @type {number}
     * @memberof RemainingWaypoint
     */
    travelTime: number;
    /**
     * The delay due to live traffic from the current position to this waypoint [s].
     * @type {number}
     * @memberof RemainingWaypoint
     */
    trafficDelay: number;
    /**
     * The waiting time at this waypoint [s].
     * @type {number}
     * @memberof RemainingWaypoint
     */
    waitingTime: number;
    /**
     * Contains the list of violated schedule restrictions at this waypoint.
     * @type {Array<ScheduleViolationType>}
     * @memberof RemainingWaypoint
     */
    scheduleViolations: Array<ScheduleViolationType>;
    /**
     * If there is no valid route for the given vehicle between the vehicle position and this waypoint, but the resulting route can be calculated using roads actually prohibited, the route is marked as violated.
     * @type {boolean}
     * @memberof RemainingWaypoint
     */
    violated: boolean;
}

/**
 * Check if a given object implements the RemainingWaypoint interface.
 */
export function instanceOfRemainingWaypoint(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "estimatedTimeOfArrival" in value;
    isInstance = isInstance && "distance" in value;
    isInstance = isInstance && "travelTime" in value;
    isInstance = isInstance && "trafficDelay" in value;
    isInstance = isInstance && "waitingTime" in value;
    isInstance = isInstance && "scheduleViolations" in value;
    isInstance = isInstance && "violated" in value;

    return isInstance;
}

export function RemainingWaypointFromJSON(json: any): RemainingWaypoint {
    return RemainingWaypointFromJSONTyped(json, false);
}

export function RemainingWaypointFromJSONTyped(json: any, ignoreDiscriminator: boolean): RemainingWaypoint {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'estimatedTimeOfArrival': (new Date(json['estimatedTimeOfArrival'])),
        'distance': json['distance'],
        'travelTime': json['travelTime'],
        'trafficDelay': json['trafficDelay'],
        'waitingTime': json['waitingTime'],
        'scheduleViolations': ((json['scheduleViolations'] as Array<any>).map(ScheduleViolationTypeFromJSON)),
        'violated': json['violated'],
    };
}

export function RemainingWaypointToJSON(value?: RemainingWaypoint | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'estimatedTimeOfArrival': (value.estimatedTimeOfArrival.toISOString()),
        'distance': value.distance,
        'travelTime': value.travelTime,
        'trafficDelay': value.trafficDelay,
        'waitingTime': value.waitingTime,
        'scheduleViolations': ((value.scheduleViolations as Array<any>).map(ScheduleViolationTypeToJSON)),
        'violated': value.violated,
    };
}

