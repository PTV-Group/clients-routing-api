/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.22
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ScheduleViolationType } from './ScheduleViolationType';
import {
    ScheduleViolationTypeFromJSON,
    ScheduleViolationTypeFromJSONTyped,
    ScheduleViolationTypeToJSON,
} from './ScheduleViolationType';

/**
 * The ETA and the remaining distance and travel time to that waypoint.
 * @export
 * @interface RemainingWaypoint
 */
export interface RemainingWaypoint {
    /**
     * The name of the waypoint.
     * @type {string}
     * @memberof RemainingWaypoint
     */
    name: string;
    /**
     * The estimated time of arrival at the waypoint formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * @type {Date}
     * @memberof RemainingWaypoint
     */
    estimatedTimeOfArrival: Date;
    /**
     * The distance from the current position to the waypoint [m].
     * @type {number}
     * @memberof RemainingWaypoint
     */
    distance: number;
    /**
     * The travel time from the current position to the waypoint [s].
     * @type {number}
     * @memberof RemainingWaypoint
     */
    travelTime: number;
    /**
     * The delay due to live traffic from the current position to the waypoint [s].
     * @type {number}
     * @memberof RemainingWaypoint
     */
    trafficDelay: number;
    /**
     * The waiting time from the current position to the waypoint [s].
     * @type {number}
     * @memberof RemainingWaypoint
     */
    waitingTime: number;
    /**
     * Contains the list of violated schedule restrictions at this waypoint and up to this waypoint.
     * @type {Array<ScheduleViolationType>}
     * @memberof RemainingWaypoint
     */
    scheduleViolations: Array<ScheduleViolationType>;
}

/**
 * Check if a given object implements the RemainingWaypoint interface.
 */
export function instanceOfRemainingWaypoint(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "estimatedTimeOfArrival" in value;
    isInstance = isInstance && "distance" in value;
    isInstance = isInstance && "travelTime" in value;
    isInstance = isInstance && "trafficDelay" in value;
    isInstance = isInstance && "waitingTime" in value;
    isInstance = isInstance && "scheduleViolations" in value;

    return isInstance;
}

export function RemainingWaypointFromJSON(json: any): RemainingWaypoint {
    return RemainingWaypointFromJSONTyped(json, false);
}

export function RemainingWaypointFromJSONTyped(json: any, ignoreDiscriminator: boolean): RemainingWaypoint {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'estimatedTimeOfArrival': (new Date(json['estimatedTimeOfArrival'])),
        'distance': json['distance'],
        'travelTime': json['travelTime'],
        'trafficDelay': json['trafficDelay'],
        'waitingTime': json['waitingTime'],
        'scheduleViolations': ((json['scheduleViolations'] as Array<any>).map(ScheduleViolationTypeFromJSON)),
    };
}

export function RemainingWaypointToJSON(value?: RemainingWaypoint | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'estimatedTimeOfArrival': (value.estimatedTimeOfArrival.toISOString()),
        'distance': value.distance,
        'travelTime': value.travelTime,
        'trafficDelay': value.trafficDelay,
        'waitingTime': value.waitingTime,
        'scheduleViolations': ((value.scheduleViolations as Array<any>).map(ScheduleViolationTypeToJSON)),
    };
}

