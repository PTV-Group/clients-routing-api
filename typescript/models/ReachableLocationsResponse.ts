/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    CalculationStatus,
    CalculationStatusFromJSON,
    CalculationStatusFromJSONTyped,
    CalculationStatusToJSON,
} from './CalculationStatus';
import {
    ErrorResponse,
    ErrorResponseFromJSON,
    ErrorResponseFromJSONTyped,
    ErrorResponseToJSON,
} from './ErrorResponse';
import {
    ReachableLocations,
    ReachableLocationsFromJSON,
    ReachableLocationsFromJSONTyped,
    ReachableLocationsToJSON,
} from './ReachableLocations';

/**
 * 
 * @export
 * @interface ReachableLocationsResponse
 */
export interface ReachableLocationsResponse {
    /**
     * 
     * @type {CalculationStatus}
     * @memberof ReachableLocationsResponse
     */
    status?: CalculationStatus;
    /**
     * 
     * @type {ReachableLocations}
     * @memberof ReachableLocationsResponse
     */
    reachableLocations?: ReachableLocations;
    /**
     * 
     * @type {ErrorResponse}
     * @memberof ReachableLocationsResponse
     */
    error?: ErrorResponse;
}

export function ReachableLocationsResponseFromJSON(json: any): ReachableLocationsResponse {
    return ReachableLocationsResponseFromJSONTyped(json, false);
}

export function ReachableLocationsResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ReachableLocationsResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'status': !exists(json, 'status') ? undefined : CalculationStatusFromJSON(json['status']),
        'reachableLocations': !exists(json, 'reachableLocations') ? undefined : ReachableLocationsFromJSON(json['reachableLocations']),
        'error': !exists(json, 'error') ? undefined : ErrorResponseFromJSON(json['error']),
    };
}

export function ReachableLocationsResponseToJSON(value?: ReachableLocationsResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'status': CalculationStatusToJSON(value.status),
        'reachableLocations': ReachableLocationsToJSON(value.reachableLocations),
        'error': ErrorResponseToJSON(value.error),
    };
}

