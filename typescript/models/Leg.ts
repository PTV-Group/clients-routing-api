/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.27
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { EvReportLeg } from './EvReportLeg';
import {
    EvReportLegFromJSON,
    EvReportLegFromJSONTyped,
    EvReportLegToJSON,
} from './EvReportLeg';
import type { TollCosts } from './TollCosts';
import {
    TollCostsFromJSON,
    TollCostsFromJSONTyped,
    TollCostsToJSON,
} from './TollCosts';

/**
 * 
 * @export
 * @interface Leg
 */
export interface Leg {
    /**
     * The distance of the leg [m].
     * @type {number}
     * @memberof Leg
     */
    distance: number;
    /**
     * The travel time for the leg [s].
     * @type {number}
     * @memberof Leg
     */
    travelTime: number;
    /**
     * The total delay due to live traffic on this leg [s].
     * 
     * This value contains the sum of all traffic events on this leg and will be non-zero only if **options[trafficMode]=REALISTIC**.
     * See [here](./concepts/traffic-modes) for more information.
     * @type {number}
     * @memberof Leg
     */
    trafficDelay?: number;
    /**
     * If there is no valid connection between the waypoints of this leg but the resulting leg can be calculated by using actually prohibited roads, the route is marked as violated.
     * @type {boolean}
     * @memberof Leg
     */
    violated: boolean;
    /**
     * 
     * @type {TollCosts}
     * @memberof Leg
     */
    tollCosts?: TollCosts;
    /**
     * The polyline of the leg in the format specified by **options[polylineFormat]**.
     * @type {string}
     * @memberof Leg
     */
    polyline?: string;
    /**
     * 
     * @type {EvReportLeg}
     * @memberof Leg
     */
    evReport?: EvReportLeg;
}

/**
 * Check if a given object implements the Leg interface.
 */
export function instanceOfLeg(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "distance" in value;
    isInstance = isInstance && "travelTime" in value;
    isInstance = isInstance && "violated" in value;

    return isInstance;
}

export function LegFromJSON(json: any): Leg {
    return LegFromJSONTyped(json, false);
}

export function LegFromJSONTyped(json: any, ignoreDiscriminator: boolean): Leg {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'distance': json['distance'],
        'travelTime': json['travelTime'],
        'trafficDelay': !exists(json, 'trafficDelay') ? undefined : json['trafficDelay'],
        'violated': json['violated'],
        'tollCosts': !exists(json, 'tollCosts') ? undefined : TollCostsFromJSON(json['tollCosts']),
        'polyline': !exists(json, 'polyline') ? undefined : json['polyline'],
        'evReport': !exists(json, 'evReport') ? undefined : EvReportLegFromJSON(json['evReport']),
    };
}

export function LegToJSON(value?: Leg | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'distance': value.distance,
        'travelTime': value.travelTime,
        'trafficDelay': value.trafficDelay,
        'violated': value.violated,
        'tollCosts': TollCostsToJSON(value.tollCosts),
        'polyline': value.polyline,
        'evReport': EvReportLegToJSON(value.evReport),
    };
}

