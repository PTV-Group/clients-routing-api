/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.14
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TollSystem
 */
export interface TollSystem {
    /**
     * The name of the toll system.
     * @type {string}
     * @memberof TollSystem
     */
    name: string;
    /**
     * The name of the toll operator.
     * @type {string}
     * @memberof TollSystem
     */
    operatorName?: string;
    /**
     * The tariff version that has been used.
     * @type {string}
     * @memberof TollSystem
     */
    tariffVersion?: string;
    /**
     * The starting date of the tariff version validity formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
     * @type {Date}
     * @memberof TollSystem
     */
    tariffVersionValidFrom?: Date;
}

export function TollSystemFromJSON(json: any): TollSystem {
    return TollSystemFromJSONTyped(json, false);
}

export function TollSystemFromJSONTyped(json: any, ignoreDiscriminator: boolean): TollSystem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'operatorName': !exists(json, 'operatorName') ? undefined : json['operatorName'],
        'tariffVersion': !exists(json, 'tariffVersion') ? undefined : json['tariffVersion'],
        'tariffVersionValidFrom': !exists(json, 'tariffVersionValidFrom') ? undefined : (new Date(json['tariffVersionValidFrom'])),
    };
}

export function TollSystemToJSON(value?: TollSystem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'operatorName': value.operatorName,
        'tariffVersion': value.tariffVersion,
        'tariffVersionValidFrom': value.tariffVersionValidFrom === undefined ? undefined : (value.tariffVersionValidFrom.toISOString()),
    };
}

