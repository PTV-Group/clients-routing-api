/* tslint:disable */
/* eslint-disable */
/**
 * Routing
 * With the Routing service you can calculate routes from A to B taking into account vehicle-specific restrictions, traffic situations, toll, emissions, driver\'s working hours, service times and opening intervals.
 *
 * The version of the OpenAPI document: 1.31
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  HorizonType,
  Locations,
  ReachableLocationsId,
  ReachableLocationsResponse,
  ReachableOptions,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    HorizonTypeFromJSON,
    HorizonTypeToJSON,
    LocationsFromJSON,
    LocationsToJSON,
    ReachableLocationsIdFromJSON,
    ReachableLocationsIdToJSON,
    ReachableLocationsResponseFromJSON,
    ReachableLocationsResponseToJSON,
    ReachableOptionsFromJSON,
    ReachableOptionsToJSON,
} from '../models/index';

export interface DeleteReachableLocationsRequest {
    id: string;
}

export interface GetReachableLocationsRequest {
    id: string;
}

export interface StartAndCreateReachableLocationsRequest {
    horizon: number;
    locations: Locations;
    waypoint?: string;
    routeId?: string;
    profile?: string;
    horizonType?: HorizonType;
    options?: ReachableOptions;
}

/**
 * 
 */
export class ReachableLocationsApi extends runtime.BaseAPI {

    /**
     * Cancels a reachable locations calculation and deletes the calculated results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
     */
    async deleteReachableLocationsRaw(requestParameters: DeleteReachableLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling deleteReachableLocations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
		headerParameters['User-Agent'] = "ptv-generated typescript client";

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/reachable-locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Cancels a reachable locations calculation and deletes the calculated results specified by its ID. Results already calculated cannot be requested by its ID, anymore.
     */
    async deleteReachableLocations(requestParameters: DeleteReachableLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteReachableLocationsRaw(requestParameters, initOverrides);
    }

    /**
     * Gets the results of a reachable locations calculation specified by its ID.
     */
    async getReachableLocationsRaw(requestParameters: GetReachableLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReachableLocationsResponse>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling getReachableLocations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};
		headerParameters['User-Agent'] = "ptv-generated typescript client";

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/reachable-locations/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReachableLocationsResponseFromJSON(jsonValue));
    }

    /**
     * Gets the results of a reachable locations calculation specified by its ID.
     */
    async getReachableLocations(requestParameters: GetReachableLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReachableLocationsResponse> {
        const response = await this.getReachableLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Starts the calculation of the sets of reachable and unreachable locations from the given ones and creates them as the result.
     */
    async startAndCreateReachableLocationsRaw(requestParameters: StartAndCreateReachableLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReachableLocationsId>> {
        if (requestParameters['horizon'] == null) {
            throw new runtime.RequiredError(
                'horizon',
                'Required parameter "horizon" was null or undefined when calling startAndCreateReachableLocations().'
            );
        }

        if (requestParameters['locations'] == null) {
            throw new runtime.RequiredError(
                'locations',
                'Required parameter "locations" was null or undefined when calling startAndCreateReachableLocations().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['waypoint'] != null) {
            queryParameters['waypoint'] = requestParameters['waypoint'];
        }

        if (requestParameters['routeId'] != null) {
            queryParameters['routeId'] = requestParameters['routeId'];
        }

        if (requestParameters['profile'] != null) {
            queryParameters['profile'] = requestParameters['profile'];
        }

        if (requestParameters['horizon'] != null) {
            queryParameters['horizon'] = requestParameters['horizon'];
        }

        if (requestParameters['horizonType'] != null) {
            queryParameters['horizonType'] = requestParameters['horizonType'];
        }

        if (requestParameters['options'] != null) {
            queryParameters['options'] = requestParameters['options'];
        }

        const headerParameters: runtime.HTTPHeaders = {};
		headerParameters['User-Agent'] = "ptv-generated typescript client";

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["apiKey"] = await this.configuration.apiKey("apiKey"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/reachable-locations`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LocationsToJSON(requestParameters['locations']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReachableLocationsIdFromJSON(jsonValue));
    }

    /**
     * Starts the calculation of the sets of reachable and unreachable locations from the given ones and creates them as the result.
     */
    async startAndCreateReachableLocations(requestParameters: StartAndCreateReachableLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReachableLocationsId> {
        const response = await this.startAndCreateReachableLocationsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
